{
  "ApiProxy": {
    "apiFactory": [Function],
    "apiFactoryWithNamespace": [Function],
    "apply": [Function],
    "clusterRequest": [Function],
    "deleteCluster": [Function],
    "deletePlugin": [Function],
    "drainNode": [Function],
    "drainNodeStatus": [Function],
    "listPortForward": [Function],
    "metrics": [Function],
    "parseKubeConfig": [Function],
    "patch": [Function],
    "post": [Function],
    "put": [Function],
    "remove": [Function],
    "renameCluster": [Function],
    "request": [Function],
    "setCluster": [Function],
    "startPortForward": [Function],
    "stopOrDeletePortForward": [Function],
    "stream": [Function],
    "streamResult": [Function],
    "streamResults": [Function],
    "streamResultsForCluster": [Function],
    "testAuth": [Function],
    "testClusterHealth": [Function],
  },
  "CommonComponents": {
    "ActionButton": [Function],
    "AuthVisible": [Function],
    "BackLink": [Function],
    "CircularChart": [Function],
    "ConfirmButton": [Function],
    "ConfirmDialog": [Function],
    "CreateButton": [Function],
    "CreateResourceButton": [Function],
    "DateLabel": [Function],
    "DeleteButton": [Function],
    "Dialog": [Function],
    "DialogTitle": [Function],
    "DocsViewer": [Function],
    "EditButton": [Function],
    "EditorDialog": [Function],
    "EmptyContent": [Function],
    "ErrorPage": [Function],
    "HeaderLabel": [Function],
    "HoverInfoLabel": [Function],
    "InfoLabel": [Function],
    "InnerTable": [Function],
    "LabelListItem": [Function],
    "LightTooltip": [Function],
    "Link": [Function],
    "Loader": [Function],
    "LogViewer": [Function],
    "MatchExpressions": [Function],
    "MetadataDictGrid": [Function],
    "MetadataDisplay": [Function],
    "NameLabel": [Function],
    "NameValueTable": [Function],
    "NamespacesAutocomplete": [Function],
    "ObjectEventList": [Function],
    "PORT_FORWARDS_STORAGE_KEY": "portforwards",
    "PORT_FORWARD_RUNNING_STATUS": "Running",
    "PORT_FORWARD_STOP_STATUS": "Stopped",
    "PercentageBar": [Function],
    "PercentageCircle": [Function],
    "PortForward": [Function],
    "PureNamespacesAutocomplete": [Function],
    "Resource": {
      "AuthVisible": [Function],
      "CircularChart": [Function],
      "CreateButton": [Function],
      "DeleteButton": [Function],
      "DocsViewer": [Function],
      "EditButton": [Function],
      "EditorDialog": [Function],
      "MatchExpressions": [Function],
      "MetadataDictGrid": [Function],
      "MetadataDisplay": [Function],
      "PORT_FORWARDS_STORAGE_KEY": "portforwards",
      "PORT_FORWARD_RUNNING_STATUS": "Running",
      "PORT_FORWARD_STOP_STATUS": "Stopped",
      "PortForward": [Function],
      "ResourceListView": [Function],
      "ResourceTable": {
        "default": [Function],
        "useThrottle": [Function],
      },
      "ResourceTableColumnChooser": [Function],
      "RestartButton": [Function],
      "ScaleButton": [Function],
      "SimpleEditor": [Function],
      "ViewButton": [Function],
      "ViewDialog": [Function],
      "addResourceTableColumnsProcessor": [Function],
      "metadataStyles": [Function],
      "resourceTableSlice": {
        "actions": {
          "addResourceTableColumnsProcessor": [Function],
        },
        "caseReducers": {
          "addResourceTableColumnsProcessor": [Function],
        },
        "getInitialState": [Function],
        "getSelectors": [Function],
        "injectInto": [Function],
        "name": "resourceTable",
        "reducer": [Function],
        "reducerPath": "resourceTable",
        "selectSlice": [Function],
        "selectors": {},
      },
      "useThrottle": [Function],
    },
    "ResourceListView": [Function],
    "ResourceTable": {
      "default": [Function],
      "useThrottle": [Function],
    },
    "ResourceTableColumnChooser": [Function],
    "RestartButton": [Function],
    "ScaleButton": [Function],
    "SearchPopover": [Function],
    "SectionBox": [Function],
    "SectionFilterHeader": [Function],
    "SectionHeader": [Function],
    "ShowHideLabel": [Function],
    "SimpleEditor": [Function],
    "SimpleTable": [Function],
    "StatusLabel": [Function],
    "TabPanel": [Function],
    "Table": [Function],
    "Tabs": [Function],
    "Terminal": [Function],
    "TileChart": [Function],
    "TimezoneSelect": [Function],
    "TooltipIcon": [Function],
    "ValueLabel": [Function],
    "ViewButton": [Function],
    "ViewDialog": [Function],
    "addResourceTableColumnsProcessor": [Function],
    "makeStatusLabel": [Function],
    "metadataStyles": [Function],
    "resourceTableSlice": {
      "actions": {
        "addResourceTableColumnsProcessor": [Function],
      },
      "caseReducers": {
        "addResourceTableColumnsProcessor": [Function],
      },
      "getInitialState": [Function],
      "getSelectors": [Function],
      "injectInto": [Function],
      "name": "resourceTable",
      "reducer": [Function],
      "reducerPath": "resourceTable",
      "selectSlice": [Function],
      "selectors": {},
    },
    "useThrottle": [Function],
  },
  "ConfigStore": [Function],
  "Crd": {
    "__esModule": true,
    "default": [Function],
    "makeCustomResourceClass": [Function],
  },
  "DefaultAppBarAction": {
    "CLUSTER": "CLUSTER",
    "GLOBAL_SEARCH": "GLOBAL_SEARCH",
    "NOTIFICATION": "NOTIFICATION",
    "SETTINGS": "SETTINGS",
    "USER": "USER",
  },
  "DefaultDetailsViewSection": {
    "BACK_LINK": "BACK_LINK",
    "CHILDREN": "CHILDREN",
    "ERROR": "ERROR",
    "EVENTS": "EVENTS",
    "LOADING": "LOADING",
    "MAIN_HEADER": "MAIN_HEADER",
    "METADATA": "METADATA",
  },
  "DefaultHeadlampEvents": {
    "CREATE_RESOURCE": "headlamp.create-resource",
    "DELETE_RESOURCE": "headlamp.delete-resource",
    "DELETE_RESOURCES": "headlamp.delete-resources",
    "DETAILS_VIEW": "headlamp.details-view",
    "EDIT_RESOURCE": "headlamp.edit-resource",
    "ERROR_BOUNDARY": "headlamp.error-boundary",
    "LIST_VIEW": "headlamp.list-view",
    "LOGS": "headlamp.logs",
    "OBJECT_EVENTS": "headlamp.object-events",
    "PLUGINS_LOADED": "headlamp.plugins-loaded",
    "PLUGIN_LOADING_ERROR": "headlamp.plugin-loading-error",
    "POD_ATTACH": "headlamp.pod-attach",
    "RESTART_RESOURCE": "headlamp.restart-resource",
    "SCALE_RESOURCE": "headlamp.scale-resource",
    "TERMINAL": "headlamp.terminal",
  },
  "DetailsViewDefaultHeaderActions": {
    "DELETE": "DELETE",
    "EDIT": "EDIT",
    "NODE_DRAIN": "NODE_DRAIN",
    "NODE_TOGGLE_CORDON": "NODE_TOGGLE_CORDON",
    "POD_ATTACH": "POD_ATTACH",
    "POD_LOGS": "POD_LOGS",
    "POD_TERMINAL": "POD_TERMINAL",
    "RESTART": "RESTART",
    "SCALE": "SCALE",
    "VIEW": "VIEW",
  },
  "Headlamp": [Function],
  "Iconify": {
    "Icon": {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
    "InlineIcon": {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
    "_api": {
      "getAPIConfig": [Function],
      "getFetch": [Function],
      "listAPIProviders": [Function],
      "mergeParams": [Function],
      "sendAPIQuery": [Function],
      "setAPIModule": [Function],
      "setFetch": [Function],
    },
    "addAPIProvider": [Function],
    "addCollection": [Function],
    "addIcon": [Function],
    "buildIcon": [Function],
    "calculateSize": [Function],
    "disableCache": [Function],
    "enableCache": [Function],
    "getIcon": [Function],
    "iconExists": [Function],
    "listIcons": [Function],
    "loadIcon": [Function],
    "loadIcons": [Function],
    "replaceIDs": [Function],
    "shareStorage": [Function],
  },
  "K8s": {
    "ResourceClasses": {
      "ClusterRole": [Function],
      "ClusterRoleBinding": [Function],
      "ConfigMap": [Function],
      "CronJob": [Function],
      "CustomResourceDefinition": [Function],
      "DaemonSet": [Function],
      "Deployment": [Function],
      "Endpoint": [Function],
      "Endpoints": [Function],
      "GRPCRoute": [Function],
      "Gateway": [Function],
      "GatewayClass": [Function],
      "HTTPRoute": [Function],
      "HorizontalPodAutoscaler": [Function],
      "Ingress": [Function],
      "IngressClass": [Function],
      "Job": [Function],
      "Lease": [Function],
      "LimitRange": [Function],
      "Namespace": [Function],
      "NetworkPolicy": [Function],
      "Node": [Function],
      "PersistentVolume": [Function],
      "PersistentVolumeClaim": [Function],
      "Pod": [Function],
      "PodDisruptionBudget": [Function],
      "PriorityClass": [Function],
      "ReplicaSet": [Function],
      "ResourceQuota": [Function],
      "Role": [Function],
      "RoleBinding": [Function],
      "RuntimeClass": [Function],
      "Secret": [Function],
      "Service": [Function],
      "ServiceAccount": [Function],
      "StatefulSet": [Function],
      "StorageClass": [Function],
    },
    "cluster": {
      "HEADLAMP_ALLOWED_NAMESPACES": "headlamp.allowed-namespaces",
      "KubeObject": [Function],
      "getAllowedNamespaces": [Function],
      "makeKubeObject": [Function],
    },
    "clusterRole": {
      "default": [Function],
    },
    "clusterRoleBinding": {
      "default": [Function],
    },
    "configMap": {
      "default": [Function],
    },
    "crd": {
      "default": [Function],
      "makeCustomResourceClass": [Function],
    },
    "cronJob": {
      "default": [Function],
    },
    "daemonSet": {
      "default": [Function],
    },
    "deployment": {
      "default": [Function],
    },
    "event": {
      "default": [Function],
    },
    "getVersion": [Function],
    "ingress": {
      "default": [Function],
    },
    "ingressClass": {
      "default": [Function],
    },
    "job": {
      "default": [Function],
    },
    "labelSelectorToQuery": [Function],
    "matchExpressionSimplifier": [Function],
    "matchLabelsSimplifier": [Function],
    "namespace": {
      "default": [Function],
    },
    "node": {
      "default": [Function],
    },
    "persistentVolume": {
      "default": [Function],
    },
    "persistentVolumeClaim": {
      "default": [Function],
    },
    "pod": {
      "default": [Function],
    },
    "replicaSet": {
      "default": [Function],
    },
    "role": {
      "default": [Function],
    },
    "roleBinding": {
      "default": [Function],
    },
    "secret": {
      "default": [Function],
    },
    "service": {
      "default": [Function],
    },
    "serviceAccount": {
      "default": [Function],
    },
    "statefulSet": {
      "default": [Function],
    },
    "storageClass": {
      "default": [Function],
    },
    "useCluster": [Function],
    "useClusterGroup": [Function],
    "useClustersConf": [Function],
    "useClustersVersion": [Function],
    "useConnectApi": [Function],
  },
  "Lodash": Function {
    "default": [Function],
  },
  "MonacoEditor": {
    "CancellationTokenSource": [Function],
    "Emitter": [Function],
    "KeyCode": {
      "-1": "DependsOnKbLayout",
      "0": "Unknown",
      "1": "Backspace",
      "10": "Space",
      "100": "Numpad2",
      "101": "Numpad3",
      "102": "Numpad4",
      "103": "Numpad5",
      "104": "Numpad6",
      "105": "Numpad7",
      "106": "Numpad8",
      "107": "Numpad9",
      "108": "NumpadMultiply",
      "109": "NumpadAdd",
      "11": "PageUp",
      "110": "NUMPAD_SEPARATOR",
      "111": "NumpadSubtract",
      "112": "NumpadDecimal",
      "113": "NumpadDivide",
      "114": "KEY_IN_COMPOSITION",
      "115": "ABNT_C1",
      "116": "ABNT_C2",
      "117": "AudioVolumeMute",
      "118": "AudioVolumeUp",
      "119": "AudioVolumeDown",
      "12": "PageDown",
      "120": "BrowserSearch",
      "121": "BrowserHome",
      "122": "BrowserBack",
      "123": "BrowserForward",
      "124": "MediaTrackNext",
      "125": "MediaTrackPrevious",
      "126": "MediaStop",
      "127": "MediaPlayPause",
      "128": "LaunchMediaPlayer",
      "129": "LaunchMail",
      "13": "End",
      "130": "LaunchApp2",
      "131": "Clear",
      "132": "MAX_VALUE",
      "14": "Home",
      "15": "LeftArrow",
      "16": "UpArrow",
      "17": "RightArrow",
      "18": "DownArrow",
      "19": "Insert",
      "2": "Tab",
      "20": "Delete",
      "21": "Digit0",
      "22": "Digit1",
      "23": "Digit2",
      "24": "Digit3",
      "25": "Digit4",
      "26": "Digit5",
      "27": "Digit6",
      "28": "Digit7",
      "29": "Digit8",
      "3": "Enter",
      "30": "Digit9",
      "31": "KeyA",
      "32": "KeyB",
      "33": "KeyC",
      "34": "KeyD",
      "35": "KeyE",
      "36": "KeyF",
      "37": "KeyG",
      "38": "KeyH",
      "39": "KeyI",
      "4": "Shift",
      "40": "KeyJ",
      "41": "KeyK",
      "42": "KeyL",
      "43": "KeyM",
      "44": "KeyN",
      "45": "KeyO",
      "46": "KeyP",
      "47": "KeyQ",
      "48": "KeyR",
      "49": "KeyS",
      "5": "Ctrl",
      "50": "KeyT",
      "51": "KeyU",
      "52": "KeyV",
      "53": "KeyW",
      "54": "KeyX",
      "55": "KeyY",
      "56": "KeyZ",
      "57": "Meta",
      "58": "ContextMenu",
      "59": "F1",
      "6": "Alt",
      "60": "F2",
      "61": "F3",
      "62": "F4",
      "63": "F5",
      "64": "F6",
      "65": "F7",
      "66": "F8",
      "67": "F9",
      "68": "F10",
      "69": "F11",
      "7": "PauseBreak",
      "70": "F12",
      "71": "F13",
      "72": "F14",
      "73": "F15",
      "74": "F16",
      "75": "F17",
      "76": "F18",
      "77": "F19",
      "78": "F20",
      "79": "F21",
      "8": "CapsLock",
      "80": "F22",
      "81": "F23",
      "82": "F24",
      "83": "NumLock",
      "84": "ScrollLock",
      "85": "Semicolon",
      "86": "Equal",
      "87": "Comma",
      "88": "Minus",
      "89": "Period",
      "9": "Escape",
      "90": "Slash",
      "91": "Backquote",
      "92": "BracketLeft",
      "93": "Backslash",
      "94": "BracketRight",
      "95": "Quote",
      "96": "OEM_8",
      "97": "IntlBackslash",
      "98": "Numpad0",
      "99": "Numpad1",
      "ABNT_C1": 115,
      "ABNT_C2": 116,
      "Alt": 6,
      "AudioVolumeDown": 119,
      "AudioVolumeMute": 117,
      "AudioVolumeUp": 118,
      "Backquote": 91,
      "Backslash": 93,
      "Backspace": 1,
      "BracketLeft": 92,
      "BracketRight": 94,
      "BrowserBack": 122,
      "BrowserForward": 123,
      "BrowserHome": 121,
      "BrowserSearch": 120,
      "CapsLock": 8,
      "Clear": 131,
      "Comma": 87,
      "ContextMenu": 58,
      "Ctrl": 5,
      "Delete": 20,
      "DependsOnKbLayout": -1,
      "Digit0": 21,
      "Digit1": 22,
      "Digit2": 23,
      "Digit3": 24,
      "Digit4": 25,
      "Digit5": 26,
      "Digit6": 27,
      "Digit7": 28,
      "Digit8": 29,
      "Digit9": 30,
      "DownArrow": 18,
      "End": 13,
      "Enter": 3,
      "Equal": 86,
      "Escape": 9,
      "F1": 59,
      "F10": 68,
      "F11": 69,
      "F12": 70,
      "F13": 71,
      "F14": 72,
      "F15": 73,
      "F16": 74,
      "F17": 75,
      "F18": 76,
      "F19": 77,
      "F2": 60,
      "F20": 78,
      "F21": 79,
      "F22": 80,
      "F23": 81,
      "F24": 82,
      "F3": 61,
      "F4": 62,
      "F5": 63,
      "F6": 64,
      "F7": 65,
      "F8": 66,
      "F9": 67,
      "Home": 14,
      "Insert": 19,
      "IntlBackslash": 97,
      "KEY_IN_COMPOSITION": 114,
      "KeyA": 31,
      "KeyB": 32,
      "KeyC": 33,
      "KeyD": 34,
      "KeyE": 35,
      "KeyF": 36,
      "KeyG": 37,
      "KeyH": 38,
      "KeyI": 39,
      "KeyJ": 40,
      "KeyK": 41,
      "KeyL": 42,
      "KeyM": 43,
      "KeyN": 44,
      "KeyO": 45,
      "KeyP": 46,
      "KeyQ": 47,
      "KeyR": 48,
      "KeyS": 49,
      "KeyT": 50,
      "KeyU": 51,
      "KeyV": 52,
      "KeyW": 53,
      "KeyX": 54,
      "KeyY": 55,
      "KeyZ": 56,
      "LaunchApp2": 130,
      "LaunchMail": 129,
      "LaunchMediaPlayer": 128,
      "LeftArrow": 15,
      "MAX_VALUE": 132,
      "MediaPlayPause": 127,
      "MediaStop": 126,
      "MediaTrackNext": 124,
      "MediaTrackPrevious": 125,
      "Meta": 57,
      "Minus": 88,
      "NUMPAD_SEPARATOR": 110,
      "NumLock": 83,
      "Numpad0": 98,
      "Numpad1": 99,
      "Numpad2": 100,
      "Numpad3": 101,
      "Numpad4": 102,
      "Numpad5": 103,
      "Numpad6": 104,
      "Numpad7": 105,
      "Numpad8": 106,
      "Numpad9": 107,
      "NumpadAdd": 109,
      "NumpadDecimal": 112,
      "NumpadDivide": 113,
      "NumpadMultiply": 108,
      "NumpadSubtract": 111,
      "OEM_8": 96,
      "PageDown": 12,
      "PageUp": 11,
      "PauseBreak": 7,
      "Period": 89,
      "Quote": 95,
      "RightArrow": 17,
      "ScrollLock": 84,
      "Semicolon": 85,
      "Shift": 4,
      "Slash": 90,
      "Space": 10,
      "Tab": 2,
      "Unknown": 0,
      "UpArrow": 16,
    },
    "KeyMod": [Function],
    "MarkerSeverity": {
      "1": "Hint",
      "2": "Info",
      "4": "Warning",
      "8": "Error",
      "Error": 8,
      "Hint": 1,
      "Info": 2,
      "Warning": 4,
    },
    "MarkerTag": {
      "1": "Unnecessary",
      "2": "Deprecated",
      "Deprecated": 2,
      "Unnecessary": 1,
    },
    "Position": [Function],
    "Range": [Function],
    "Selection": [Function],
    "SelectionDirection": {
      "0": "LTR",
      "1": "RTL",
      "LTR": 0,
      "RTL": 1,
    },
    "Token": [Function],
    "Uri": [Function],
    "editor": {
      "AccessibilitySupport": {
        "0": "Unknown",
        "1": "Disabled",
        "2": "Enabled",
        "Disabled": 1,
        "Enabled": 2,
        "Unknown": 0,
      },
      "ApplyUpdateResult": [Function],
      "BareFontInfo": [Function],
      "ConfigurationChangedEvent": [Function],
      "ContentWidgetPositionPreference": {
        "0": "EXACT",
        "1": "ABOVE",
        "2": "BELOW",
        "ABOVE": 1,
        "BELOW": 2,
        "EXACT": 0,
      },
      "CursorChangeReason": {
        "0": "NotSet",
        "1": "ContentFlush",
        "2": "RecoverFromMarkers",
        "3": "Explicit",
        "4": "Paste",
        "5": "Undo",
        "6": "Redo",
        "ContentFlush": 1,
        "Explicit": 3,
        "NotSet": 0,
        "Paste": 4,
        "RecoverFromMarkers": 2,
        "Redo": 6,
        "Undo": 5,
      },
      "DefaultEndOfLine": {
        "1": "LF",
        "2": "CRLF",
        "CRLF": 2,
        "LF": 1,
      },
      "EditorAutoIndentStrategy": {
        "0": "None",
        "1": "Keep",
        "2": "Brackets",
        "3": "Advanced",
        "4": "Full",
        "Advanced": 3,
        "Brackets": 2,
        "Full": 4,
        "Keep": 1,
        "None": 0,
      },
      "EditorOption": {
        "0": "acceptSuggestionOnCommitCharacter",
        "1": "acceptSuggestionOnEnter",
        "10": "autoClosingOvertype",
        "100": "renderWhitespace",
        "101": "revealHorizontalRightPadding",
        "102": "roundedSelection",
        "103": "rulers",
        "104": "scrollbar",
        "105": "scrollBeyondLastColumn",
        "106": "scrollBeyondLastLine",
        "107": "scrollPredominantAxis",
        "108": "selectionClipboard",
        "109": "selectionHighlight",
        "11": "autoClosingQuotes",
        "110": "selectOnLineNumbers",
        "111": "showFoldingControls",
        "112": "showUnused",
        "113": "snippetSuggestions",
        "114": "smartSelect",
        "115": "smoothScrolling",
        "116": "stickyScroll",
        "117": "stickyTabStops",
        "118": "stopRenderingLineAfter",
        "119": "suggest",
        "12": "autoIndent",
        "120": "suggestFontSize",
        "121": "suggestLineHeight",
        "122": "suggestOnTriggerCharacters",
        "123": "suggestSelection",
        "124": "tabCompletion",
        "125": "tabIndex",
        "126": "unicodeHighlighting",
        "127": "unusualLineTerminators",
        "128": "useShadowDOM",
        "129": "useTabStops",
        "13": "automaticLayout",
        "130": "wordBreak",
        "131": "wordSegmenterLocales",
        "132": "wordSeparators",
        "133": "wordWrap",
        "134": "wordWrapBreakAfterCharacters",
        "135": "wordWrapBreakBeforeCharacters",
        "136": "wordWrapColumn",
        "137": "wordWrapOverride1",
        "138": "wordWrapOverride2",
        "139": "wrappingIndent",
        "14": "autoSurround",
        "140": "wrappingStrategy",
        "141": "showDeprecated",
        "142": "inlayHints",
        "143": "editorClassName",
        "144": "pixelRatio",
        "145": "tabFocusMode",
        "146": "layoutInfo",
        "147": "wrappingInfo",
        "148": "defaultColorDecorators",
        "149": "colorDecoratorsActivatedOn",
        "15": "bracketPairColorization",
        "150": "inlineCompletionsAccessibilityVerbose",
        "16": "guides",
        "17": "codeLens",
        "18": "codeLensFontFamily",
        "19": "codeLensFontSize",
        "2": "accessibilitySupport",
        "20": "colorDecorators",
        "21": "colorDecoratorsLimit",
        "22": "columnSelection",
        "23": "comments",
        "24": "contextmenu",
        "25": "copyWithSyntaxHighlighting",
        "26": "cursorBlinking",
        "27": "cursorSmoothCaretAnimation",
        "28": "cursorStyle",
        "29": "cursorSurroundingLines",
        "3": "accessibilityPageSize",
        "30": "cursorSurroundingLinesStyle",
        "31": "cursorWidth",
        "32": "disableLayerHinting",
        "33": "disableMonospaceOptimizations",
        "34": "domReadOnly",
        "35": "dragAndDrop",
        "36": "dropIntoEditor",
        "37": "emptySelectionClipboard",
        "38": "experimentalWhitespaceRendering",
        "39": "extraEditorClassName",
        "4": "ariaLabel",
        "40": "fastScrollSensitivity",
        "41": "find",
        "42": "fixedOverflowWidgets",
        "43": "folding",
        "44": "foldingStrategy",
        "45": "foldingHighlight",
        "46": "foldingImportsByDefault",
        "47": "foldingMaximumRegions",
        "48": "unfoldOnClickAfterEndOfLine",
        "49": "fontFamily",
        "5": "ariaRequired",
        "50": "fontInfo",
        "51": "fontLigatures",
        "52": "fontSize",
        "53": "fontWeight",
        "54": "fontVariations",
        "55": "formatOnPaste",
        "56": "formatOnType",
        "57": "glyphMargin",
        "58": "gotoLocation",
        "59": "hideCursorInOverviewRuler",
        "6": "autoClosingBrackets",
        "60": "hover",
        "61": "inDiffEditor",
        "62": "inlineSuggest",
        "63": "inlineEdit",
        "64": "letterSpacing",
        "65": "lightbulb",
        "66": "lineDecorationsWidth",
        "67": "lineHeight",
        "68": "lineNumbers",
        "69": "lineNumbersMinChars",
        "7": "autoClosingComments",
        "70": "linkedEditing",
        "71": "links",
        "72": "matchBrackets",
        "73": "minimap",
        "74": "mouseStyle",
        "75": "mouseWheelScrollSensitivity",
        "76": "mouseWheelZoom",
        "77": "multiCursorMergeOverlapping",
        "78": "multiCursorModifier",
        "79": "multiCursorPaste",
        "8": "screenReaderAnnounceInlineSuggestion",
        "80": "multiCursorLimit",
        "81": "occurrencesHighlight",
        "82": "overviewRulerBorder",
        "83": "overviewRulerLanes",
        "84": "padding",
        "85": "pasteAs",
        "86": "parameterHints",
        "87": "peekWidgetDefaultFocus",
        "88": "placeholder",
        "89": "definitionLinkOpensInPeek",
        "9": "autoClosingDelete",
        "90": "quickSuggestions",
        "91": "quickSuggestionsDelay",
        "92": "readOnly",
        "93": "readOnlyMessage",
        "94": "renameOnType",
        "95": "renderControlCharacters",
        "96": "renderFinalNewline",
        "97": "renderLineHighlight",
        "98": "renderLineHighlightOnlyWhenFocus",
        "99": "renderValidationDecorations",
        "acceptSuggestionOnCommitCharacter": 0,
        "acceptSuggestionOnEnter": 1,
        "accessibilityPageSize": 3,
        "accessibilitySupport": 2,
        "ariaLabel": 4,
        "ariaRequired": 5,
        "autoClosingBrackets": 6,
        "autoClosingComments": 7,
        "autoClosingDelete": 9,
        "autoClosingOvertype": 10,
        "autoClosingQuotes": 11,
        "autoIndent": 12,
        "autoSurround": 14,
        "automaticLayout": 13,
        "bracketPairColorization": 15,
        "codeLens": 17,
        "codeLensFontFamily": 18,
        "codeLensFontSize": 19,
        "colorDecorators": 20,
        "colorDecoratorsActivatedOn": 149,
        "colorDecoratorsLimit": 21,
        "columnSelection": 22,
        "comments": 23,
        "contextmenu": 24,
        "copyWithSyntaxHighlighting": 25,
        "cursorBlinking": 26,
        "cursorSmoothCaretAnimation": 27,
        "cursorStyle": 28,
        "cursorSurroundingLines": 29,
        "cursorSurroundingLinesStyle": 30,
        "cursorWidth": 31,
        "defaultColorDecorators": 148,
        "definitionLinkOpensInPeek": 89,
        "disableLayerHinting": 32,
        "disableMonospaceOptimizations": 33,
        "domReadOnly": 34,
        "dragAndDrop": 35,
        "dropIntoEditor": 36,
        "editorClassName": 143,
        "emptySelectionClipboard": 37,
        "experimentalWhitespaceRendering": 38,
        "extraEditorClassName": 39,
        "fastScrollSensitivity": 40,
        "find": 41,
        "fixedOverflowWidgets": 42,
        "folding": 43,
        "foldingHighlight": 45,
        "foldingImportsByDefault": 46,
        "foldingMaximumRegions": 47,
        "foldingStrategy": 44,
        "fontFamily": 49,
        "fontInfo": 50,
        "fontLigatures": 51,
        "fontSize": 52,
        "fontVariations": 54,
        "fontWeight": 53,
        "formatOnPaste": 55,
        "formatOnType": 56,
        "glyphMargin": 57,
        "gotoLocation": 58,
        "guides": 16,
        "hideCursorInOverviewRuler": 59,
        "hover": 60,
        "inDiffEditor": 61,
        "inlayHints": 142,
        "inlineCompletionsAccessibilityVerbose": 150,
        "inlineEdit": 63,
        "inlineSuggest": 62,
        "layoutInfo": 146,
        "letterSpacing": 64,
        "lightbulb": 65,
        "lineDecorationsWidth": 66,
        "lineHeight": 67,
        "lineNumbers": 68,
        "lineNumbersMinChars": 69,
        "linkedEditing": 70,
        "links": 71,
        "matchBrackets": 72,
        "minimap": 73,
        "mouseStyle": 74,
        "mouseWheelScrollSensitivity": 75,
        "mouseWheelZoom": 76,
        "multiCursorLimit": 80,
        "multiCursorMergeOverlapping": 77,
        "multiCursorModifier": 78,
        "multiCursorPaste": 79,
        "occurrencesHighlight": 81,
        "overviewRulerBorder": 82,
        "overviewRulerLanes": 83,
        "padding": 84,
        "parameterHints": 86,
        "pasteAs": 85,
        "peekWidgetDefaultFocus": 87,
        "pixelRatio": 144,
        "placeholder": 88,
        "quickSuggestions": 90,
        "quickSuggestionsDelay": 91,
        "readOnly": 92,
        "readOnlyMessage": 93,
        "renameOnType": 94,
        "renderControlCharacters": 95,
        "renderFinalNewline": 96,
        "renderLineHighlight": 97,
        "renderLineHighlightOnlyWhenFocus": 98,
        "renderValidationDecorations": 99,
        "renderWhitespace": 100,
        "revealHorizontalRightPadding": 101,
        "roundedSelection": 102,
        "rulers": 103,
        "screenReaderAnnounceInlineSuggestion": 8,
        "scrollBeyondLastColumn": 105,
        "scrollBeyondLastLine": 106,
        "scrollPredominantAxis": 107,
        "scrollbar": 104,
        "selectOnLineNumbers": 110,
        "selectionClipboard": 108,
        "selectionHighlight": 109,
        "showDeprecated": 141,
        "showFoldingControls": 111,
        "showUnused": 112,
        "smartSelect": 114,
        "smoothScrolling": 115,
        "snippetSuggestions": 113,
        "stickyScroll": 116,
        "stickyTabStops": 117,
        "stopRenderingLineAfter": 118,
        "suggest": 119,
        "suggestFontSize": 120,
        "suggestLineHeight": 121,
        "suggestOnTriggerCharacters": 122,
        "suggestSelection": 123,
        "tabCompletion": 124,
        "tabFocusMode": 145,
        "tabIndex": 125,
        "unfoldOnClickAfterEndOfLine": 48,
        "unicodeHighlighting": 126,
        "unusualLineTerminators": 127,
        "useShadowDOM": 128,
        "useTabStops": 129,
        "wordBreak": 130,
        "wordSegmenterLocales": 131,
        "wordSeparators": 132,
        "wordWrap": 133,
        "wordWrapBreakAfterCharacters": 134,
        "wordWrapBreakBeforeCharacters": 135,
        "wordWrapColumn": 136,
        "wordWrapOverride1": 137,
        "wordWrapOverride2": 138,
        "wrappingIndent": 139,
        "wrappingInfo": 147,
        "wrappingStrategy": 140,
      },
      "EditorOptions": {
        "acceptSuggestionOnCommitCharacter": EditorBooleanOption {
          "defaultValue": true,
          "id": 0,
          "name": "acceptSuggestionOnCommitCharacter",
          "schema": {
            "default": true,
            "defaultDefaultValue": true,
            "defaultValueSource": undefined,
            "markdownDescription": "Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "boolean",
          },
        },
        "acceptSuggestionOnEnter": EditorStringEnumOption {
          "_allowedValues": [
            "on",
            "smart",
            "off",
          ],
          "defaultValue": "on",
          "id": 1,
          "name": "acceptSuggestionOnEnter",
          "schema": {
            "default": "on",
            "defaultDefaultValue": "on",
            "defaultValueSource": undefined,
            "enum": [
              "on",
              "smart",
              "off",
            ],
            "markdownDescription": "Controls whether suggestions should be accepted on `Enter`, in addition to `Tab`. Helps to avoid ambiguity between inserting new lines or accepting suggestions.",
            "markdownEnumDescriptions": [
              "",
              "Only accept a suggestion with `Enter` when it makes a textual change.",
              "",
            ],
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "string",
          },
        },
        "accessibilityPageSize": EditorIntOption {
          "defaultValue": 10,
          "id": 3,
          "maximum": 1073741824,
          "minimum": 1,
          "name": "accessibilityPageSize",
          "schema": {
            "default": 10,
            "defaultDefaultValue": 10,
            "defaultValueSource": undefined,
            "description": "Controls the number of lines in the editor that can be read out by a screen reader at once. When we detect a screen reader we automatically set the default to be 500. Warning: this has a performance implication for numbers larger than the default.",
            "maximum": 1073741824,
            "minimum": 1,
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "tags": [
              "accessibility",
            ],
            "type": "integer",
          },
        },
        "accessibilitySupport": EditorAccessibilitySupport {
          "defaultValue": 0,
          "id": 2,
          "name": "accessibilitySupport",
          "schema": {
            "default": "auto",
            "defaultDefaultValue": "auto",
            "defaultValueSource": undefined,
            "description": "Controls if the UI should run in a mode where it is optimized for screen readers.",
            "enum": [
              "auto",
              "on",
              "off",
            ],
            "enumDescriptions": [
              "Use platform APIs to detect when a Screen Reader is attached.",
              "Optimize for usage with a Screen Reader.",
              "Assume a screen reader is not attached.",
            ],
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "tags": [
              "accessibility",
            ],
            "type": "string",
          },
        },
        "ariaLabel": EditorStringOption {
          "defaultValue": "Editor content",
          "id": 4,
          "name": "ariaLabel",
          "schema": undefined,
        },
        "ariaRequired": EditorBooleanOption {
          "defaultValue": false,
          "id": 5,
          "name": "ariaRequired",
          "schema": undefined,
        },
        "autoClosingBrackets": EditorStringEnumOption {
          "_allowedValues": [
            "always",
            "languageDefined",
            "beforeWhitespace",
            "never",
          ],
          "defaultValue": "languageDefined",
          "id": 6,
          "name": "autoClosingBrackets",
          "schema": {
            "default": "languageDefined",
            "defaultDefaultValue": "languageDefined",
            "defaultValueSource": undefined,
            "description": "Controls whether the editor should automatically close brackets after the user adds an opening bracket.",
            "enum": [
              "always",
              "languageDefined",
              "beforeWhitespace",
              "never",
            ],
            "enumDescriptions": [
              "",
              "Use language configurations to determine when to autoclose brackets.",
              "Autoclose brackets only when the cursor is to the left of whitespace.",
              "",
            ],
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "string",
          },
        },
        "autoClosingComments": EditorStringEnumOption {
          "_allowedValues": [
            "always",
            "languageDefined",
            "beforeWhitespace",
            "never",
          ],
          "defaultValue": "languageDefined",
          "id": 7,
          "name": "autoClosingComments",
          "schema": {
            "default": "languageDefined",
            "defaultDefaultValue": "languageDefined",
            "defaultValueSource": undefined,
            "description": "Controls whether the editor should automatically close comments after the user adds an opening comment.",
            "enum": [
              "always",
              "languageDefined",
              "beforeWhitespace",
              "never",
            ],
            "enumDescriptions": [
              "",
              "Use language configurations to determine when to autoclose comments.",
              "Autoclose comments only when the cursor is to the left of whitespace.",
              "",
            ],
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "string",
          },
        },
        "autoClosingDelete": EditorStringEnumOption {
          "_allowedValues": [
            "always",
            "auto",
            "never",
          ],
          "defaultValue": "auto",
          "id": 9,
          "name": "autoClosingDelete",
          "schema": {
            "default": "auto",
            "defaultDefaultValue": "auto",
            "defaultValueSource": undefined,
            "description": "Controls whether the editor should remove adjacent closing quotes or brackets when deleting.",
            "enum": [
              "always",
              "auto",
              "never",
            ],
            "enumDescriptions": [
              "",
              "Remove adjacent closing quotes or brackets only if they were automatically inserted.",
              "",
            ],
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "string",
          },
        },
        "autoClosingOvertype": EditorStringEnumOption {
          "_allowedValues": [
            "always",
            "auto",
            "never",
          ],
          "defaultValue": "auto",
          "id": 10,
          "name": "autoClosingOvertype",
          "schema": {
            "default": "auto",
            "defaultDefaultValue": "auto",
            "defaultValueSource": undefined,
            "description": "Controls whether the editor should type over closing quotes or brackets.",
            "enum": [
              "always",
              "auto",
              "never",
            ],
            "enumDescriptions": [
              "",
              "Type over closing quotes or brackets only if they were automatically inserted.",
              "",
            ],
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "string",
          },
        },
        "autoClosingQuotes": EditorStringEnumOption {
          "_allowedValues": [
            "always",
            "languageDefined",
            "beforeWhitespace",
            "never",
          ],
          "defaultValue": "languageDefined",
          "id": 11,
          "name": "autoClosingQuotes",
          "schema": {
            "default": "languageDefined",
            "defaultDefaultValue": "languageDefined",
            "defaultValueSource": undefined,
            "description": "Controls whether the editor should automatically close quotes after the user adds an opening quote.",
            "enum": [
              "always",
              "languageDefined",
              "beforeWhitespace",
              "never",
            ],
            "enumDescriptions": [
              "",
              "Use language configurations to determine when to autoclose quotes.",
              "Autoclose quotes only when the cursor is to the left of whitespace.",
              "",
            ],
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "string",
          },
        },
        "autoIndent": EditorEnumOption {
          "_allowedValues": [
            "none",
            "keep",
            "brackets",
            "advanced",
            "full",
          ],
          "_convert": [Function],
          "defaultValue": 3,
          "id": 12,
          "name": "autoIndent",
          "schema": {
            "default": "full",
            "defaultDefaultValue": "full",
            "defaultValueSource": undefined,
            "description": "Controls whether the editor should automatically adjust the indentation when users type, paste, move or indent lines.",
            "enum": [
              "none",
              "keep",
              "brackets",
              "advanced",
              "full",
            ],
            "enumDescriptions": [
              "The editor will not insert indentation automatically.",
              "The editor will keep the current line's indentation.",
              "The editor will keep the current line's indentation and honor language defined brackets.",
              "The editor will keep the current line's indentation, honor language defined brackets and invoke special onEnterRules defined by languages.",
              "The editor will keep the current line's indentation, honor language defined brackets, invoke special onEnterRules defined by languages, and honor indentationRules defined by languages.",
            ],
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "string",
          },
        },
        "autoSurround": EditorStringEnumOption {
          "_allowedValues": [
            "languageDefined",
            "quotes",
            "brackets",
            "never",
          ],
          "defaultValue": "languageDefined",
          "id": 14,
          "name": "autoSurround",
          "schema": {
            "default": "languageDefined",
            "defaultDefaultValue": "languageDefined",
            "defaultValueSource": undefined,
            "description": "Controls whether the editor should automatically surround selections when typing quotes or brackets.",
            "enum": [
              "languageDefined",
              "quotes",
              "brackets",
              "never",
            ],
            "enumDescriptions": [
              "Use language configurations to determine when to automatically surround selections.",
              "Surround with quotes but not brackets.",
              "Surround with brackets but not quotes.",
              "",
            ],
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "string",
          },
        },
        "automaticLayout": EditorBooleanOption {
          "defaultValue": false,
          "id": 13,
          "name": "automaticLayout",
          "schema": undefined,
        },
        "bracketPairColorization": BracketPairColorization {
          "defaultValue": {
            "enabled": true,
            "independentColorPoolPerBracketType": false,
          },
          "id": 15,
          "name": "bracketPairColorization",
          "schema": {
            "editor.bracketPairColorization.enabled": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "markdownDescription": "Controls whether bracket pair colorization is enabled or not. Use `#workbench.colorCustomizations#` to override the bracket highlight colors.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.bracketPairColorization.independentColorPoolPerBracketType": {
              "default": false,
              "defaultDefaultValue": false,
              "defaultValueSource": undefined,
              "description": "Controls whether each bracket type has its own independent color pool.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
          },
        },
        "bracketPairGuides": GuideOptions {
          "defaultValue": {
            "bracketPairs": false,
            "bracketPairsHorizontal": "active",
            "highlightActiveBracketPair": true,
            "highlightActiveIndentation": true,
            "indentation": true,
          },
          "id": 16,
          "name": "guides",
          "schema": {
            "editor.guides.bracketPairs": {
              "default": false,
              "defaultDefaultValue": false,
              "defaultValueSource": undefined,
              "description": "Controls whether bracket pair guides are enabled or not.",
              "enum": [
                true,
                "active",
                false,
              ],
              "enumDescriptions": [
                "Enables bracket pair guides.",
                "Enables bracket pair guides only for the active bracket pair.",
                "Disables bracket pair guides.",
              ],
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": [
                "boolean",
                "string",
              ],
            },
            "editor.guides.bracketPairsHorizontal": {
              "default": "active",
              "defaultDefaultValue": "active",
              "defaultValueSource": undefined,
              "description": "Controls whether horizontal bracket pair guides are enabled or not.",
              "enum": [
                true,
                "active",
                false,
              ],
              "enumDescriptions": [
                "Enables horizontal guides as addition to vertical bracket pair guides.",
                "Enables horizontal guides only for the active bracket pair.",
                "Disables horizontal bracket pair guides.",
              ],
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": [
                "boolean",
                "string",
              ],
            },
            "editor.guides.highlightActiveBracketPair": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "description": "Controls whether the editor should highlight the active bracket pair.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.guides.highlightActiveIndentation": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "description": "Controls whether the editor should highlight the active indent guide.",
              "enum": [
                true,
                "always",
                false,
              ],
              "enumDescriptions": [
                "Highlights the active indent guide.",
                "Highlights the active indent guide even if bracket guides are highlighted.",
                "Do not highlight the active indent guide.",
              ],
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": [
                "boolean",
                "string",
              ],
            },
            "editor.guides.indentation": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "description": "Controls whether the editor should render indent guides.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
          },
        },
        "codeLens": EditorBooleanOption {
          "defaultValue": true,
          "id": 17,
          "name": "codeLens",
          "schema": {
            "default": true,
            "defaultDefaultValue": true,
            "defaultValueSource": undefined,
            "description": "Controls whether the editor shows CodeLens.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "boolean",
          },
        },
        "codeLensFontFamily": EditorStringOption {
          "defaultValue": "",
          "id": 18,
          "name": "codeLensFontFamily",
          "schema": {
            "default": "",
            "defaultDefaultValue": "",
            "defaultValueSource": undefined,
            "description": "Controls the font family for CodeLens.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "string",
          },
        },
        "codeLensFontSize": EditorIntOption {
          "defaultValue": 0,
          "id": 19,
          "maximum": 100,
          "minimum": 0,
          "name": "codeLensFontSize",
          "schema": {
            "default": 0,
            "defaultDefaultValue": 0,
            "defaultValueSource": undefined,
            "markdownDescription": "Controls the font size in pixels for CodeLens. When set to 0, 90% of `#editor.fontSize#` is used.",
            "maximum": 100,
            "minimum": 0,
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "integer",
          },
        },
        "colorDecoratorActivatedOn": EditorStringEnumOption {
          "_allowedValues": [
            "clickAndHover",
            "hover",
            "click",
          ],
          "defaultValue": "clickAndHover",
          "id": 149,
          "name": "colorDecoratorsActivatedOn",
          "schema": {
            "default": "clickAndHover",
            "defaultDefaultValue": "clickAndHover",
            "defaultValueSource": undefined,
            "description": "Controls the condition to make a color picker appear from a color decorator",
            "enum": [
              "clickAndHover",
              "hover",
              "click",
            ],
            "enumDescriptions": [
              "Make the color picker appear both on click and hover of the color decorator",
              "Make the color picker appear on hover of the color decorator",
              "Make the color picker appear on click of the color decorator",
            ],
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "string",
          },
        },
        "colorDecorators": EditorBooleanOption {
          "defaultValue": true,
          "id": 20,
          "name": "colorDecorators",
          "schema": {
            "default": true,
            "defaultDefaultValue": true,
            "defaultValueSource": undefined,
            "description": "Controls whether the editor should render the inline color decorators and color picker.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "boolean",
          },
        },
        "colorDecoratorsLimit": EditorIntOption {
          "defaultValue": 500,
          "id": 21,
          "maximum": 1000000,
          "minimum": 1,
          "name": "colorDecoratorsLimit",
          "schema": {
            "default": 500,
            "defaultDefaultValue": 500,
            "defaultValueSource": undefined,
            "markdownDescription": "Controls the max number of color decorators that can be rendered in an editor at once.",
            "maximum": 1000000,
            "minimum": 1,
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "integer",
          },
        },
        "columnSelection": EditorBooleanOption {
          "defaultValue": false,
          "id": 22,
          "name": "columnSelection",
          "schema": {
            "default": false,
            "defaultDefaultValue": false,
            "defaultValueSource": undefined,
            "description": "Enable that the selection with the mouse and keys is doing column selection.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "boolean",
          },
        },
        "comments": EditorComments {
          "defaultValue": {
            "ignoreEmptyLines": true,
            "insertSpace": true,
          },
          "id": 23,
          "name": "comments",
          "schema": {
            "editor.comments.ignoreEmptyLines": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "description": "Controls if empty lines should be ignored with toggle, add or remove actions for line comments.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.comments.insertSpace": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "description": "Controls whether a space character is inserted when commenting.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
          },
        },
        "contextmenu": EditorBooleanOption {
          "defaultValue": true,
          "id": 24,
          "name": "contextmenu",
          "schema": undefined,
        },
        "copyWithSyntaxHighlighting": EditorBooleanOption {
          "defaultValue": true,
          "id": 25,
          "name": "copyWithSyntaxHighlighting",
          "schema": {
            "default": true,
            "defaultDefaultValue": true,
            "defaultValueSource": undefined,
            "description": "Controls whether syntax highlighting should be copied into the clipboard.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "boolean",
          },
        },
        "cursorBlinking": EditorEnumOption {
          "_allowedValues": [
            "blink",
            "smooth",
            "phase",
            "expand",
            "solid",
          ],
          "_convert": [Function],
          "defaultValue": 1,
          "id": 26,
          "name": "cursorBlinking",
          "schema": {
            "default": "blink",
            "defaultDefaultValue": "blink",
            "defaultValueSource": undefined,
            "description": "Control the cursor animation style.",
            "enum": [
              "blink",
              "smooth",
              "phase",
              "expand",
              "solid",
            ],
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "string",
          },
        },
        "cursorSmoothCaretAnimation": EditorStringEnumOption {
          "_allowedValues": [
            "off",
            "explicit",
            "on",
          ],
          "defaultValue": "off",
          "id": 27,
          "name": "cursorSmoothCaretAnimation",
          "schema": {
            "default": "off",
            "defaultDefaultValue": "off",
            "defaultValueSource": undefined,
            "description": "Controls whether the smooth caret animation should be enabled.",
            "enum": [
              "off",
              "explicit",
              "on",
            ],
            "enumDescriptions": [
              "Smooth caret animation is disabled.",
              "Smooth caret animation is enabled only when the user moves the cursor with an explicit gesture.",
              "Smooth caret animation is always enabled.",
            ],
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "string",
          },
        },
        "cursorStyle": EditorEnumOption {
          "_allowedValues": [
            "line",
            "block",
            "underline",
            "line-thin",
            "block-outline",
            "underline-thin",
          ],
          "_convert": [Function],
          "defaultValue": 1,
          "id": 28,
          "name": "cursorStyle",
          "schema": {
            "default": "line",
            "defaultDefaultValue": "line",
            "defaultValueSource": undefined,
            "description": "Controls the cursor style.",
            "enum": [
              "line",
              "block",
              "underline",
              "line-thin",
              "block-outline",
              "underline-thin",
            ],
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "string",
          },
        },
        "cursorSurroundingLines": EditorIntOption {
          "defaultValue": 0,
          "id": 29,
          "maximum": 1073741824,
          "minimum": 0,
          "name": "cursorSurroundingLines",
          "schema": {
            "default": 0,
            "defaultDefaultValue": 0,
            "defaultValueSource": undefined,
            "description": "Controls the minimal number of visible leading lines (minimum 0) and trailing lines (minimum 1) surrounding the cursor. Known as 'scrollOff' or 'scrollOffset' in some other editors.",
            "maximum": 1073741824,
            "minimum": 0,
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "integer",
          },
        },
        "cursorSurroundingLinesStyle": EditorStringEnumOption {
          "_allowedValues": [
            "default",
            "all",
          ],
          "defaultValue": "default",
          "id": 30,
          "name": "cursorSurroundingLinesStyle",
          "schema": {
            "default": "default",
            "defaultDefaultValue": "default",
            "defaultValueSource": undefined,
            "enum": [
              "default",
              "all",
            ],
            "enumDescriptions": [
              "`cursorSurroundingLines` is enforced only when triggered via the keyboard or API.",
              "`cursorSurroundingLines` is enforced always.",
            ],
            "markdownDescription": "Controls when `#editor.cursorSurroundingLines#` should be enforced.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "string",
          },
        },
        "cursorWidth": EditorIntOption {
          "defaultValue": 0,
          "id": 31,
          "maximum": 1073741824,
          "minimum": 0,
          "name": "cursorWidth",
          "schema": {
            "default": 0,
            "defaultDefaultValue": 0,
            "defaultValueSource": undefined,
            "markdownDescription": "Controls the width of the cursor when `#editor.cursorStyle#` is set to `line`.",
            "maximum": 1073741824,
            "minimum": 0,
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "integer",
          },
        },
        "defaultColorDecorators": EditorBooleanOption {
          "defaultValue": false,
          "id": 148,
          "name": "defaultColorDecorators",
          "schema": {
            "default": false,
            "defaultDefaultValue": false,
            "defaultValueSource": undefined,
            "markdownDescription": "Controls whether inline color decorations should be shown using the default document color provider",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "boolean",
          },
        },
        "definitionLinkOpensInPeek": EditorBooleanOption {
          "defaultValue": false,
          "id": 89,
          "name": "definitionLinkOpensInPeek",
          "schema": {
            "default": false,
            "defaultDefaultValue": false,
            "defaultValueSource": undefined,
            "description": "Controls whether the Go to Definition mouse gesture always opens the peek widget.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "boolean",
          },
        },
        "disableLayerHinting": EditorBooleanOption {
          "defaultValue": false,
          "id": 32,
          "name": "disableLayerHinting",
          "schema": undefined,
        },
        "disableMonospaceOptimizations": EditorBooleanOption {
          "defaultValue": false,
          "id": 33,
          "name": "disableMonospaceOptimizations",
          "schema": undefined,
        },
        "domReadOnly": EditorBooleanOption {
          "defaultValue": false,
          "id": 34,
          "name": "domReadOnly",
          "schema": undefined,
        },
        "dragAndDrop": EditorBooleanOption {
          "defaultValue": true,
          "id": 35,
          "name": "dragAndDrop",
          "schema": {
            "default": true,
            "defaultDefaultValue": true,
            "defaultValueSource": undefined,
            "description": "Controls whether the editor should allow moving selections via drag and drop.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "boolean",
          },
        },
        "dropIntoEditor": EditorDropIntoEditor {
          "defaultValue": {
            "enabled": true,
            "showDropSelector": "afterDrop",
          },
          "id": 36,
          "name": "dropIntoEditor",
          "schema": {
            "editor.dropIntoEditor.enabled": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "markdownDescription": "Controls whether you can drag and drop a file into a text editor by holding down the `Shift` key (instead of opening the file in an editor).",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.dropIntoEditor.showDropSelector": {
              "default": "afterDrop",
              "defaultDefaultValue": "afterDrop",
              "defaultValueSource": undefined,
              "enum": [
                "afterDrop",
                "never",
              ],
              "enumDescriptions": [
                "Show the drop selector widget after a file is dropped into the editor.",
                "Never show the drop selector widget. Instead the default drop provider is always used.",
              ],
              "markdownDescription": "Controls if a widget is shown when dropping files into the editor. This widget lets you control how the file is dropped.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "string",
            },
          },
        },
        "editorClassName": EditorClassName {
          "defaultValue": undefined,
          "id": 143,
          "name": "_never_",
          "schema": undefined,
        },
        "emptySelectionClipboard": EditorEmptySelectionClipboard {
          "defaultValue": true,
          "id": 37,
          "name": "emptySelectionClipboard",
          "schema": {
            "default": true,
            "defaultDefaultValue": true,
            "defaultValueSource": undefined,
            "description": "Controls whether copying without a selection copies the current line.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "boolean",
          },
        },
        "experimentalWhitespaceRendering": EditorStringEnumOption {
          "_allowedValues": [
            "svg",
            "font",
            "off",
          ],
          "defaultValue": "svg",
          "id": 38,
          "name": "experimentalWhitespaceRendering",
          "schema": {
            "default": "svg",
            "defaultDefaultValue": "svg",
            "defaultValueSource": undefined,
            "description": "Controls whether whitespace is rendered with a new, experimental method.",
            "enum": [
              "svg",
              "font",
              "off",
            ],
            "enumDescriptions": [
              "Use a new rendering method with svgs.",
              "Use a new rendering method with font characters.",
              "Use the stable rendering method.",
            ],
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "string",
          },
        },
        "extraEditorClassName": EditorStringOption {
          "defaultValue": "",
          "id": 39,
          "name": "extraEditorClassName",
          "schema": undefined,
        },
        "fastScrollSensitivity": EditorFloatOption {
          "defaultValue": 5,
          "id": 40,
          "name": "fastScrollSensitivity",
          "schema": {
            "default": 5,
            "defaultDefaultValue": 5,
            "defaultValueSource": undefined,
            "markdownDescription": "Scrolling speed multiplier when pressing `Alt`.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "number",
          },
          "validationFn": [Function],
        },
        "find": EditorFind {
          "defaultValue": {
            "addExtraSpaceOnTop": true,
            "autoFindInSelection": "never",
            "cursorMoveOnType": true,
            "globalFindClipboard": false,
            "loop": true,
            "seedSearchStringFromSelection": "always",
          },
          "id": 41,
          "name": "find",
          "schema": {
            "editor.find.addExtraSpaceOnTop": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "description": "Controls whether the Find Widget should add extra lines on top of the editor. When true, you can scroll beyond the first line when the Find Widget is visible.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.find.autoFindInSelection": {
              "default": "never",
              "defaultDefaultValue": "never",
              "defaultValueSource": undefined,
              "description": "Controls the condition for turning on Find in Selection automatically.",
              "enum": [
                "never",
                "always",
                "multiline",
              ],
              "enumDescriptions": [
                "Never turn on Find in Selection automatically (default).",
                "Always turn on Find in Selection automatically.",
                "Turn on Find in Selection automatically when multiple lines of content are selected.",
              ],
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "string",
            },
            "editor.find.cursorMoveOnType": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "description": "Controls whether the cursor should jump to find matches while typing.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.find.globalFindClipboard": {
              "default": false,
              "defaultDefaultValue": false,
              "defaultValueSource": undefined,
              "description": "Controls whether the Find Widget should read or modify the shared find clipboard on macOS.",
              "included": false,
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.find.loop": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "description": "Controls whether the search automatically restarts from the beginning (or the end) when no further matches can be found.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.find.seedSearchStringFromSelection": {
              "default": "always",
              "defaultDefaultValue": "always",
              "defaultValueSource": undefined,
              "description": "Controls whether the search string in the Find Widget is seeded from the editor selection.",
              "enum": [
                "never",
                "always",
                "selection",
              ],
              "enumDescriptions": [
                "Never seed search string from the editor selection.",
                "Always seed search string from the editor selection, including word at cursor position.",
                "Only seed search string from the editor selection.",
              ],
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "string",
            },
          },
        },
        "fixedOverflowWidgets": EditorBooleanOption {
          "defaultValue": false,
          "id": 42,
          "name": "fixedOverflowWidgets",
          "schema": undefined,
        },
        "folding": EditorBooleanOption {
          "defaultValue": true,
          "id": 43,
          "name": "folding",
          "schema": {
            "default": true,
            "defaultDefaultValue": true,
            "defaultValueSource": undefined,
            "description": "Controls whether the editor has code folding enabled.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "boolean",
          },
        },
        "foldingHighlight": EditorBooleanOption {
          "defaultValue": true,
          "id": 45,
          "name": "foldingHighlight",
          "schema": {
            "default": true,
            "defaultDefaultValue": true,
            "defaultValueSource": undefined,
            "description": "Controls whether the editor should highlight folded ranges.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "boolean",
          },
        },
        "foldingImportsByDefault": EditorBooleanOption {
          "defaultValue": false,
          "id": 46,
          "name": "foldingImportsByDefault",
          "schema": {
            "default": false,
            "defaultDefaultValue": false,
            "defaultValueSource": undefined,
            "description": "Controls whether the editor automatically collapses import ranges.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "boolean",
          },
        },
        "foldingMaximumRegions": EditorIntOption {
          "defaultValue": 5000,
          "id": 47,
          "maximum": 65000,
          "minimum": 10,
          "name": "foldingMaximumRegions",
          "schema": {
            "default": 5000,
            "defaultDefaultValue": 5000,
            "defaultValueSource": undefined,
            "description": "The maximum number of foldable regions. Increasing this value may result in the editor becoming less responsive when the current source has a large number of foldable regions.",
            "maximum": 65000,
            "minimum": 10,
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "integer",
          },
        },
        "foldingStrategy": EditorStringEnumOption {
          "_allowedValues": [
            "auto",
            "indentation",
          ],
          "defaultValue": "auto",
          "id": 44,
          "name": "foldingStrategy",
          "schema": {
            "default": "auto",
            "defaultDefaultValue": "auto",
            "defaultValueSource": undefined,
            "description": "Controls the strategy for computing folding ranges.",
            "enum": [
              "auto",
              "indentation",
            ],
            "enumDescriptions": [
              "Use a language-specific folding strategy if available, else the indentation-based one.",
              "Use the indentation-based folding strategy.",
            ],
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "string",
          },
        },
        "fontFamily": EditorStringOption {
          "defaultValue": "'Droid Sans Mono', 'monospace', monospace",
          "id": 49,
          "name": "fontFamily",
          "schema": {
            "default": "'Droid Sans Mono', 'monospace', monospace",
            "defaultDefaultValue": "'Droid Sans Mono', 'monospace', monospace",
            "defaultValueSource": undefined,
            "description": "Controls the font family.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "string",
          },
        },
        "fontInfo": EditorFontInfo {
          "defaultValue": undefined,
          "id": 50,
          "name": "_never_",
          "schema": undefined,
        },
        "fontLigatures2": EditorFontLigatures {
          "defaultValue": ""liga" off, "calt" off",
          "id": 51,
          "name": "fontLigatures",
          "schema": {
            "anyOf": [
              {
                "description": "Enables/Disables font ligatures ('calt' and 'liga' font features). Change this to a string for fine-grained control of the 'font-feature-settings' CSS property.",
                "type": "boolean",
              },
              {
                "description": "Explicit 'font-feature-settings' CSS property. A boolean can be passed instead if one only needs to turn on/off ligatures.",
                "type": "string",
              },
            ],
            "default": false,
            "defaultDefaultValue": false,
            "defaultValueSource": undefined,
            "description": "Configures font ligatures or font features. Can be either a boolean to enable/disable ligatures or a string for the value of the CSS 'font-feature-settings' property.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
          },
        },
        "fontSize": EditorFontSize {
          "defaultValue": 14,
          "id": 52,
          "name": "fontSize",
          "schema": {
            "default": 14,
            "defaultDefaultValue": 14,
            "defaultValueSource": undefined,
            "description": "Controls the font size in pixels.",
            "maximum": 100,
            "minimum": 6,
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "number",
          },
        },
        "fontVariations": EditorFontVariations {
          "defaultValue": "normal",
          "id": 54,
          "name": "fontVariations",
          "schema": {
            "anyOf": [
              {
                "description": "Enables/Disables the translation from font-weight to font-variation-settings. Change this to a string for fine-grained control of the 'font-variation-settings' CSS property.",
                "type": "boolean",
              },
              {
                "description": "Explicit 'font-variation-settings' CSS property. A boolean can be passed instead if one only needs to translate font-weight to font-variation-settings.",
                "type": "string",
              },
            ],
            "default": false,
            "defaultDefaultValue": false,
            "defaultValueSource": undefined,
            "description": "Configures font variations. Can be either a boolean to enable/disable the translation from font-weight to font-variation-settings or a string for the value of the CSS 'font-variation-settings' property.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
          },
        },
        "fontWeight": EditorFontWeight {
          "defaultValue": "normal",
          "id": 53,
          "name": "fontWeight",
          "schema": {
            "anyOf": [
              {
                "errorMessage": "Only "normal" and "bold" keywords or numbers between 1 and 1000 are allowed.",
                "maximum": 1000,
                "minimum": 1,
                "type": "number",
              },
              {
                "pattern": "^(normal|bold|1000|[1-9][0-9]{0,2})$",
                "type": "string",
              },
              {
                "enum": [
                  "normal",
                  "bold",
                  "100",
                  "200",
                  "300",
                  "400",
                  "500",
                  "600",
                  "700",
                  "800",
                  "900",
                ],
              },
            ],
            "default": "normal",
            "defaultDefaultValue": "normal",
            "defaultValueSource": undefined,
            "description": "Controls the font weight. Accepts "normal" and "bold" keywords or numbers between 1 and 1000.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
          },
        },
        "formatOnPaste": EditorBooleanOption {
          "defaultValue": false,
          "id": 55,
          "name": "formatOnPaste",
          "schema": {
            "default": false,
            "defaultDefaultValue": false,
            "defaultValueSource": undefined,
            "description": "Controls whether the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "boolean",
          },
        },
        "formatOnType": EditorBooleanOption {
          "defaultValue": false,
          "id": 56,
          "name": "formatOnType",
          "schema": {
            "default": false,
            "defaultDefaultValue": false,
            "defaultValueSource": undefined,
            "description": "Controls whether the editor should automatically format the line after typing.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "boolean",
          },
        },
        "glyphMargin": EditorBooleanOption {
          "defaultValue": false,
          "id": 57,
          "name": "glyphMargin",
          "schema": {
            "default": true,
            "defaultDefaultValue": true,
            "defaultValueSource": undefined,
            "description": "Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "boolean",
          },
        },
        "gotoLocation": EditorGoToLocation {
          "defaultValue": {
            "alternativeDeclarationCommand": "editor.action.goToReferences",
            "alternativeDefinitionCommand": "editor.action.goToReferences",
            "alternativeImplementationCommand": "",
            "alternativeReferenceCommand": "",
            "alternativeTestsCommand": "",
            "alternativeTypeDefinitionCommand": "editor.action.goToReferences",
            "multiple": "peek",
            "multipleDeclarations": "peek",
            "multipleDefinitions": "peek",
            "multipleImplementations": "peek",
            "multipleReferences": "peek",
            "multipleTests": "peek",
            "multipleTypeDefinitions": "peek",
          },
          "id": 58,
          "name": "gotoLocation",
          "schema": {
            "editor.gotoLocation.alternativeDeclarationCommand": {
              "default": "editor.action.goToReferences",
              "defaultDefaultValue": "editor.action.goToReferences",
              "defaultValueSource": undefined,
              "description": "Alternative command id that is being executed when the result of 'Go to Declaration' is the current location.",
              "enum": [
                "",
                "editor.action.referenceSearch.trigger",
                "editor.action.goToReferences",
                "editor.action.peekImplementation",
                "editor.action.goToImplementation",
                "editor.action.peekTypeDefinition",
                "editor.action.goToTypeDefinition",
                "editor.action.peekDeclaration",
                "editor.action.revealDeclaration",
                "editor.action.peekDefinition",
                "editor.action.revealDefinitionAside",
                "editor.action.revealDefinition",
              ],
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "string",
            },
            "editor.gotoLocation.alternativeDefinitionCommand": {
              "default": "editor.action.goToReferences",
              "defaultDefaultValue": "editor.action.goToReferences",
              "defaultValueSource": undefined,
              "description": "Alternative command id that is being executed when the result of 'Go to Definition' is the current location.",
              "enum": [
                "",
                "editor.action.referenceSearch.trigger",
                "editor.action.goToReferences",
                "editor.action.peekImplementation",
                "editor.action.goToImplementation",
                "editor.action.peekTypeDefinition",
                "editor.action.goToTypeDefinition",
                "editor.action.peekDeclaration",
                "editor.action.revealDeclaration",
                "editor.action.peekDefinition",
                "editor.action.revealDefinitionAside",
                "editor.action.revealDefinition",
              ],
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "string",
            },
            "editor.gotoLocation.alternativeImplementationCommand": {
              "default": "",
              "defaultDefaultValue": "",
              "defaultValueSource": undefined,
              "description": "Alternative command id that is being executed when the result of 'Go to Implementation' is the current location.",
              "enum": [
                "",
                "editor.action.referenceSearch.trigger",
                "editor.action.goToReferences",
                "editor.action.peekImplementation",
                "editor.action.goToImplementation",
                "editor.action.peekTypeDefinition",
                "editor.action.goToTypeDefinition",
                "editor.action.peekDeclaration",
                "editor.action.revealDeclaration",
                "editor.action.peekDefinition",
                "editor.action.revealDefinitionAside",
                "editor.action.revealDefinition",
              ],
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "string",
            },
            "editor.gotoLocation.alternativeReferenceCommand": {
              "default": "",
              "defaultDefaultValue": "",
              "defaultValueSource": undefined,
              "description": "Alternative command id that is being executed when the result of 'Go to Reference' is the current location.",
              "enum": [
                "",
                "editor.action.referenceSearch.trigger",
                "editor.action.goToReferences",
                "editor.action.peekImplementation",
                "editor.action.goToImplementation",
                "editor.action.peekTypeDefinition",
                "editor.action.goToTypeDefinition",
                "editor.action.peekDeclaration",
                "editor.action.revealDeclaration",
                "editor.action.peekDefinition",
                "editor.action.revealDefinitionAside",
                "editor.action.revealDefinition",
              ],
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "string",
            },
            "editor.gotoLocation.alternativeTypeDefinitionCommand": {
              "default": "editor.action.goToReferences",
              "defaultDefaultValue": "editor.action.goToReferences",
              "defaultValueSource": undefined,
              "description": "Alternative command id that is being executed when the result of 'Go to Type Definition' is the current location.",
              "enum": [
                "",
                "editor.action.referenceSearch.trigger",
                "editor.action.goToReferences",
                "editor.action.peekImplementation",
                "editor.action.goToImplementation",
                "editor.action.peekTypeDefinition",
                "editor.action.goToTypeDefinition",
                "editor.action.peekDeclaration",
                "editor.action.revealDeclaration",
                "editor.action.peekDefinition",
                "editor.action.revealDefinitionAside",
                "editor.action.revealDefinition",
              ],
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "string",
            },
            "editor.gotoLocation.multiple": {
              "default": null,
              "defaultDefaultValue": undefined,
              "defaultValueSource": undefined,
              "deprecationMessage": "This setting is deprecated, please use separate settings like 'editor.editor.gotoLocation.multipleDefinitions' or 'editor.editor.gotoLocation.multipleImplementations' instead.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
            },
            "editor.gotoLocation.multipleDeclarations": {
              "default": "peek",
              "defaultDefaultValue": "peek",
              "defaultValueSource": undefined,
              "description": "Controls the behavior the 'Go to Declaration'-command when multiple target locations exist.",
              "enum": [
                "peek",
                "gotoAndPeek",
                "goto",
              ],
              "enumDescriptions": [
                "Show Peek view of the results (default)",
                "Go to the primary result and show a Peek view",
                "Go to the primary result and enable Peek-less navigation to others",
              ],
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "string",
            },
            "editor.gotoLocation.multipleDefinitions": {
              "default": "peek",
              "defaultDefaultValue": "peek",
              "defaultValueSource": undefined,
              "description": "Controls the behavior the 'Go to Definition'-command when multiple target locations exist.",
              "enum": [
                "peek",
                "gotoAndPeek",
                "goto",
              ],
              "enumDescriptions": [
                "Show Peek view of the results (default)",
                "Go to the primary result and show a Peek view",
                "Go to the primary result and enable Peek-less navigation to others",
              ],
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "string",
            },
            "editor.gotoLocation.multipleImplementations": {
              "default": "peek",
              "defaultDefaultValue": "peek",
              "defaultValueSource": undefined,
              "description": "Controls the behavior the 'Go to Implementations'-command when multiple target locations exist.",
              "enum": [
                "peek",
                "gotoAndPeek",
                "goto",
              ],
              "enumDescriptions": [
                "Show Peek view of the results (default)",
                "Go to the primary result and show a Peek view",
                "Go to the primary result and enable Peek-less navigation to others",
              ],
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "string",
            },
            "editor.gotoLocation.multipleReferences": {
              "default": "peek",
              "defaultDefaultValue": "peek",
              "defaultValueSource": undefined,
              "description": "Controls the behavior the 'Go to References'-command when multiple target locations exist.",
              "enum": [
                "peek",
                "gotoAndPeek",
                "goto",
              ],
              "enumDescriptions": [
                "Show Peek view of the results (default)",
                "Go to the primary result and show a Peek view",
                "Go to the primary result and enable Peek-less navigation to others",
              ],
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "string",
            },
            "editor.gotoLocation.multipleTypeDefinitions": {
              "default": "peek",
              "defaultDefaultValue": "peek",
              "defaultValueSource": undefined,
              "description": "Controls the behavior the 'Go to Type Definition'-command when multiple target locations exist.",
              "enum": [
                "peek",
                "gotoAndPeek",
                "goto",
              ],
              "enumDescriptions": [
                "Show Peek view of the results (default)",
                "Go to the primary result and show a Peek view",
                "Go to the primary result and enable Peek-less navigation to others",
              ],
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "string",
            },
          },
        },
        "hideCursorInOverviewRuler": EditorBooleanOption {
          "defaultValue": false,
          "id": 59,
          "name": "hideCursorInOverviewRuler",
          "schema": {
            "default": false,
            "defaultDefaultValue": false,
            "defaultValueSource": undefined,
            "description": "Controls whether the cursor should be hidden in the overview ruler.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "boolean",
          },
        },
        "hover": EditorHover {
          "defaultValue": {
            "above": true,
            "delay": 300,
            "enabled": true,
            "hidingDelay": 300,
            "sticky": true,
          },
          "id": 60,
          "name": "hover",
          "schema": {
            "editor.hover.above": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "description": "Prefer showing hovers above the line, if there's space.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.hover.delay": {
              "default": 300,
              "defaultDefaultValue": 300,
              "defaultValueSource": undefined,
              "description": "Controls the delay in milliseconds after which the hover is shown.",
              "maximum": 10000,
              "minimum": 0,
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "number",
            },
            "editor.hover.enabled": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "description": "Controls whether the hover is shown.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.hover.hidingDelay": {
              "default": 300,
              "defaultDefaultValue": 300,
              "defaultValueSource": undefined,
              "description": "Controls the delay in milliseconds after which the hover is hidden. Requires `editor.hover.sticky` to be enabled.",
              "minimum": 0,
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "integer",
            },
            "editor.hover.sticky": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "description": "Controls whether the hover should remain visible when mouse is moved over it.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
          },
        },
        "inDiffEditor": EditorBooleanOption {
          "defaultValue": false,
          "id": 61,
          "name": "inDiffEditor",
          "schema": undefined,
        },
        "inlayHints": EditorInlayHints {
          "defaultValue": {
            "enabled": "on",
            "fontFamily": "",
            "fontSize": 0,
            "padding": false,
          },
          "id": 142,
          "name": "inlayHints",
          "schema": {
            "editor.inlayHints.enabled": {
              "default": "on",
              "defaultDefaultValue": "on",
              "defaultValueSource": undefined,
              "description": "Enables the inlay hints in the editor.",
              "enum": [
                "on",
                "onUnlessPressed",
                "offUnlessPressed",
                "off",
              ],
              "markdownEnumDescriptions": [
                "Inlay hints are enabled",
                "Inlay hints are showing by default and hide when holding Ctrl+Alt",
                "Inlay hints are hidden by default and show when holding Ctrl+Alt",
                "Inlay hints are disabled",
              ],
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "string",
            },
            "editor.inlayHints.fontFamily": {
              "default": "",
              "defaultDefaultValue": "",
              "defaultValueSource": undefined,
              "markdownDescription": "Controls font family of inlay hints in the editor. When set to empty, the `#editor.fontFamily#` is used.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "string",
            },
            "editor.inlayHints.fontSize": {
              "default": 0,
              "defaultDefaultValue": 0,
              "defaultValueSource": undefined,
              "markdownDescription": "Controls font size of inlay hints in the editor. As default the `#editor.fontSize#` is used when the configured value is less than `5` or greater than the editor font size.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "number",
            },
            "editor.inlayHints.padding": {
              "default": false,
              "defaultDefaultValue": false,
              "defaultValueSource": undefined,
              "description": "Enables the padding around the inlay hints in the editor.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
          },
        },
        "inlineCompletionsAccessibilityVerbose": EditorBooleanOption {
          "defaultValue": false,
          "id": 150,
          "name": "inlineCompletionsAccessibilityVerbose",
          "schema": {
            "default": false,
            "defaultDefaultValue": false,
            "defaultValueSource": undefined,
            "description": "Controls whether the accessibility hint should be provided to screen reader users when an inline completion is shown.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "boolean",
          },
        },
        "inlineEdit": InlineEditorEdit {
          "defaultValue": {
            "enabled": false,
            "fontFamily": "default",
            "keepOnBlur": false,
            "showToolbar": "onHover",
          },
          "id": 63,
          "name": "experimentalInlineEdit",
          "schema": {
            "editor.experimentalInlineEdit.enabled": {
              "default": false,
              "defaultDefaultValue": false,
              "defaultValueSource": undefined,
              "description": "Controls whether to show inline edits in the editor.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.experimentalInlineEdit.fontFamily": {
              "default": "default",
              "defaultDefaultValue": "default",
              "defaultValueSource": undefined,
              "description": "Controls the font family of the inline edit.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "string",
            },
            "editor.experimentalInlineEdit.showToolbar": {
              "default": "onHover",
              "defaultDefaultValue": "onHover",
              "defaultValueSource": undefined,
              "description": "Controls when to show the inline edit toolbar.",
              "enum": [
                "always",
                "onHover",
                "never",
              ],
              "enumDescriptions": [
                "Show the inline edit toolbar whenever an inline suggestion is shown.",
                "Show the inline edit toolbar when hovering over an inline suggestion.",
                "Never show the inline edit toolbar.",
              ],
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "string",
            },
          },
        },
        "inlineSuggest": InlineEditorSuggest {
          "defaultValue": {
            "enabled": true,
            "fontFamily": "default",
            "keepOnBlur": false,
            "mode": "subwordSmart",
            "showToolbar": "onHover",
            "suppressSuggestions": false,
          },
          "id": 62,
          "name": "inlineSuggest",
          "schema": {
            "editor.inlineSuggest.enabled": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "description": "Controls whether to automatically show inline suggestions in the editor.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.inlineSuggest.fontFamily": {
              "default": "default",
              "defaultDefaultValue": "default",
              "defaultValueSource": undefined,
              "description": "Controls the font family of the inline suggestions.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "string",
            },
            "editor.inlineSuggest.showToolbar": {
              "default": "onHover",
              "defaultDefaultValue": "onHover",
              "defaultValueSource": undefined,
              "description": "Controls when to show the inline suggestion toolbar.",
              "enum": [
                "always",
                "onHover",
                "never",
              ],
              "enumDescriptions": [
                "Show the inline suggestion toolbar whenever an inline suggestion is shown.",
                "Show the inline suggestion toolbar when hovering over an inline suggestion.",
                "Never show the inline suggestion toolbar.",
              ],
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "string",
            },
            "editor.inlineSuggest.suppressSuggestions": {
              "default": false,
              "defaultDefaultValue": false,
              "defaultValueSource": undefined,
              "description": "Controls how inline suggestions interact with the suggest widget. If enabled, the suggest widget is not shown automatically when inline suggestions are available.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
          },
        },
        "layoutInfo": EditorLayoutInfoComputer {
          "defaultValue": undefined,
          "id": 146,
          "name": "_never_",
          "schema": undefined,
        },
        "letterSpacing": EditorFloatOption {
          "defaultValue": 0,
          "id": 64,
          "name": "letterSpacing",
          "schema": {
            "default": 0,
            "defaultDefaultValue": 0,
            "defaultValueSource": undefined,
            "description": "Controls the letter spacing in pixels.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "number",
          },
          "validationFn": [Function],
        },
        "lightbulb": EditorLightbulb {
          "defaultValue": {
            "enabled": "onCode",
          },
          "id": 65,
          "name": "lightbulb",
          "schema": {
            "editor.lightbulb.enabled": {
              "default": "onCode",
              "defaultDefaultValue": "onCode",
              "defaultValueSource": undefined,
              "description": "Enables the Code Action lightbulb in the editor.",
              "enum": [
                "off",
                "onCode",
                "on",
              ],
              "enumDescriptions": [
                "Disable the code action menu.",
                "Show the code action menu when the cursor is on lines with code.",
                "Show the code action menu when the cursor is on lines with code or on empty lines.",
              ],
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "tags": [
                "experimental",
              ],
              "type": "string",
            },
          },
        },
        "lineDecorationsWidth": EditorLineDecorationsWidth {
          "defaultValue": 10,
          "id": 66,
          "name": "lineDecorationsWidth",
          "schema": undefined,
        },
        "lineHeight": EditorLineHeight {
          "defaultValue": 0,
          "id": 67,
          "name": "lineHeight",
          "schema": {
            "default": 0,
            "defaultDefaultValue": 0,
            "defaultValueSource": undefined,
            "markdownDescription": "Controls the line height. 
 - Use 0 to automatically compute the line height from the font size.
 - Values between 0 and 8 will be used as a multiplier with the font size.
 - Values greater than or equal to 8 will be used as effective values.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "number",
          },
          "validationFn": [Function],
        },
        "lineNumbers": EditorRenderLineNumbersOption {
          "defaultValue": {
            "renderFn": null,
            "renderType": 1,
          },
          "id": 68,
          "name": "lineNumbers",
          "schema": {
            "default": "on",
            "defaultDefaultValue": "on",
            "defaultValueSource": undefined,
            "description": "Controls the display of line numbers.",
            "enum": [
              "off",
              "on",
              "relative",
              "interval",
            ],
            "enumDescriptions": [
              "Line numbers are not rendered.",
              "Line numbers are rendered as absolute number.",
              "Line numbers are rendered as distance in lines to cursor position.",
              "Line numbers are rendered every 10 lines.",
            ],
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "string",
          },
        },
        "lineNumbersMinChars": EditorIntOption {
          "defaultValue": 5,
          "id": 69,
          "maximum": 300,
          "minimum": 1,
          "name": "lineNumbersMinChars",
          "schema": undefined,
        },
        "linkedEditing": EditorBooleanOption {
          "defaultValue": false,
          "id": 70,
          "name": "linkedEditing",
          "schema": {
            "default": false,
            "defaultDefaultValue": false,
            "defaultValueSource": undefined,
            "description": "Controls whether the editor has linked editing enabled. Depending on the language, related symbols such as HTML tags, are updated while editing.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "boolean",
          },
        },
        "links": EditorBooleanOption {
          "defaultValue": true,
          "id": 71,
          "name": "links",
          "schema": {
            "default": true,
            "defaultDefaultValue": true,
            "defaultValueSource": undefined,
            "description": "Controls whether the editor should detect links and make them clickable.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "boolean",
          },
        },
        "matchBrackets": EditorStringEnumOption {
          "_allowedValues": [
            "always",
            "near",
            "never",
          ],
          "defaultValue": "always",
          "id": 72,
          "name": "matchBrackets",
          "schema": {
            "default": "always",
            "defaultDefaultValue": "always",
            "defaultValueSource": undefined,
            "description": "Highlight matching brackets.",
            "enum": [
              "always",
              "near",
              "never",
            ],
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "string",
          },
        },
        "minimap": EditorMinimap {
          "defaultValue": {
            "autohide": false,
            "enabled": true,
            "maxColumn": 120,
            "renderCharacters": true,
            "scale": 1,
            "sectionHeaderFontSize": 9,
            "sectionHeaderLetterSpacing": 1,
            "showMarkSectionHeaders": true,
            "showRegionSectionHeaders": true,
            "showSlider": "mouseover",
            "side": "right",
            "size": "proportional",
          },
          "id": 73,
          "name": "minimap",
          "schema": {
            "editor.minimap.autohide": {
              "default": false,
              "defaultDefaultValue": false,
              "defaultValueSource": undefined,
              "description": "Controls whether the minimap is hidden automatically.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.minimap.enabled": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "description": "Controls whether the minimap is shown.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.minimap.maxColumn": {
              "default": 120,
              "defaultDefaultValue": 120,
              "defaultValueSource": undefined,
              "description": "Limit the width of the minimap to render at most a certain number of columns.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "number",
            },
            "editor.minimap.renderCharacters": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "description": "Render the actual characters on a line as opposed to color blocks.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.minimap.scale": {
              "default": 1,
              "defaultDefaultValue": 1,
              "defaultValueSource": undefined,
              "description": "Scale of content drawn in the minimap: 1, 2 or 3.",
              "enum": [
                1,
                2,
                3,
              ],
              "maximum": 3,
              "minimum": 1,
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "number",
            },
            "editor.minimap.sectionHeaderFontSize": {
              "default": 9,
              "defaultDefaultValue": 9,
              "defaultValueSource": undefined,
              "description": "Controls the font size of section headers in the minimap.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "number",
            },
            "editor.minimap.sectionHeaderLetterSpacing": {
              "default": 1,
              "defaultDefaultValue": 1,
              "defaultValueSource": undefined,
              "description": "Controls the amount of space (in pixels) between characters of section header. This helps the readability of the header in small font sizes.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "number",
            },
            "editor.minimap.showMarkSectionHeaders": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "description": "Controls whether MARK: comments are shown as section headers in the minimap.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.minimap.showRegionSectionHeaders": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "description": "Controls whether named regions are shown as section headers in the minimap.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.minimap.showSlider": {
              "default": "mouseover",
              "defaultDefaultValue": "mouseover",
              "defaultValueSource": undefined,
              "description": "Controls when the minimap slider is shown.",
              "enum": [
                "always",
                "mouseover",
              ],
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "string",
            },
            "editor.minimap.side": {
              "default": "right",
              "defaultDefaultValue": "right",
              "defaultValueSource": undefined,
              "description": "Controls the side where to render the minimap.",
              "enum": [
                "left",
                "right",
              ],
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "string",
            },
            "editor.minimap.size": {
              "default": "proportional",
              "defaultDefaultValue": "proportional",
              "defaultValueSource": undefined,
              "description": "Controls the size of the minimap.",
              "enum": [
                "proportional",
                "fill",
                "fit",
              ],
              "enumDescriptions": [
                "The minimap has the same size as the editor contents (and might scroll).",
                "The minimap will stretch or shrink as necessary to fill the height of the editor (no scrolling).",
                "The minimap will shrink as necessary to never be larger than the editor (no scrolling).",
              ],
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "string",
            },
          },
        },
        "mouseStyle": EditorStringEnumOption {
          "_allowedValues": [
            "text",
            "default",
            "copy",
          ],
          "defaultValue": "text",
          "id": 74,
          "name": "mouseStyle",
          "schema": undefined,
        },
        "mouseWheelScrollSensitivity": EditorFloatOption {
          "defaultValue": 1,
          "id": 75,
          "name": "mouseWheelScrollSensitivity",
          "schema": {
            "default": 1,
            "defaultDefaultValue": 1,
            "defaultValueSource": undefined,
            "markdownDescription": "A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "number",
          },
          "validationFn": [Function],
        },
        "mouseWheelZoom": EditorBooleanOption {
          "defaultValue": false,
          "id": 76,
          "name": "mouseWheelZoom",
          "schema": {
            "default": false,
            "defaultDefaultValue": false,
            "defaultValueSource": undefined,
            "markdownDescription": "Zoom the font of the editor when using mouse wheel and holding `Ctrl`.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "boolean",
          },
        },
        "multiCursorLimit": EditorIntOption {
          "defaultValue": 10000,
          "id": 80,
          "maximum": 100000,
          "minimum": 1,
          "name": "multiCursorLimit",
          "schema": {
            "default": 10000,
            "defaultDefaultValue": 10000,
            "defaultValueSource": undefined,
            "markdownDescription": "Controls the max number of cursors that can be in an active editor at once.",
            "maximum": 100000,
            "minimum": 1,
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "integer",
          },
        },
        "multiCursorMergeOverlapping": EditorBooleanOption {
          "defaultValue": true,
          "id": 77,
          "name": "multiCursorMergeOverlapping",
          "schema": {
            "default": true,
            "defaultDefaultValue": true,
            "defaultValueSource": undefined,
            "description": "Merge multiple cursors when they are overlapping.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "boolean",
          },
        },
        "multiCursorModifier": EditorEnumOption {
          "_allowedValues": [
            "ctrlCmd",
            "alt",
          ],
          "_convert": [Function],
          "defaultValue": "altKey",
          "id": 78,
          "name": "multiCursorModifier",
          "schema": {
            "default": "alt",
            "defaultDefaultValue": "alt",
            "defaultValueSource": undefined,
            "enum": [
              "ctrlCmd",
              "alt",
            ],
            "markdownDescription": "The modifier to be used to add multiple cursors with the mouse. The Go to Definition and Open Link mouse gestures will adapt such that they do not conflict with the [multicursor modifier](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier).",
            "markdownEnumDescriptions": [
              "Maps to `Control` on Windows and Linux and to `Command` on macOS.",
              "Maps to `Alt` on Windows and Linux and to `Option` on macOS.",
            ],
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "string",
          },
        },
        "multiCursorPaste": EditorStringEnumOption {
          "_allowedValues": [
            "spread",
            "full",
          ],
          "defaultValue": "spread",
          "id": 79,
          "name": "multiCursorPaste",
          "schema": {
            "default": "spread",
            "defaultDefaultValue": "spread",
            "defaultValueSource": undefined,
            "enum": [
              "spread",
              "full",
            ],
            "markdownDescription": "Controls pasting when the line count of the pasted text matches the cursor count.",
            "markdownEnumDescriptions": [
              "Each cursor pastes a single line of the text.",
              "Each cursor pastes the full text.",
            ],
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "string",
          },
        },
        "occurrencesHighlight": EditorStringEnumOption {
          "_allowedValues": [
            "off",
            "singleFile",
            "multiFile",
          ],
          "defaultValue": "singleFile",
          "id": 81,
          "name": "occurrencesHighlight",
          "schema": {
            "default": "singleFile",
            "defaultDefaultValue": "singleFile",
            "defaultValueSource": undefined,
            "enum": [
              "off",
              "singleFile",
              "multiFile",
            ],
            "markdownDescription": "Controls whether occurrences should be highlighted across open files.",
            "markdownEnumDescriptions": [
              "Does not highlight occurrences.",
              "Highlights occurrences only in the current file.",
              "Experimental: Highlights occurrences across all valid open files.",
            ],
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "string",
          },
        },
        "overviewRulerBorder": EditorBooleanOption {
          "defaultValue": true,
          "id": 82,
          "name": "overviewRulerBorder",
          "schema": {
            "default": true,
            "defaultDefaultValue": true,
            "defaultValueSource": undefined,
            "description": "Controls whether a border should be drawn around the overview ruler.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "boolean",
          },
        },
        "overviewRulerLanes": EditorIntOption {
          "defaultValue": 2,
          "id": 83,
          "maximum": 3,
          "minimum": 0,
          "name": "overviewRulerLanes",
          "schema": undefined,
        },
        "padding": EditorPadding {
          "defaultValue": {
            "bottom": 0,
            "top": 0,
          },
          "id": 84,
          "name": "padding",
          "schema": {
            "editor.padding.bottom": {
              "default": 0,
              "defaultDefaultValue": 0,
              "defaultValueSource": undefined,
              "description": "Controls the amount of space between the bottom edge of the editor and the last line.",
              "maximum": 1000,
              "minimum": 0,
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "number",
            },
            "editor.padding.top": {
              "default": 0,
              "defaultDefaultValue": 0,
              "defaultValueSource": undefined,
              "description": "Controls the amount of space between the top edge of the editor and the first line.",
              "maximum": 1000,
              "minimum": 0,
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "number",
            },
          },
        },
        "parameterHints": EditorParameterHints {
          "defaultValue": {
            "cycle": true,
            "enabled": true,
          },
          "id": 86,
          "name": "parameterHints",
          "schema": {
            "editor.parameterHints.cycle": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "description": "Controls whether the parameter hints menu cycles or closes when reaching the end of the list.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.parameterHints.enabled": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "description": "Enables a pop-up that shows parameter documentation and type information as you type.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
          },
        },
        "pasteAs": EditorPasteAs {
          "defaultValue": {
            "enabled": true,
            "showPasteSelector": "afterPaste",
          },
          "id": 85,
          "name": "pasteAs",
          "schema": {
            "editor.pasteAs.enabled": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "markdownDescription": "Controls whether you can paste content in different ways.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.pasteAs.showPasteSelector": {
              "default": "afterPaste",
              "defaultDefaultValue": "afterPaste",
              "defaultValueSource": undefined,
              "enum": [
                "afterPaste",
                "never",
              ],
              "enumDescriptions": [
                "Show the paste selector widget after content is pasted into the editor.",
                "Never show the paste selector widget. Instead the default pasting behavior is always used.",
              ],
              "markdownDescription": "Controls if a widget is shown when pasting content in to the editor. This widget lets you control how the file is pasted.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "string",
            },
          },
        },
        "peekWidgetDefaultFocus": EditorStringEnumOption {
          "_allowedValues": [
            "tree",
            "editor",
          ],
          "defaultValue": "tree",
          "id": 87,
          "name": "peekWidgetDefaultFocus",
          "schema": {
            "default": "tree",
            "defaultDefaultValue": "tree",
            "defaultValueSource": undefined,
            "description": "Controls whether to focus the inline editor or the tree in the peek widget.",
            "enum": [
              "tree",
              "editor",
            ],
            "enumDescriptions": [
              "Focus the tree when opening peek",
              "Focus the editor when opening peek",
            ],
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "string",
          },
        },
        "pixelRatio": EditorPixelRatio {
          "defaultValue": undefined,
          "id": 144,
          "name": "_never_",
          "schema": undefined,
        },
        "placeholder": PlaceholderOption {
          "defaultValue": undefined,
          "id": 88,
          "name": "placeholder",
          "schema": undefined,
        },
        "quickSuggestions": EditorQuickSuggestions {
          "defaultValue": {
            "comments": "off",
            "other": "on",
            "strings": "off",
          },
          "id": 90,
          "name": "quickSuggestions",
          "schema": {
            "additionalProperties": false,
            "default": {
              "comments": "off",
              "other": "on",
              "strings": "off",
            },
            "defaultDefaultValue": {
              "comments": "off",
              "other": "on",
              "strings": "off",
            },
            "defaultValueSource": undefined,
            "markdownDescription": "Controls whether suggestions should automatically show up while typing. This can be controlled for typing in comments, strings, and other code. Quick suggestion can be configured to show as ghost text or with the suggest widget. Also be aware of the `#editor.suggestOnTriggerCharacters#`-setting which controls if suggestions are triggered by special characters.",
            "properties": {
              "comments": {
                "anyOf": [
                  {
                    "type": "boolean",
                  },
                  {
                    "enum": [
                      "on",
                      "inline",
                      "off",
                    ],
                    "enumDescriptions": [
                      "Quick suggestions show inside the suggest widget",
                      "Quick suggestions show as ghost text",
                      "Quick suggestions are disabled",
                    ],
                    "type": "string",
                  },
                ],
                "default": "off",
                "description": "Enable quick suggestions inside comments.",
              },
              "other": {
                "anyOf": [
                  {
                    "type": "boolean",
                  },
                  {
                    "enum": [
                      "on",
                      "inline",
                      "off",
                    ],
                    "enumDescriptions": [
                      "Quick suggestions show inside the suggest widget",
                      "Quick suggestions show as ghost text",
                      "Quick suggestions are disabled",
                    ],
                    "type": "string",
                  },
                ],
                "default": "on",
                "description": "Enable quick suggestions outside of strings and comments.",
              },
              "strings": {
                "anyOf": [
                  {
                    "type": "boolean",
                  },
                  {
                    "enum": [
                      "on",
                      "inline",
                      "off",
                    ],
                    "enumDescriptions": [
                      "Quick suggestions show inside the suggest widget",
                      "Quick suggestions show as ghost text",
                      "Quick suggestions are disabled",
                    ],
                    "type": "string",
                  },
                ],
                "default": "off",
                "description": "Enable quick suggestions inside strings.",
              },
            },
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "object",
          },
        },
        "quickSuggestionsDelay": EditorIntOption {
          "defaultValue": 10,
          "id": 91,
          "maximum": 1073741824,
          "minimum": 0,
          "name": "quickSuggestionsDelay",
          "schema": {
            "default": 10,
            "defaultDefaultValue": 10,
            "defaultValueSource": undefined,
            "description": "Controls the delay in milliseconds after which quick suggestions will show up.",
            "maximum": 1073741824,
            "minimum": 0,
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "integer",
          },
        },
        "readOnly": EditorBooleanOption {
          "defaultValue": false,
          "id": 92,
          "name": "readOnly",
          "schema": undefined,
        },
        "readOnlyMessage": ReadonlyMessage {
          "defaultValue": undefined,
          "id": 93,
          "name": "readOnlyMessage",
          "schema": undefined,
        },
        "renameOnType": EditorBooleanOption {
          "defaultValue": false,
          "id": 94,
          "name": "renameOnType",
          "schema": {
            "default": false,
            "defaultDefaultValue": false,
            "defaultValueSource": undefined,
            "deprecationMessage": "Deprecated, use `editor.linkedEditing` instead.",
            "description": "Controls whether the editor auto renames on type.",
            "markdownDeprecationMessage": "Deprecated, use `editor.linkedEditing` instead.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "boolean",
          },
        },
        "renderControlCharacters": EditorBooleanOption {
          "defaultValue": true,
          "id": 95,
          "name": "renderControlCharacters",
          "schema": {
            "default": true,
            "defaultDefaultValue": true,
            "defaultValueSource": undefined,
            "description": "Controls whether the editor should render control characters.",
            "restricted": true,
            "scope": 5,
            "source": undefined,
            "type": "boolean",
          },
        },
        "renderFinalNewline": EditorStringEnumOption {
          "_allowedValues": [
            "off",
            "on",
            "dimmed",
          ],
          "defaultValue": "dimmed",
          "id": 96,
          "name": "renderFinalNewline",
          "schema": {
            "default": "dimmed",
            "defaultDefaultValue": "dimmed",
            "defaultValueSource": undefined,
            "description": "Render last line number when the file ends with a newline.",
            "enum": [
              "off",
              "on",
              "dimmed",
            ],
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "string",
          },
        },
        "renderLineHighlight": EditorStringEnumOption {
          "_allowedValues": [
            "none",
            "gutter",
            "line",
            "all",
          ],
          "defaultValue": "line",
          "id": 97,
          "name": "renderLineHighlight",
          "schema": {
            "default": "line",
            "defaultDefaultValue": "line",
            "defaultValueSource": undefined,
            "description": "Controls how the editor should render the current line highlight.",
            "enum": [
              "none",
              "gutter",
              "line",
              "all",
            ],
            "enumDescriptions": [
              "",
              "",
              "",
              "Highlights both the gutter and the current line.",
            ],
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "string",
          },
        },
        "renderLineHighlightOnlyWhenFocus": EditorBooleanOption {
          "defaultValue": false,
          "id": 98,
          "name": "renderLineHighlightOnlyWhenFocus",
          "schema": {
            "default": false,
            "defaultDefaultValue": false,
            "defaultValueSource": undefined,
            "description": "Controls if the editor should render the current line highlight only when the editor is focused.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "boolean",
          },
        },
        "renderValidationDecorations": EditorStringEnumOption {
          "_allowedValues": [
            "editable",
            "on",
            "off",
          ],
          "defaultValue": "editable",
          "id": 99,
          "name": "renderValidationDecorations",
          "schema": undefined,
        },
        "renderWhitespace": EditorStringEnumOption {
          "_allowedValues": [
            "none",
            "boundary",
            "selection",
            "trailing",
            "all",
          ],
          "defaultValue": "selection",
          "id": 100,
          "name": "renderWhitespace",
          "schema": {
            "default": "selection",
            "defaultDefaultValue": "selection",
            "defaultValueSource": undefined,
            "description": "Controls how the editor should render whitespace characters.",
            "enum": [
              "none",
              "boundary",
              "selection",
              "trailing",
              "all",
            ],
            "enumDescriptions": [
              "",
              "Render whitespace characters except for single spaces between words.",
              "Render whitespace characters only on selected text.",
              "Render only trailing whitespace characters.",
              "",
            ],
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "string",
          },
        },
        "revealHorizontalRightPadding": EditorIntOption {
          "defaultValue": 15,
          "id": 101,
          "maximum": 1000,
          "minimum": 0,
          "name": "revealHorizontalRightPadding",
          "schema": undefined,
        },
        "roundedSelection": EditorBooleanOption {
          "defaultValue": true,
          "id": 102,
          "name": "roundedSelection",
          "schema": {
            "default": true,
            "defaultDefaultValue": true,
            "defaultValueSource": undefined,
            "description": "Controls whether selections should have rounded corners.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "boolean",
          },
        },
        "rulers": EditorRulers {
          "defaultValue": [],
          "id": 103,
          "name": "rulers",
          "schema": {
            "default": [],
            "defaultDefaultValue": [],
            "defaultValueSource": undefined,
            "description": "Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty.",
            "items": {
              "anyOf": [
                {
                  "description": "Number of monospace characters at which this editor ruler will render.",
                  "type": "number",
                },
                {
                  "properties": {
                    "color": {
                      "description": "Color of this editor ruler.",
                      "format": "color-hex",
                      "type": "string",
                    },
                    "column": {
                      "description": "Number of monospace characters at which this editor ruler will render.",
                      "type": "number",
                    },
                  },
                  "type": [
                    "object",
                  ],
                },
              ],
            },
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "array",
          },
        },
        "screenReaderAnnounceInlineSuggestion": EditorBooleanOption {
          "defaultValue": true,
          "id": 8,
          "name": "screenReaderAnnounceInlineSuggestion",
          "schema": {
            "default": true,
            "defaultDefaultValue": true,
            "defaultValueSource": undefined,
            "description": "Control whether inline suggestions are announced by a screen reader.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "tags": [
              "accessibility",
            ],
            "type": "boolean",
          },
        },
        "scrollBeyondLastColumn": EditorIntOption {
          "defaultValue": 4,
          "id": 105,
          "maximum": 1073741824,
          "minimum": 0,
          "name": "scrollBeyondLastColumn",
          "schema": {
            "default": 4,
            "defaultDefaultValue": 4,
            "defaultValueSource": undefined,
            "description": "Controls the number of extra characters beyond which the editor will scroll horizontally.",
            "maximum": 1073741824,
            "minimum": 0,
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "integer",
          },
        },
        "scrollBeyondLastLine": EditorBooleanOption {
          "defaultValue": true,
          "id": 106,
          "name": "scrollBeyondLastLine",
          "schema": {
            "default": true,
            "defaultDefaultValue": true,
            "defaultValueSource": undefined,
            "description": "Controls whether the editor will scroll beyond the last line.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "boolean",
          },
        },
        "scrollPredominantAxis": EditorBooleanOption {
          "defaultValue": true,
          "id": 107,
          "name": "scrollPredominantAxis",
          "schema": {
            "default": true,
            "defaultDefaultValue": true,
            "defaultValueSource": undefined,
            "description": "Scroll only along the predominant axis when scrolling both vertically and horizontally at the same time. Prevents horizontal drift when scrolling vertically on a trackpad.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "boolean",
          },
        },
        "scrollbar": EditorScrollbar {
          "defaultValue": {
            "alwaysConsumeMouseWheel": true,
            "arrowSize": 11,
            "handleMouseWheel": true,
            "horizontal": 1,
            "horizontalHasArrows": false,
            "horizontalScrollbarSize": 12,
            "horizontalSliderSize": 12,
            "ignoreHorizontalScrollbarInContentHeight": false,
            "scrollByPage": false,
            "useShadows": true,
            "vertical": 1,
            "verticalHasArrows": false,
            "verticalScrollbarSize": 14,
            "verticalSliderSize": 14,
          },
          "id": 104,
          "name": "scrollbar",
          "schema": {
            "editor.scrollbar.horizontal": {
              "default": "auto",
              "defaultDefaultValue": "auto",
              "defaultValueSource": undefined,
              "description": "Controls the visibility of the horizontal scrollbar.",
              "enum": [
                "auto",
                "visible",
                "hidden",
              ],
              "enumDescriptions": [
                "The horizontal scrollbar will be visible only when necessary.",
                "The horizontal scrollbar will always be visible.",
                "The horizontal scrollbar will always be hidden.",
              ],
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "string",
            },
            "editor.scrollbar.horizontalScrollbarSize": {
              "default": 12,
              "defaultDefaultValue": 12,
              "defaultValueSource": undefined,
              "description": "The height of the horizontal scrollbar.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "number",
            },
            "editor.scrollbar.ignoreHorizontalScrollbarInContentHeight": {
              "default": false,
              "defaultDefaultValue": false,
              "defaultValueSource": undefined,
              "description": "When set, the horizontal scrollbar will not increase the size of the editor's content.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.scrollbar.scrollByPage": {
              "default": false,
              "defaultDefaultValue": false,
              "defaultValueSource": undefined,
              "description": "Controls whether clicks scroll by page or jump to click position.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.scrollbar.vertical": {
              "default": "auto",
              "defaultDefaultValue": "auto",
              "defaultValueSource": undefined,
              "description": "Controls the visibility of the vertical scrollbar.",
              "enum": [
                "auto",
                "visible",
                "hidden",
              ],
              "enumDescriptions": [
                "The vertical scrollbar will be visible only when necessary.",
                "The vertical scrollbar will always be visible.",
                "The vertical scrollbar will always be hidden.",
              ],
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "string",
            },
            "editor.scrollbar.verticalScrollbarSize": {
              "default": 14,
              "defaultDefaultValue": 14,
              "defaultValueSource": undefined,
              "description": "The width of the vertical scrollbar.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "number",
            },
          },
        },
        "selectOnLineNumbers": EditorBooleanOption {
          "defaultValue": true,
          "id": 110,
          "name": "selectOnLineNumbers",
          "schema": undefined,
        },
        "selectionClipboard": EditorBooleanOption {
          "defaultValue": true,
          "id": 108,
          "name": "selectionClipboard",
          "schema": {
            "default": true,
            "defaultDefaultValue": true,
            "defaultValueSource": undefined,
            "description": "Controls whether the Linux primary clipboard should be supported.",
            "included": true,
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "boolean",
          },
        },
        "selectionHighlight": EditorBooleanOption {
          "defaultValue": true,
          "id": 109,
          "name": "selectionHighlight",
          "schema": {
            "default": true,
            "defaultDefaultValue": true,
            "defaultValueSource": undefined,
            "description": "Controls whether the editor should highlight matches similar to the selection.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "boolean",
          },
        },
        "showDeprecated": EditorBooleanOption {
          "defaultValue": true,
          "id": 141,
          "name": "showDeprecated",
          "schema": {
            "default": true,
            "defaultDefaultValue": true,
            "defaultValueSource": undefined,
            "description": "Controls strikethrough deprecated variables.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "boolean",
          },
        },
        "showFoldingControls": EditorStringEnumOption {
          "_allowedValues": [
            "always",
            "never",
            "mouseover",
          ],
          "defaultValue": "mouseover",
          "id": 111,
          "name": "showFoldingControls",
          "schema": {
            "default": "mouseover",
            "defaultDefaultValue": "mouseover",
            "defaultValueSource": undefined,
            "description": "Controls when the folding controls on the gutter are shown.",
            "enum": [
              "always",
              "never",
              "mouseover",
            ],
            "enumDescriptions": [
              "Always show the folding controls.",
              "Never show the folding controls and reduce the gutter size.",
              "Only show the folding controls when the mouse is over the gutter.",
            ],
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "string",
          },
        },
        "showUnused": EditorBooleanOption {
          "defaultValue": true,
          "id": 112,
          "name": "showUnused",
          "schema": {
            "default": true,
            "defaultDefaultValue": true,
            "defaultValueSource": undefined,
            "description": "Controls fading out of unused code.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "boolean",
          },
        },
        "smartSelect": SmartSelect {
          "defaultValue": {
            "selectLeadingAndTrailingWhitespace": true,
            "selectSubwords": true,
          },
          "id": 114,
          "name": "smartSelect",
          "schema": {
            "editor.smartSelect.selectLeadingAndTrailingWhitespace": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "description": "Whether leading and trailing whitespace should always be selected.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.smartSelect.selectSubwords": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "description": "Whether subwords (like 'foo' in 'fooBar' or 'foo_bar') should be selected.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
          },
        },
        "smoothScrolling": EditorBooleanOption {
          "defaultValue": false,
          "id": 115,
          "name": "smoothScrolling",
          "schema": {
            "default": false,
            "defaultDefaultValue": false,
            "defaultValueSource": undefined,
            "description": "Controls whether the editor will scroll using an animation.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "boolean",
          },
        },
        "snippetSuggestions": EditorStringEnumOption {
          "_allowedValues": [
            "top",
            "bottom",
            "inline",
            "none",
          ],
          "defaultValue": "inline",
          "id": 113,
          "name": "snippetSuggestions",
          "schema": {
            "default": "inline",
            "defaultDefaultValue": "inline",
            "defaultValueSource": undefined,
            "description": "Controls whether snippets are shown with other suggestions and how they are sorted.",
            "enum": [
              "top",
              "bottom",
              "inline",
              "none",
            ],
            "enumDescriptions": [
              "Show snippet suggestions on top of other suggestions.",
              "Show snippet suggestions below other suggestions.",
              "Show snippets suggestions with other suggestions.",
              "Do not show snippet suggestions.",
            ],
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "string",
          },
        },
        "stickyScroll": EditorStickyScroll {
          "defaultValue": {
            "defaultModel": "outlineModel",
            "enabled": true,
            "maxLineCount": 5,
            "scrollWithEditor": true,
          },
          "id": 116,
          "name": "stickyScroll",
          "schema": {
            "editor.stickyScroll.defaultModel": {
              "default": "outlineModel",
              "defaultDefaultValue": "outlineModel",
              "defaultValueSource": undefined,
              "description": "Defines the model to use for determining which lines to stick. If the outline model does not exist, it will fall back on the folding provider model which falls back on the indentation model. This order is respected in all three cases.",
              "enum": [
                "outlineModel",
                "foldingProviderModel",
                "indentationModel",
              ],
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "string",
            },
            "editor.stickyScroll.enabled": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "description": "Shows the nested current scopes during the scroll at the top of the editor.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "tags": [
                "experimental",
              ],
              "type": "boolean",
            },
            "editor.stickyScroll.maxLineCount": {
              "default": 5,
              "defaultDefaultValue": 5,
              "defaultValueSource": undefined,
              "description": "Defines the maximum number of sticky lines to show.",
              "maximum": 20,
              "minimum": 1,
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "number",
            },
            "editor.stickyScroll.scrollWithEditor": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "description": "Enable scrolling of Sticky Scroll with the editor's horizontal scrollbar.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
          },
        },
        "stickyTabStops": EditorBooleanOption {
          "defaultValue": false,
          "id": 117,
          "name": "stickyTabStops",
          "schema": {
            "default": false,
            "defaultDefaultValue": false,
            "defaultValueSource": undefined,
            "description": "Emulate selection behavior of tab characters when using spaces for indentation. Selection will stick to tab stops.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "boolean",
          },
        },
        "stopRenderingLineAfter": EditorIntOption {
          "defaultValue": 10000,
          "id": 118,
          "maximum": 1073741824,
          "minimum": -1,
          "name": "stopRenderingLineAfter",
          "schema": undefined,
        },
        "suggest": EditorSuggest {
          "defaultValue": {
            "filterGraceful": true,
            "insertMode": "insert",
            "localityBonus": false,
            "matchOnWordStartOnly": true,
            "preview": false,
            "previewMode": "subwordSmart",
            "selectionMode": "always",
            "shareSuggestSelections": false,
            "showClasses": true,
            "showColors": true,
            "showConstants": true,
            "showConstructors": true,
            "showDeprecated": true,
            "showEnumMembers": true,
            "showEnums": true,
            "showEvents": true,
            "showFields": true,
            "showFiles": true,
            "showFolders": true,
            "showFunctions": true,
            "showIcons": true,
            "showInlineDetails": true,
            "showInterfaces": true,
            "showIssues": true,
            "showKeywords": true,
            "showMethods": true,
            "showModules": true,
            "showOperators": true,
            "showProperties": true,
            "showReferences": true,
            "showSnippets": true,
            "showStatusBar": false,
            "showStructs": true,
            "showTypeParameters": true,
            "showUnits": true,
            "showUsers": true,
            "showValues": true,
            "showVariables": true,
            "showWords": true,
            "snippetsPreventQuickSuggestions": false,
          },
          "id": 119,
          "name": "suggest",
          "schema": {
            "editor.suggest.filterGraceful": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "description": "Controls whether filtering and sorting suggestions accounts for small typos.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.suggest.filteredTypes": {
              "default": {},
              "defaultDefaultValue": undefined,
              "defaultValueSource": undefined,
              "deprecationMessage": "This setting is deprecated, please use separate settings like 'editor.suggest.showKeywords' or 'editor.suggest.showSnippets' instead.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "object",
            },
            "editor.suggest.insertMode": {
              "default": "insert",
              "defaultDefaultValue": "insert",
              "defaultValueSource": undefined,
              "description": "Controls whether words are overwritten when accepting completions. Note that this depends on extensions opting into this feature.",
              "enum": [
                "insert",
                "replace",
              ],
              "enumDescriptions": [
                "Insert suggestion without overwriting text right of the cursor.",
                "Insert suggestion and overwrite text right of the cursor.",
              ],
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "string",
            },
            "editor.suggest.localityBonus": {
              "default": false,
              "defaultDefaultValue": false,
              "defaultValueSource": undefined,
              "description": "Controls whether sorting favors words that appear close to the cursor.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.suggest.matchOnWordStartOnly": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "markdownDescription": "When enabled IntelliSense filtering requires that the first character matches on a word start. For example, `c` on `Console` or `WebContext` but _not_ on `description`. When disabled IntelliSense will show more results but still sorts them by match quality.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.suggest.maxVisibleSuggestions": {
              "default": 0,
              "defaultDefaultValue": undefined,
              "defaultValueSource": undefined,
              "deprecationMessage": "This setting is deprecated. The suggest widget can now be resized.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "number",
            },
            "editor.suggest.preview": {
              "default": false,
              "defaultDefaultValue": false,
              "defaultValueSource": undefined,
              "description": "Controls whether to preview the suggestion outcome in the editor.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.suggest.selectionMode": {
              "default": "always",
              "defaultDefaultValue": "always",
              "defaultValueSource": undefined,
              "enum": [
                "always",
                "never",
                "whenTriggerCharacter",
                "whenQuickSuggestion",
              ],
              "enumDescriptions": [
                "Always select a suggestion when automatically triggering IntelliSense.",
                "Never select a suggestion when automatically triggering IntelliSense.",
                "Select a suggestion only when triggering IntelliSense from a trigger character.",
                "Select a suggestion only when triggering IntelliSense as you type.",
              ],
              "markdownDescription": "Controls whether a suggestion is selected when the widget shows. Note that this only applies to automatically triggered suggestions (`#editor.quickSuggestions#` and `#editor.suggestOnTriggerCharacters#`) and that a suggestion is always selected when explicitly invoked, e.g via `Ctrl+Space`.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "string",
            },
            "editor.suggest.shareSuggestSelections": {
              "default": false,
              "defaultDefaultValue": false,
              "defaultValueSource": undefined,
              "markdownDescription": "Controls whether remembered suggestion selections are shared between multiple workspaces and windows (needs `#editor.suggestSelection#`).",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.suggest.showClasses": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "markdownDescription": "When enabled IntelliSense shows `class`-suggestions.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.suggest.showColors": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "markdownDescription": "When enabled IntelliSense shows `color`-suggestions.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.suggest.showConstants": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "markdownDescription": "When enabled IntelliSense shows `constant`-suggestions.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.suggest.showConstructors": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "markdownDescription": "When enabled IntelliSense shows `constructor`-suggestions.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.suggest.showCustomcolors": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "markdownDescription": "When enabled IntelliSense shows `customcolor`-suggestions.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.suggest.showDeprecated": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "markdownDescription": "When enabled IntelliSense shows `deprecated`-suggestions.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.suggest.showEnumMembers": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "markdownDescription": "When enabled IntelliSense shows `enumMember`-suggestions.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.suggest.showEnums": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "markdownDescription": "When enabled IntelliSense shows `enum`-suggestions.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.suggest.showEvents": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "markdownDescription": "When enabled IntelliSense shows `event`-suggestions.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.suggest.showFields": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "markdownDescription": "When enabled IntelliSense shows `field`-suggestions.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.suggest.showFiles": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "markdownDescription": "When enabled IntelliSense shows `file`-suggestions.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.suggest.showFolders": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "markdownDescription": "When enabled IntelliSense shows `folder`-suggestions.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.suggest.showFunctions": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "markdownDescription": "When enabled IntelliSense shows `function`-suggestions.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.suggest.showIcons": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "description": "Controls whether to show or hide icons in suggestions.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.suggest.showInlineDetails": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "description": "Controls whether suggest details show inline with the label or only in the details widget.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.suggest.showInterfaces": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "markdownDescription": "When enabled IntelliSense shows `interface`-suggestions.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.suggest.showIssues": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "markdownDescription": "When enabled IntelliSense shows `issues`-suggestions.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.suggest.showKeywords": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "markdownDescription": "When enabled IntelliSense shows `keyword`-suggestions.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.suggest.showMethods": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "markdownDescription": "When enabled IntelliSense shows `method`-suggestions.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.suggest.showModules": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "markdownDescription": "When enabled IntelliSense shows `module`-suggestions.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.suggest.showOperators": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "markdownDescription": "When enabled IntelliSense shows `operator`-suggestions.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.suggest.showProperties": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "markdownDescription": "When enabled IntelliSense shows `property`-suggestions.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.suggest.showReferences": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "markdownDescription": "When enabled IntelliSense shows `reference`-suggestions.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.suggest.showSnippets": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "markdownDescription": "When enabled IntelliSense shows `snippet`-suggestions.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.suggest.showStatusBar": {
              "default": false,
              "defaultDefaultValue": false,
              "defaultValueSource": undefined,
              "description": "Controls the visibility of the status bar at the bottom of the suggest widget.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.suggest.showStructs": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "markdownDescription": "When enabled IntelliSense shows `struct`-suggestions.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.suggest.showTypeParameters": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "markdownDescription": "When enabled IntelliSense shows `typeParameter`-suggestions.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.suggest.showUnits": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "markdownDescription": "When enabled IntelliSense shows `unit`-suggestions.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.suggest.showUsers": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "markdownDescription": "When enabled IntelliSense shows `user`-suggestions.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.suggest.showValues": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "markdownDescription": "When enabled IntelliSense shows `value`-suggestions.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.suggest.showVariables": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "markdownDescription": "When enabled IntelliSense shows `variable`-suggestions.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.suggest.showWords": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "markdownDescription": "When enabled IntelliSense shows `text`-suggestions.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.suggest.snippetsPreventQuickSuggestions": {
              "default": false,
              "defaultDefaultValue": false,
              "defaultValueSource": undefined,
              "description": "Controls whether an active snippet prevents quick suggestions.",
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
          },
        },
        "suggestFontSize": EditorIntOption {
          "defaultValue": 0,
          "id": 120,
          "maximum": 1000,
          "minimum": 0,
          "name": "suggestFontSize",
          "schema": {
            "default": 0,
            "defaultDefaultValue": 0,
            "defaultValueSource": undefined,
            "markdownDescription": "Font size for the suggest widget. When set to `0`, the value of `#editor.fontSize#` is used.",
            "maximum": 1000,
            "minimum": 0,
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "integer",
          },
        },
        "suggestLineHeight": EditorIntOption {
          "defaultValue": 0,
          "id": 121,
          "maximum": 1000,
          "minimum": 0,
          "name": "suggestLineHeight",
          "schema": {
            "default": 0,
            "defaultDefaultValue": 0,
            "defaultValueSource": undefined,
            "markdownDescription": "Line height for the suggest widget. When set to `0`, the value of `#editor.lineHeight#` is used. The minimum value is 8.",
            "maximum": 1000,
            "minimum": 0,
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "integer",
          },
        },
        "suggestOnTriggerCharacters": EditorBooleanOption {
          "defaultValue": true,
          "id": 122,
          "name": "suggestOnTriggerCharacters",
          "schema": {
            "default": true,
            "defaultDefaultValue": true,
            "defaultValueSource": undefined,
            "description": "Controls whether suggestions should automatically show up when typing trigger characters.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "boolean",
          },
        },
        "suggestSelection": EditorStringEnumOption {
          "_allowedValues": [
            "first",
            "recentlyUsed",
            "recentlyUsedByPrefix",
          ],
          "defaultValue": "first",
          "id": 123,
          "name": "suggestSelection",
          "schema": {
            "default": "first",
            "defaultDefaultValue": "first",
            "defaultValueSource": undefined,
            "description": "Controls how suggestions are pre-selected when showing the suggest list.",
            "enum": [
              "first",
              "recentlyUsed",
              "recentlyUsedByPrefix",
            ],
            "markdownEnumDescriptions": [
              "Always select the first suggestion.",
              "Select recent suggestions unless further typing selects one, e.g. `console.| -> console.log` because `log` has been completed recently.",
              "Select suggestions based on previous prefixes that have completed those suggestions, e.g. `co -> console` and `con -> const`.",
            ],
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "string",
          },
        },
        "tabCompletion": EditorStringEnumOption {
          "_allowedValues": [
            "on",
            "off",
            "onlySnippets",
          ],
          "defaultValue": "off",
          "id": 124,
          "name": "tabCompletion",
          "schema": {
            "default": "off",
            "defaultDefaultValue": "off",
            "defaultValueSource": undefined,
            "description": "Enables tab completions.",
            "enum": [
              "on",
              "off",
              "onlySnippets",
            ],
            "enumDescriptions": [
              "Tab complete will insert the best matching suggestion when pressing tab.",
              "Disable tab completions.",
              "Tab complete snippets when their prefix match. Works best when 'quickSuggestions' aren't enabled.",
            ],
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "string",
          },
        },
        "tabFocusMode": EditorBooleanOption {
          "defaultValue": false,
          "id": 145,
          "name": "tabFocusMode",
          "schema": {
            "default": false,
            "defaultDefaultValue": false,
            "defaultValueSource": undefined,
            "markdownDescription": "Controls whether the editor receives tabs or defers them to the workbench for navigation.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "boolean",
          },
        },
        "tabIndex": EditorIntOption {
          "defaultValue": 0,
          "id": 125,
          "maximum": 1073741824,
          "minimum": -1,
          "name": "tabIndex",
          "schema": undefined,
        },
        "unfoldOnClickAfterEndOfLine": EditorBooleanOption {
          "defaultValue": false,
          "id": 48,
          "name": "unfoldOnClickAfterEndOfLine",
          "schema": {
            "default": false,
            "defaultDefaultValue": false,
            "defaultValueSource": undefined,
            "description": "Controls whether clicking on the empty content after a folded line will unfold the line.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "boolean",
          },
        },
        "unicodeHighlight": UnicodeHighlight {
          "defaultValue": {
            "allowedCharacters": {},
            "allowedLocales": {
              "_os": true,
              "_vscode": true,
            },
            "ambiguousCharacters": true,
            "includeComments": "inUntrustedWorkspace",
            "includeStrings": true,
            "invisibleCharacters": true,
            "nonBasicASCII": "inUntrustedWorkspace",
          },
          "id": 126,
          "name": "unicodeHighlight",
          "schema": {
            "editor.unicodeHighlight.allowedCharacters": {
              "additionalProperties": {
                "type": "boolean",
              },
              "default": {},
              "defaultDefaultValue": {},
              "defaultValueSource": undefined,
              "description": "Defines allowed characters that are not being highlighted.",
              "restricted": true,
              "scope": 5,
              "source": undefined,
              "type": "object",
            },
            "editor.unicodeHighlight.allowedLocales": {
              "additionalProperties": {
                "type": "boolean",
              },
              "default": {
                "_os": true,
                "_vscode": true,
              },
              "defaultDefaultValue": {
                "_os": true,
                "_vscode": true,
              },
              "defaultValueSource": undefined,
              "description": "Unicode characters that are common in allowed locales are not being highlighted.",
              "restricted": true,
              "scope": 5,
              "source": undefined,
              "type": "object",
            },
            "editor.unicodeHighlight.ambiguousCharacters": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "description": "Controls whether characters are highlighted that can be confused with basic ASCII characters, except those that are common in the current user locale.",
              "restricted": true,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.unicodeHighlight.includeComments": {
              "default": "inUntrustedWorkspace",
              "defaultDefaultValue": "inUntrustedWorkspace",
              "defaultValueSource": undefined,
              "description": "Controls whether characters in comments should also be subject to Unicode highlighting.",
              "enum": [
                true,
                false,
                "inUntrustedWorkspace",
              ],
              "restricted": true,
              "scope": 5,
              "source": undefined,
              "type": [
                "boolean",
                "string",
              ],
            },
            "editor.unicodeHighlight.includeStrings": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "description": "Controls whether characters in strings should also be subject to Unicode highlighting.",
              "enum": [
                true,
                false,
                "inUntrustedWorkspace",
              ],
              "restricted": true,
              "scope": 5,
              "source": undefined,
              "type": [
                "boolean",
                "string",
              ],
            },
            "editor.unicodeHighlight.invisibleCharacters": {
              "default": true,
              "defaultDefaultValue": true,
              "defaultValueSource": undefined,
              "description": "Controls whether characters that just reserve space or have no width at all are highlighted.",
              "restricted": true,
              "scope": 5,
              "source": undefined,
              "type": "boolean",
            },
            "editor.unicodeHighlight.nonBasicASCII": {
              "default": "inUntrustedWorkspace",
              "defaultDefaultValue": "inUntrustedWorkspace",
              "defaultValueSource": undefined,
              "description": "Controls whether all non-basic ASCII characters are highlighted. Only characters between U+0020 and U+007E, tab, line-feed and carriage-return are considered basic ASCII.",
              "enum": [
                true,
                false,
                "inUntrustedWorkspace",
              ],
              "restricted": true,
              "scope": 5,
              "source": undefined,
              "type": [
                "boolean",
                "string",
              ],
            },
          },
        },
        "unusualLineTerminators": EditorStringEnumOption {
          "_allowedValues": [
            "auto",
            "off",
            "prompt",
          ],
          "defaultValue": "prompt",
          "id": 127,
          "name": "unusualLineTerminators",
          "schema": {
            "default": "prompt",
            "defaultDefaultValue": "prompt",
            "defaultValueSource": undefined,
            "description": "Remove unusual line terminators that might cause problems.",
            "enum": [
              "auto",
              "off",
              "prompt",
            ],
            "enumDescriptions": [
              "Unusual line terminators are automatically removed.",
              "Unusual line terminators are ignored.",
              "Unusual line terminators prompt to be removed.",
            ],
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "string",
          },
        },
        "useShadowDOM": EditorBooleanOption {
          "defaultValue": true,
          "id": 128,
          "name": "useShadowDOM",
          "schema": undefined,
        },
        "useTabStops": EditorBooleanOption {
          "defaultValue": true,
          "id": 129,
          "name": "useTabStops",
          "schema": {
            "default": true,
            "defaultDefaultValue": true,
            "defaultValueSource": undefined,
            "description": "Spaces and tabs are inserted and deleted in alignment with tab stops.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "boolean",
          },
        },
        "wordBreak": EditorStringEnumOption {
          "_allowedValues": [
            "normal",
            "keepAll",
          ],
          "defaultValue": "normal",
          "id": 130,
          "name": "wordBreak",
          "schema": {
            "default": "normal",
            "defaultDefaultValue": "normal",
            "defaultValueSource": undefined,
            "description": "Controls the word break rules used for Chinese/Japanese/Korean (CJK) text.",
            "enum": [
              "normal",
              "keepAll",
            ],
            "markdownEnumDescriptions": [
              "Use the default line break rule.",
              "Word breaks should not be used for Chinese/Japanese/Korean (CJK) text. Non-CJK text behavior is the same as for normal.",
            ],
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "string",
          },
        },
        "wordSegmenterLocales": WordSegmenterLocales {
          "defaultValue": [],
          "id": 131,
          "name": "wordSegmenterLocales",
          "schema": {
            "anyOf": [
              {
                "description": "Locales to be used for word segmentation when doing word related navigations or operations. Specify the BCP 47 language tag of the word you wish to recognize (e.g., ja, zh-CN, zh-Hant-TW, etc.).",
                "type": "string",
              },
              {
                "description": "Locales to be used for word segmentation when doing word related navigations or operations. Specify the BCP 47 language tag of the word you wish to recognize (e.g., ja, zh-CN, zh-Hant-TW, etc.).",
                "items": {
                  "type": "string",
                },
                "type": "array",
              },
            ],
            "default": null,
            "defaultDefaultValue": undefined,
            "defaultValueSource": undefined,
            "restricted": false,
            "scope": 5,
            "source": undefined,
          },
        },
        "wordSeparators": EditorStringOption {
          "defaultValue": "`~!@#$%^&*()-=+[{]}\|;:'",.<>/?",
          "id": 132,
          "name": "wordSeparators",
          "schema": {
            "default": "`~!@#$%^&*()-=+[{]}\|;:'",.<>/?",
            "defaultDefaultValue": "`~!@#$%^&*()-=+[{]}\|;:'",.<>/?",
            "defaultValueSource": undefined,
            "description": "Characters that will be used as word separators when doing word related navigations or operations.",
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "string",
          },
        },
        "wordWrap": EditorStringEnumOption {
          "_allowedValues": [
            "off",
            "on",
            "wordWrapColumn",
            "bounded",
          ],
          "defaultValue": "off",
          "id": 133,
          "name": "wordWrap",
          "schema": {
            "default": "off",
            "defaultDefaultValue": "off",
            "defaultValueSource": undefined,
            "description": "Controls how lines should wrap.",
            "enum": [
              "off",
              "on",
              "wordWrapColumn",
              "bounded",
            ],
            "markdownEnumDescriptions": [
              "Lines will never wrap.",
              "Lines will wrap at the viewport width.",
              "Lines will wrap at `#editor.wordWrapColumn#`.",
              "Lines will wrap at the minimum of viewport and `#editor.wordWrapColumn#`.",
            ],
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "string",
          },
        },
        "wordWrapBreakAfterCharacters": EditorStringOption {
          "defaultValue": " 	})]?|/&.,;¢°′″‰℃、。｡､￠，．：；？！％・･ゝゞヽヾーァィゥェォッャュョヮヵヶぁぃぅぇぉっゃゅょゎゕゖㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇺㇻㇼㇽㇾㇿ々〻ｧｨｩｪｫｬｭｮｯｰ”〉》」』】〕）］｝｣",
          "id": 134,
          "name": "wordWrapBreakAfterCharacters",
          "schema": undefined,
        },
        "wordWrapBreakBeforeCharacters": EditorStringOption {
          "defaultValue": "([{‘“〈《「『【〔（［｛｢£¥＄￡￥+＋",
          "id": 135,
          "name": "wordWrapBreakBeforeCharacters",
          "schema": undefined,
        },
        "wordWrapColumn": EditorIntOption {
          "defaultValue": 80,
          "id": 136,
          "maximum": 1073741824,
          "minimum": 1,
          "name": "wordWrapColumn",
          "schema": {
            "default": 80,
            "defaultDefaultValue": 80,
            "defaultValueSource": undefined,
            "markdownDescription": "Controls the wrapping column of the editor when `#editor.wordWrap#` is `wordWrapColumn` or `bounded`.",
            "maximum": 1073741824,
            "minimum": 1,
            "restricted": false,
            "scope": 5,
            "source": undefined,
            "type": "integer",
          },
        },
        "wordWrapOverride1": EditorStringEnumOption {
          "_allowedValues": [
            "off",
            "on",
            "inherit",
          ],
          "defaultValue": "inherit",
          "id": 137,
          "name": "wordWrapOverride1",
          "schema": undefined,
        },
        "wordWrapOverride2": EditorStringEnumOption {
          "_allowedValues": [
            "off",
            "on",
            "inherit",
          ],
          "defaultValue": "inherit",
          "id": 138,
          "name": "wordWrapOverride2",
          "schema": undefined,
        },
        "wrappingIndent": WrappingIndentOption {
          "defaultValue": 0,
          "id": 139,
          "name": "wrappingIndent",
          "schema": {
            "editor.wrappingIndent": {
              "default": "same",
              "defaultDefaultValue": "same",
              "defaultValueSource": undefined,
              "description": "Controls the indentation of wrapped lines.",
              "enum": [
                "none",
                "same",
                "indent",
                "deepIndent",
              ],
              "enumDescriptions": [
                "No indentation. Wrapped lines begin at column 1.",
                "Wrapped lines get the same indentation as the parent.",
                "Wrapped lines get +1 indentation toward the parent.",
                "Wrapped lines get +2 indentation toward the parent.",
              ],
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "string",
            },
          },
        },
        "wrappingInfo": EditorWrappingInfoComputer {
          "defaultValue": undefined,
          "id": 147,
          "name": "_never_",
          "schema": undefined,
        },
        "wrappingStrategy": WrappingStrategy {
          "defaultValue": "simple",
          "id": 140,
          "name": "wrappingStrategy",
          "schema": {
            "editor.wrappingStrategy": {
              "default": "simple",
              "defaultDefaultValue": "simple",
              "defaultValueSource": undefined,
              "description": "Controls the algorithm that computes wrapping points. Note that when in accessibility mode, advanced will be used for the best experience.",
              "enum": [
                "simple",
                "advanced",
              ],
              "enumDescriptions": [
                "Assumes that all characters are of the same width. This is a fast algorithm that works correctly for monospace fonts and certain scripts (like Latin characters) where glyphs are of equal width.",
                "Delegates wrapping points computation to the browser. This is a slow algorithm, that might cause freezes for large files, but it works correctly in all cases.",
              ],
              "restricted": false,
              "scope": 5,
              "source": undefined,
              "type": "string",
            },
          },
        },
      },
      "EditorType": {
        "ICodeEditor": "vs.editor.ICodeEditor",
        "IDiffEditor": "vs.editor.IDiffEditor",
      },
      "EditorZoom": {
        "_onDidChangeZoomLevel": Emitter {
          "_deliveryQueue": undefined,
          "_event": [Function],
          "_leakageMon": undefined,
          "_options": undefined,
          "_perfMon": undefined,
          "_size": 0,
        },
        "_zoomLevel": 0,
        "onDidChangeZoomLevel": [Function],
      },
      "EndOfLinePreference": {
        "0": "TextDefined",
        "1": "LF",
        "2": "CRLF",
        "CRLF": 2,
        "LF": 1,
        "TextDefined": 0,
      },
      "EndOfLineSequence": {
        "0": "LF",
        "1": "CRLF",
        "CRLF": 1,
        "LF": 0,
      },
      "FindMatch": [Function],
      "FontInfo": [Function],
      "GlyphMarginLane": {
        "1": "Left",
        "2": "Center",
        "3": "Right",
        "Center": 2,
        "Left": 1,
        "Right": 3,
      },
      "InjectedTextCursorStops": {
        "0": "Both",
        "1": "Right",
        "2": "Left",
        "3": "None",
        "Both": 0,
        "Left": 2,
        "None": 3,
        "Right": 1,
      },
      "MinimapPosition": {
        "1": "Inline",
        "2": "Gutter",
        "Gutter": 2,
        "Inline": 1,
      },
      "MinimapSectionHeaderStyle": {
        "1": "Normal",
        "2": "Underlined",
        "Normal": 1,
        "Underlined": 2,
      },
      "MouseTargetType": {
        "0": "UNKNOWN",
        "1": "TEXTAREA",
        "10": "OVERVIEW_RULER",
        "11": "SCROLLBAR",
        "12": "OVERLAY_WIDGET",
        "13": "OUTSIDE_EDITOR",
        "2": "GUTTER_GLYPH_MARGIN",
        "3": "GUTTER_LINE_NUMBERS",
        "4": "GUTTER_LINE_DECORATIONS",
        "5": "GUTTER_VIEW_ZONE",
        "6": "CONTENT_TEXT",
        "7": "CONTENT_EMPTY",
        "8": "CONTENT_VIEW_ZONE",
        "9": "CONTENT_WIDGET",
        "CONTENT_EMPTY": 7,
        "CONTENT_TEXT": 6,
        "CONTENT_VIEW_ZONE": 8,
        "CONTENT_WIDGET": 9,
        "GUTTER_GLYPH_MARGIN": 2,
        "GUTTER_LINE_DECORATIONS": 4,
        "GUTTER_LINE_NUMBERS": 3,
        "GUTTER_VIEW_ZONE": 5,
        "OUTSIDE_EDITOR": 13,
        "OVERLAY_WIDGET": 12,
        "OVERVIEW_RULER": 10,
        "SCROLLBAR": 11,
        "TEXTAREA": 1,
        "UNKNOWN": 0,
      },
      "OverlayWidgetPositionPreference": {
        "0": "TOP_RIGHT_CORNER",
        "1": "BOTTOM_RIGHT_CORNER",
        "2": "TOP_CENTER",
        "BOTTOM_RIGHT_CORNER": 1,
        "TOP_CENTER": 2,
        "TOP_RIGHT_CORNER": 0,
      },
      "OverviewRulerLane": {
        "1": "Left",
        "2": "Center",
        "4": "Right",
        "7": "Full",
        "Center": 2,
        "Full": 7,
        "Left": 1,
        "Right": 4,
      },
      "PositionAffinity": {
        "0": "Left",
        "1": "Right",
        "2": "None",
        "3": "LeftOfInjectedText",
        "4": "RightOfInjectedText",
        "Left": 0,
        "LeftOfInjectedText": 3,
        "None": 2,
        "Right": 1,
        "RightOfInjectedText": 4,
      },
      "RenderLineNumbersType": {
        "0": "Off",
        "1": "On",
        "2": "Relative",
        "3": "Interval",
        "4": "Custom",
        "Custom": 4,
        "Interval": 3,
        "Off": 0,
        "On": 1,
        "Relative": 2,
      },
      "RenderMinimap": {
        "0": "None",
        "1": "Text",
        "2": "Blocks",
        "Blocks": 2,
        "None": 0,
        "Text": 1,
      },
      "ScrollType": {
        "0": "Smooth",
        "1": "Immediate",
        "Immediate": 1,
        "Smooth": 0,
      },
      "ScrollbarVisibility": {
        "1": "Auto",
        "2": "Hidden",
        "3": "Visible",
        "Auto": 1,
        "Hidden": 2,
        "Visible": 3,
      },
      "ShowLightbulbIconMode": {
        "Off": "off",
        "On": "on",
        "OnCode": "onCode",
      },
      "TextEditorCursorBlinkingStyle": {
        "0": "Hidden",
        "1": "Blink",
        "2": "Smooth",
        "3": "Phase",
        "4": "Expand",
        "5": "Solid",
        "Blink": 1,
        "Expand": 4,
        "Hidden": 0,
        "Phase": 3,
        "Smooth": 2,
        "Solid": 5,
      },
      "TextEditorCursorStyle": {
        "1": "Line",
        "2": "Block",
        "3": "Underline",
        "4": "LineThin",
        "5": "BlockOutline",
        "6": "UnderlineThin",
        "Block": 2,
        "BlockOutline": 5,
        "Line": 1,
        "LineThin": 4,
        "Underline": 3,
        "UnderlineThin": 6,
      },
      "TextModelResolvedOptions": [Function],
      "TrackedRangeStickiness": {
        "0": "AlwaysGrowsWhenTypingAtEdges",
        "1": "NeverGrowsWhenTypingAtEdges",
        "2": "GrowsOnlyWhenTypingBefore",
        "3": "GrowsOnlyWhenTypingAfter",
        "AlwaysGrowsWhenTypingAtEdges": 0,
        "GrowsOnlyWhenTypingAfter": 3,
        "GrowsOnlyWhenTypingBefore": 2,
        "NeverGrowsWhenTypingAtEdges": 1,
      },
      "WrappingIndent": {
        "0": "None",
        "1": "Same",
        "2": "Indent",
        "3": "DeepIndent",
        "DeepIndent": 3,
        "Indent": 2,
        "None": 0,
        "Same": 1,
      },
      "addCommand": [Function],
      "addEditorAction": [Function],
      "addKeybindingRule": [Function],
      "addKeybindingRules": [Function],
      "colorize": [Function],
      "colorizeElement": [Function],
      "colorizeModelLine": [Function],
      "create": [Function],
      "createDiffEditor": [Function],
      "createModel": [Function],
      "createMultiFileDiffEditor": [Function],
      "createWebWorker": [Function],
      "defineTheme": [Function],
      "getDiffEditors": [Function],
      "getEditors": [Function],
      "getModel": [Function],
      "getModelMarkers": [Function],
      "getModels": [Function],
      "onDidChangeMarkers": [Function],
      "onDidChangeModelLanguage": [Function],
      "onDidCreateDiffEditor": [Function],
      "onDidCreateEditor": [Function],
      "onDidCreateModel": [Function],
      "onWillDisposeModel": [Function],
      "registerCommand": [Function],
      "registerEditorOpener": [Function],
      "registerLinkOpener": [Function],
      "remeasureFonts": [Function],
      "removeAllMarkers": [Function],
      "setModelLanguage": [Function],
      "setModelMarkers": [Function],
      "setTheme": [Function],
      "tokenize": [Function],
    },
    "languages": {
      "CodeActionTriggerType": {
        "1": "Invoke",
        "2": "Auto",
        "Auto": 2,
        "Invoke": 1,
      },
      "CompletionItemInsertTextRule": {
        "0": "None",
        "1": "KeepWhitespace",
        "4": "InsertAsSnippet",
        "InsertAsSnippet": 4,
        "KeepWhitespace": 1,
        "None": 0,
      },
      "CompletionItemKind": {
        "0": "Method",
        "1": "Function",
        "10": "Event",
        "11": "Operator",
        "12": "Unit",
        "13": "Value",
        "14": "Constant",
        "15": "Enum",
        "16": "EnumMember",
        "17": "Keyword",
        "18": "Text",
        "19": "Color",
        "2": "Constructor",
        "20": "File",
        "21": "Reference",
        "22": "Customcolor",
        "23": "Folder",
        "24": "TypeParameter",
        "25": "User",
        "26": "Issue",
        "27": "Snippet",
        "3": "Field",
        "4": "Variable",
        "5": "Class",
        "6": "Struct",
        "7": "Interface",
        "8": "Module",
        "9": "Property",
        "Class": 5,
        "Color": 19,
        "Constant": 14,
        "Constructor": 2,
        "Customcolor": 22,
        "Enum": 15,
        "EnumMember": 16,
        "Event": 10,
        "Field": 3,
        "File": 20,
        "Folder": 23,
        "Function": 1,
        "Interface": 7,
        "Issue": 26,
        "Keyword": 17,
        "Method": 0,
        "Module": 8,
        "Operator": 11,
        "Property": 9,
        "Reference": 21,
        "Snippet": 27,
        "Struct": 6,
        "Text": 18,
        "TypeParameter": 24,
        "Unit": 12,
        "User": 25,
        "Value": 13,
        "Variable": 4,
      },
      "CompletionItemTag": {
        "1": "Deprecated",
        "Deprecated": 1,
      },
      "CompletionTriggerKind": {
        "0": "Invoke",
        "1": "TriggerCharacter",
        "2": "TriggerForIncompleteCompletions",
        "Invoke": 0,
        "TriggerCharacter": 1,
        "TriggerForIncompleteCompletions": 2,
      },
      "DocumentHighlightKind": {
        "0": "Text",
        "1": "Read",
        "2": "Write",
        "Read": 1,
        "Text": 0,
        "Write": 2,
      },
      "FoldingRangeKind": [Function],
      "HoverVerbosityAction": {
        "0": "Increase",
        "1": "Decrease",
        "Decrease": 1,
        "Increase": 0,
      },
      "IndentAction": {
        "0": "None",
        "1": "Indent",
        "2": "IndentOutdent",
        "3": "Outdent",
        "Indent": 1,
        "IndentOutdent": 2,
        "None": 0,
        "Outdent": 3,
      },
      "InlayHintKind": {
        "1": "Type",
        "2": "Parameter",
        "Parameter": 2,
        "Type": 1,
      },
      "InlineCompletionTriggerKind": {
        "0": "Automatic",
        "1": "Explicit",
        "Automatic": 0,
        "Explicit": 1,
      },
      "InlineEditTriggerKind": {
        "0": "Invoke",
        "1": "Automatic",
        "Automatic": 1,
        "Invoke": 0,
      },
      "NewSymbolNameTag": {
        "1": "AIGenerated",
        "AIGenerated": 1,
      },
      "NewSymbolNameTriggerKind": {
        "0": "Invoke",
        "1": "Automatic",
        "Automatic": 1,
        "Invoke": 0,
      },
      "PartialAcceptTriggerKind": {
        "0": "Word",
        "1": "Line",
        "2": "Suggest",
        "Line": 1,
        "Suggest": 2,
        "Word": 0,
      },
      "SelectedSuggestionInfo": [Function],
      "SignatureHelpTriggerKind": {
        "1": "Invoke",
        "2": "TriggerCharacter",
        "3": "ContentChange",
        "ContentChange": 3,
        "Invoke": 1,
        "TriggerCharacter": 2,
      },
      "SymbolKind": {
        "0": "File",
        "1": "Module",
        "10": "Interface",
        "11": "Function",
        "12": "Variable",
        "13": "Constant",
        "14": "String",
        "15": "Number",
        "16": "Boolean",
        "17": "Array",
        "18": "Object",
        "19": "Key",
        "2": "Namespace",
        "20": "Null",
        "21": "EnumMember",
        "22": "Struct",
        "23": "Event",
        "24": "Operator",
        "25": "TypeParameter",
        "3": "Package",
        "4": "Class",
        "5": "Method",
        "6": "Property",
        "7": "Field",
        "8": "Constructor",
        "9": "Enum",
        "Array": 17,
        "Boolean": 16,
        "Class": 4,
        "Constant": 13,
        "Constructor": 8,
        "Enum": 9,
        "EnumMember": 21,
        "Event": 23,
        "Field": 7,
        "File": 0,
        "Function": 11,
        "Interface": 10,
        "Key": 19,
        "Method": 5,
        "Module": 1,
        "Namespace": 2,
        "Null": 20,
        "Number": 15,
        "Object": 18,
        "Operator": 24,
        "Package": 3,
        "Property": 6,
        "String": 14,
        "Struct": 22,
        "TypeParameter": 25,
        "Variable": 12,
      },
      "SymbolTag": {
        "1": "Deprecated",
        "Deprecated": 1,
      },
      "getEncodedLanguageId": [Function],
      "getLanguages": [Function],
      "onLanguage": [Function],
      "onLanguageEncountered": [Function],
      "register": [Function],
      "registerCodeActionProvider": [Function],
      "registerCodeLensProvider": [Function],
      "registerColorProvider": [Function],
      "registerCompletionItemProvider": [Function],
      "registerDeclarationProvider": [Function],
      "registerDefinitionProvider": [Function],
      "registerDocumentFormattingEditProvider": [Function],
      "registerDocumentHighlightProvider": [Function],
      "registerDocumentRangeFormattingEditProvider": [Function],
      "registerDocumentRangeSemanticTokensProvider": [Function],
      "registerDocumentSemanticTokensProvider": [Function],
      "registerDocumentSymbolProvider": [Function],
      "registerFoldingRangeProvider": [Function],
      "registerHoverProvider": [Function],
      "registerImplementationProvider": [Function],
      "registerInlayHintsProvider": [Function],
      "registerInlineCompletionsProvider": [Function],
      "registerInlineEditProvider": [Function],
      "registerLinkProvider": [Function],
      "registerLinkedEditingRangeProvider": [Function],
      "registerNewSymbolNameProvider": [Function],
      "registerOnTypeFormattingEditProvider": [Function],
      "registerReferenceProvider": [Function],
      "registerRenameProvider": [Function],
      "registerSelectionRangeProvider": [Function],
      "registerSignatureHelpProvider": [Function],
      "registerTokensProviderFactory": [Function],
      "registerTypeDefinitionProvider": [Function],
      "setColorMap": [Function],
      "setLanguageConfiguration": [Function],
      "setMonarchTokensProvider": [Function],
      "setTokensProvider": [Function],
    },
  },
  "MuiCore": {
    "Accordion": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "TransitionComponent": [Function],
        "TransitionProps": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "defaultExpanded": [Function],
        "disableGutters": [Function],
        "disabled": [Function],
        "expanded": [Function],
        "onChange": [Function],
        "slotProps": [Function],
        "slots": [Function],
        "square": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "AccordionActions": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "disableSpacing": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "AccordionDetails": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "AccordionSummary": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "expandIcon": [Function],
        "focusVisibleClassName": [Function],
        "onClick": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "Alert": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "action": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "closeText": [Function],
        "color": [Function],
        "components": [Function],
        "componentsProps": [Function],
        "icon": [Function],
        "iconMapping": [Function],
        "onClose": [Function],
        "role": [Function],
        "severity": [Function],
        "slotProps": [Function],
        "slots": [Function],
        "sx": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "AlertTitle": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "AppBar": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "enableColorOnDark": [Function],
        "position": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "Autocomplete": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "ChipProps": [Function],
        "ListboxComponent": [Function],
        "ListboxProps": [Function],
        "PaperComponent": [Function],
        "PopperComponent": [Function],
        "autoComplete": [Function],
        "autoHighlight": [Function],
        "autoSelect": [Function],
        "blurOnSelect": [Function],
        "className": [Function],
        "classes": [Function],
        "clearIcon": [Function],
        "clearOnBlur": [Function],
        "clearOnEscape": [Function],
        "clearText": [Function],
        "closeText": [Function],
        "componentsProps": [Function],
        "defaultValue": [Function],
        "disableClearable": [Function],
        "disableCloseOnSelect": [Function],
        "disableListWrap": [Function],
        "disablePortal": [Function],
        "disabled": [Function],
        "disabledItemsFocusable": [Function],
        "filterOptions": [Function],
        "filterSelectedOptions": [Function],
        "forcePopupIcon": [Function],
        "freeSolo": [Function],
        "fullWidth": [Function],
        "getLimitTagsText": [Function],
        "getOptionDisabled": [Function],
        "getOptionKey": [Function],
        "getOptionLabel": [Function],
        "groupBy": [Function],
        "handleHomeEndKeys": [Function],
        "id": [Function],
        "includeInputInList": [Function],
        "inputValue": [Function],
        "isOptionEqualToValue": [Function],
        "limitTags": [Function],
        "loading": [Function],
        "loadingText": [Function],
        "multiple": [Function],
        "noOptionsText": [Function],
        "onChange": [Function],
        "onClose": [Function],
        "onHighlightChange": [Function],
        "onInputChange": [Function],
        "onKeyDown": [Function],
        "onOpen": [Function],
        "open": [Function],
        "openOnFocus": [Function],
        "openText": [Function],
        "options": [Function],
        "popupIcon": [Function],
        "readOnly": [Function],
        "renderGroup": [Function],
        "renderInput": [Function],
        "renderOption": [Function],
        "renderTags": [Function],
        "selectOnFocus": [Function],
        "size": [Function],
        "slotProps": [Function],
        "sx": [Function],
        "value": [Function],
      },
      "render": [Function],
    },
    "Avatar": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "alt": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "imgProps": [Function],
        "sizes": [Function],
        "slotProps": [Function],
        "slots": [Function],
        "src": [Function],
        "srcSet": [Function],
        "sx": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "AvatarGroup": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "componentsProps": [Function],
        "max": [Function],
        "renderSurplus": [Function],
        "slotProps": [Function],
        "spacing": [Function],
        "sx": [Function],
        "total": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "Backdrop": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "TransitionComponent": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "components": [Function],
        "componentsProps": [Function],
        "invisible": [Function],
        "open": [Function],
        "slotProps": [Function],
        "slots": [Function],
        "sx": [Function],
        "transitionDuration": [Function],
      },
      "render": [Function],
    },
    "Badge": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "anchorOrigin": [Function],
        "badgeContent": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "component": [Function],
        "components": [Function],
        "componentsProps": [Function],
        "invisible": [Function],
        "max": [Function],
        "overlap": [Function],
        "showZero": [Function],
        "slotProps": [Function],
        "slots": [Function],
        "sx": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "BottomNavigation": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "onChange": [Function],
        "showLabels": [Function],
        "sx": [Function],
        "value": [Function],
      },
      "render": [Function],
    },
    "BottomNavigationAction": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "icon": [Function],
        "label": [Function],
        "onChange": [Function],
        "onClick": [Function],
        "showLabel": [Function],
        "sx": [Function],
        "value": [Function],
      },
      "render": [Function],
    },
    "Box": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "component": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "Breadcrumbs": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "expandText": [Function],
        "itemsAfterCollapse": [Function],
        "itemsBeforeCollapse": [Function],
        "maxItems": [Function],
        "separator": [Function],
        "slotProps": [Function],
        "slots": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "Button": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "component": [Function],
        "disableElevation": [Function],
        "disableFocusRipple": [Function],
        "disableRipple": [Function],
        "disabled": [Function],
        "endIcon": [Function],
        "focusVisibleClassName": [Function],
        "fullWidth": [Function],
        "href": [Function],
        "size": [Function],
        "startIcon": [Function],
        "sx": [Function],
        "type": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "ButtonBase": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "LinkComponent": [Function],
        "TouchRippleProps": [Function],
        "action": [Function],
        "centerRipple": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "disableRipple": [Function],
        "disableTouchRipple": [Function],
        "disabled": [Function],
        "focusRipple": [Function],
        "focusVisibleClassName": [Function],
        "href": [Function],
        "onBlur": [Function],
        "onClick": [Function],
        "onContextMenu": [Function],
        "onDragLeave": [Function],
        "onFocus": [Function],
        "onFocusVisible": [Function],
        "onKeyDown": [Function],
        "onKeyUp": [Function],
        "onMouseDown": [Function],
        "onMouseLeave": [Function],
        "onMouseUp": [Function],
        "onTouchEnd": [Function],
        "onTouchMove": [Function],
        "onTouchStart": [Function],
        "sx": [Function],
        "tabIndex": [Function],
        "touchRippleRef": [Function],
        "type": [Function],
      },
      "render": [Function],
    },
    "ButtonGroup": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "component": [Function],
        "disableElevation": [Function],
        "disableFocusRipple": [Function],
        "disableRipple": [Function],
        "disabled": [Function],
        "fullWidth": [Function],
        "orientation": [Function],
        "size": [Function],
        "sx": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "ButtonGroupButtonContext": {
      "$$typeof": Symbol(react.context),
      "Consumer": {
        "$$typeof": Symbol(react.context),
        "_context": [Circular],
      },
      "Provider": {
        "$$typeof": Symbol(react.provider),
        "_context": [Circular],
      },
      "_currentRenderer": null,
      "_currentRenderer2": null,
      "_currentValue": undefined,
      "_currentValue2": undefined,
      "_defaultValue": null,
      "_globalName": null,
      "_threadCount": 0,
      "displayName": "ButtonGroupButtonContext",
    },
    "ButtonGroupContext": {
      "$$typeof": Symbol(react.context),
      "Consumer": {
        "$$typeof": Symbol(react.context),
        "_context": [Circular],
      },
      "Provider": {
        "$$typeof": Symbol(react.provider),
        "_context": [Circular],
      },
      "_currentRenderer": null,
      "_currentRenderer2": null,
      "_currentValue": {},
      "_currentValue2": {},
      "_defaultValue": null,
      "_globalName": null,
      "_threadCount": 0,
      "displayName": "ButtonGroupContext",
    },
    "Card": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "raised": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "CardActionArea": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "focusVisibleClassName": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "CardActions": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "disableSpacing": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "CardContent": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "CardHeader": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "action": [Function],
        "avatar": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "disableTypography": [Function],
        "subheader": [Function],
        "subheaderTypographyProps": [Function],
        "sx": [Function],
        "title": [Function],
        "titleTypographyProps": [Function],
      },
      "render": [Function],
    },
    "CardMedia": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "image": [Function],
        "src": [Function],
        "style": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "Checkbox": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "checked": [Function],
        "checkedIcon": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "defaultChecked": [Function],
        "disableRipple": [Function],
        "disabled": [Function],
        "icon": [Function],
        "id": [Function],
        "indeterminate": [Function],
        "indeterminateIcon": [Function],
        "inputProps": [Function],
        "inputRef": [Function],
        "onChange": [Function],
        "required": [Function],
        "size": [Function],
        "sx": [Function],
        "value": [Function],
      },
      "render": [Function],
    },
    "Chip": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "avatar": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "clickable": [Function],
        "color": [Function],
        "component": [Function],
        "deleteIcon": [Function],
        "disabled": [Function],
        "icon": [Function],
        "label": [Function],
        "onClick": [Function],
        "onDelete": [Function],
        "onKeyDown": [Function],
        "onKeyUp": [Function],
        "size": [Function],
        "skipFocusWhenDisabled": [Function],
        "sx": [Function],
        "tabIndex": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "CircularProgress": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "disableShrink": [Function],
        "size": [Function],
        "style": [Function],
        "sx": [Function],
        "thickness": [Function],
        "value": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "ClickAwayListener": [Function],
    "Collapse": {
      "$$typeof": Symbol(react.forward_ref),
      "muiSupportAuto": true,
      "propTypes": {
        "addEndListener": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "collapsedSize": [Function],
        "component": [Function],
        "easing": [Function],
        "in": [Function],
        "onEnter": [Function],
        "onEntered": [Function],
        "onEntering": [Function],
        "onExit": [Function],
        "onExited": [Function],
        "onExiting": [Function],
        "orientation": [Function],
        "style": [Function],
        "sx": [Function],
        "timeout": [Function],
      },
      "render": [Function],
    },
    "Container": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "classes": [Function],
        "component": [Function],
        "disableGutters": [Function],
        "fixed": [Function],
        "maxWidth": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "CssBaseline": [Function],
    "Dialog": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "BackdropComponent": [Function],
        "BackdropProps": [Function],
        "PaperComponent": [Function],
        "PaperProps": [Function],
        "TransitionComponent": [Function],
        "TransitionProps": [Function],
        "aria-describedby": [Function],
        "aria-labelledby": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "disableEscapeKeyDown": [Function],
        "fullScreen": [Function],
        "fullWidth": [Function],
        "maxWidth": [Function],
        "onBackdropClick": [Function],
        "onClick": [Function],
        "onClose": [Function],
        "open": [Function],
        "scroll": [Function],
        "sx": [Function],
        "transitionDuration": [Function],
      },
      "render": [Function],
    },
    "DialogActions": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "disableSpacing": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "DialogContent": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "dividers": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "DialogContentText": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "DialogTitle": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "id": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "Divider": {
      "$$typeof": Symbol(react.forward_ref),
      "muiSkipListHighlight": true,
      "propTypes": {
        "absolute": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "flexItem": [Function],
        "light": [Function],
        "orientation": [Function],
        "role": [Function],
        "sx": [Function],
        "textAlign": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "Drawer": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "BackdropProps": [Function],
        "ModalProps": [Function],
        "PaperProps": [Function],
        "SlideProps": [Function],
        "anchor": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "elevation": [Function],
        "hideBackdrop": [Function],
        "onClose": [Function],
        "open": [Function],
        "sx": [Function],
        "transitionDuration": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "Experimental_CssVarsProvider": [Function],
    "Fab": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "component": [Function],
        "disableFocusRipple": [Function],
        "disableRipple": [Function],
        "disabled": [Function],
        "focusVisibleClassName": [Function],
        "href": [Function],
        "size": [Function],
        "sx": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "Fade": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "addEndListener": [Function],
        "appear": [Function],
        "children": [Function],
        "easing": [Function],
        "in": [Function],
        "onEnter": [Function],
        "onEntered": [Function],
        "onEntering": [Function],
        "onExit": [Function],
        "onExited": [Function],
        "onExiting": [Function],
        "style": [Function],
        "timeout": [Function],
      },
      "render": [Function],
    },
    "FilledInput": {
      "$$typeof": Symbol(react.forward_ref),
      "muiName": "Input",
      "propTypes": {
        "autoComplete": [Function],
        "autoFocus": [Function],
        "classes": [Function],
        "color": [Function],
        "components": [Function],
        "componentsProps": [Function],
        "defaultValue": [Function],
        "disableUnderline": [Function],
        "disabled": [Function],
        "endAdornment": [Function],
        "error": [Function],
        "fullWidth": [Function],
        "hiddenLabel": [Function],
        "id": [Function],
        "inputComponent": [Function],
        "inputProps": [Function],
        "inputRef": [Function],
        "margin": [Function],
        "maxRows": [Function],
        "minRows": [Function],
        "multiline": [Function],
        "name": [Function],
        "onChange": [Function],
        "placeholder": [Function],
        "readOnly": [Function],
        "required": [Function],
        "rows": [Function],
        "slotProps": [Function],
        "slots": [Function],
        "startAdornment": [Function],
        "sx": [Function],
        "type": [Function],
        "value": [Function],
      },
      "render": [Function],
    },
    "FormControl": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "component": [Function],
        "disabled": [Function],
        "error": [Function],
        "focused": [Function],
        "fullWidth": [Function],
        "hiddenLabel": [Function],
        "margin": [Function],
        "required": [Function],
        "size": [Function],
        "sx": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "FormControlLabel": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "checked": [Function],
        "className": [Function],
        "classes": [Function],
        "componentsProps": [Function],
        "control": [Function],
        "disableTypography": [Function],
        "disabled": [Function],
        "inputRef": [Function],
        "label": [Function],
        "labelPlacement": [Function],
        "name": [Function],
        "onChange": [Function],
        "required": [Function],
        "slotProps": [Function],
        "sx": [Function],
        "value": [Function],
      },
      "render": [Function],
    },
    "FormGroup": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "row": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "FormHelperText": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "disabled": [Function],
        "error": [Function],
        "filled": [Function],
        "focused": [Function],
        "margin": [Function],
        "required": [Function],
        "sx": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "FormLabel": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "component": [Function],
        "disabled": [Function],
        "error": [Function],
        "filled": [Function],
        "focused": [Function],
        "required": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "FormLabelRoot": {
      "$$typeof": Symbol(react.forward_ref),
      "__emotion_base": "label",
      "__emotion_forwardProp": [Function],
      "__emotion_real": [Circular],
      "__emotion_styles": [
        "label:MuiFormLabel-root;",
        [Function],
        [Function],
        [Function],
        [Function],
      ],
      "defaultProps": undefined,
      "render": [Function],
      "withComponent": [Function],
    },
    "GlobalStyles": [Function],
    "Grid": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "columnSpacing": [Function],
        "columns": [Function],
        "component": [Function],
        "container": [Function],
        "direction": [Function],
        "item": [Function],
        "lg": [Function],
        "md": [Function],
        "rowSpacing": [Function],
        "sm": [Function],
        "spacing": [Function],
        "sx": [Function],
        "wrap": [Function],
        "xl": [Function],
        "xs": [Function],
        "zeroMinWidth": [Function],
      },
      "render": [Function],
    },
    "Grow": {
      "$$typeof": Symbol(react.forward_ref),
      "muiSupportAuto": true,
      "propTypes": {
        "addEndListener": [Function],
        "appear": [Function],
        "children": [Function],
        "easing": [Function],
        "in": [Function],
        "onEnter": [Function],
        "onEntered": [Function],
        "onEntering": [Function],
        "onExit": [Function],
        "onExited": [Function],
        "onExiting": [Function],
        "style": [Function],
        "timeout": [Function],
      },
      "render": [Function],
    },
    "Hidden": [Function],
    "Icon": {
      "$$typeof": Symbol(react.forward_ref),
      "muiName": "Icon",
      "propTypes": {
        "baseClassName": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "component": [Function],
        "fontSize": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "IconButton": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "disableFocusRipple": [Function],
        "disableRipple": [Function],
        "disabled": [Function],
        "edge": [Function],
        "size": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "ImageList": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "cols": [Function],
        "component": [Function],
        "gap": [Function],
        "rowHeight": [Function],
        "style": [Function],
        "sx": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "ImageListItem": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "cols": [Function],
        "component": [Function],
        "rows": [Function],
        "style": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "ImageListItemBar": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "actionIcon": [Function],
        "actionPosition": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "position": [Function],
        "subtitle": [Function],
        "sx": [Function],
        "title": [Function],
      },
      "render": [Function],
    },
    "Input": {
      "$$typeof": Symbol(react.forward_ref),
      "muiName": "Input",
      "propTypes": {
        "autoComplete": [Function],
        "autoFocus": [Function],
        "classes": [Function],
        "color": [Function],
        "components": [Function],
        "componentsProps": [Function],
        "defaultValue": [Function],
        "disableUnderline": [Function],
        "disabled": [Function],
        "endAdornment": [Function],
        "error": [Function],
        "fullWidth": [Function],
        "id": [Function],
        "inputComponent": [Function],
        "inputProps": [Function],
        "inputRef": [Function],
        "margin": [Function],
        "maxRows": [Function],
        "minRows": [Function],
        "multiline": [Function],
        "name": [Function],
        "onChange": [Function],
        "placeholder": [Function],
        "readOnly": [Function],
        "required": [Function],
        "rows": [Function],
        "slotProps": [Function],
        "slots": [Function],
        "startAdornment": [Function],
        "sx": [Function],
        "type": [Function],
        "value": [Function],
      },
      "render": [Function],
    },
    "InputAdornment": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "disablePointerEvents": [Function],
        "disableTypography": [Function],
        "position": [Function],
        "sx": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "InputBase": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "aria-describedby": [Function],
        "autoComplete": [Function],
        "autoFocus": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "components": [Function],
        "componentsProps": [Function],
        "defaultValue": [Function],
        "disableInjectingGlobalStyles": [Function],
        "disabled": [Function],
        "endAdornment": [Function],
        "error": [Function],
        "fullWidth": [Function],
        "id": [Function],
        "inputComponent": [Function],
        "inputProps": [Function],
        "inputRef": [Function],
        "margin": [Function],
        "maxRows": [Function],
        "minRows": [Function],
        "multiline": [Function],
        "name": [Function],
        "onBlur": [Function],
        "onChange": [Function],
        "onClick": [Function],
        "onFocus": [Function],
        "onInvalid": [Function],
        "onKeyDown": [Function],
        "onKeyUp": [Function],
        "placeholder": [Function],
        "readOnly": [Function],
        "renderSuffix": [Function],
        "required": [Function],
        "rows": [Function],
        "size": [Function],
        "slotProps": [Function],
        "slots": [Function],
        "startAdornment": [Function],
        "sx": [Function],
        "type": [Function],
        "value": [Function],
      },
      "render": [Function],
    },
    "InputLabel": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "disableAnimation": [Function],
        "disabled": [Function],
        "error": [Function],
        "focused": [Function],
        "margin": [Function],
        "required": [Function],
        "shrink": [Function],
        "size": [Function],
        "sx": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "LinearProgress": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "sx": [Function],
        "value": [Function],
        "valueBuffer": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "Link": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "TypographyClasses": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "component": [Function],
        "onBlur": [Function],
        "onFocus": [Function],
        "sx": [Function],
        "underline": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "List": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "dense": [Function],
        "disablePadding": [Function],
        "subheader": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "ListItem": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "ContainerComponent": [Function],
        "ContainerProps": [Function],
        "alignItems": [Function],
        "autoFocus": [Function],
        "button": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "components": [Function],
        "componentsProps": [Function],
        "dense": [Function],
        "disableGutters": [Function],
        "disablePadding": [Function],
        "disabled": [Function],
        "divider": [Function],
        "focusVisibleClassName": [Function],
        "secondaryAction": [Function],
        "selected": [Function],
        "slotProps": [Function],
        "slots": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "ListItemAvatar": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "ListItemButton": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "alignItems": [Function],
        "autoFocus": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "dense": [Function],
        "disableGutters": [Function],
        "disabled": [Function],
        "divider": [Function],
        "focusVisibleClassName": [Function],
        "href": [Function],
        "selected": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "ListItemIcon": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "ListItemSecondaryAction": {
      "$$typeof": Symbol(react.forward_ref),
      "muiName": "ListItemSecondaryAction",
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "ListItemText": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "disableTypography": [Function],
        "inset": [Function],
        "primary": [Function],
        "primaryTypographyProps": [Function],
        "secondary": [Function],
        "secondaryTypographyProps": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "ListSubheader": {
      "$$typeof": Symbol(react.forward_ref),
      "muiSkipListHighlight": true,
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "component": [Function],
        "disableGutters": [Function],
        "disableSticky": [Function],
        "inset": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "Menu": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "MenuListProps": [Function],
        "PaperProps": [Function],
        "PopoverClasses": [Function],
        "TransitionProps": [Function],
        "anchorEl": [Function],
        "autoFocus": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "disableAutoFocusItem": [Function],
        "onClose": [Function],
        "open": [Function],
        "slotProps": [Function],
        "slots": [Function],
        "sx": [Function],
        "transitionDuration": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "MenuItem": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "autoFocus": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "dense": [Function],
        "disableGutters": [Function],
        "disabled": [Function],
        "divider": [Function],
        "focusVisibleClassName": [Function],
        "role": [Function],
        "selected": [Function],
        "sx": [Function],
        "tabIndex": [Function],
      },
      "render": [Function],
    },
    "MenuList": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "autoFocus": [Function],
        "autoFocusItem": [Function],
        "children": [Function],
        "className": [Function],
        "disableListWrap": [Function],
        "disabledItemsFocusable": [Function],
        "onKeyDown": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "MobileStepper": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "LinearProgressProps": [Function],
        "activeStep": [Function],
        "backButton": [Function],
        "className": [Function],
        "classes": [Function],
        "nextButton": [Function],
        "position": [Function],
        "steps": [Function],
        "sx": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "Modal": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "BackdropComponent": [Function],
        "BackdropProps": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "closeAfterTransition": [Function],
        "component": [Function],
        "components": [Function],
        "componentsProps": [Function],
        "container": [Function],
        "disableAutoFocus": [Function],
        "disableEnforceFocus": [Function],
        "disableEscapeKeyDown": [Function],
        "disablePortal": [Function],
        "disableRestoreFocus": [Function],
        "disableScrollLock": [Function],
        "hideBackdrop": [Function],
        "keepMounted": [Function],
        "onBackdropClick": [Function],
        "onClose": [Function],
        "onTransitionEnter": [Function],
        "onTransitionExited": [Function],
        "open": [Function],
        "slotProps": [Function],
        "slots": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "ModalManager": [Function],
    "NativeSelect": {
      "$$typeof": Symbol(react.forward_ref),
      "muiName": "Select",
      "propTypes": {
        "IconComponent": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "input": [Function],
        "inputProps": [Function],
        "onChange": [Function],
        "sx": [Function],
        "value": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "NoSsr": [Function],
    "OutlinedInput": {
      "$$typeof": Symbol(react.forward_ref),
      "muiName": "Input",
      "propTypes": {
        "autoComplete": [Function],
        "autoFocus": [Function],
        "classes": [Function],
        "color": [Function],
        "components": [Function],
        "defaultValue": [Function],
        "disabled": [Function],
        "endAdornment": [Function],
        "error": [Function],
        "fullWidth": [Function],
        "id": [Function],
        "inputComponent": [Function],
        "inputProps": [Function],
        "inputRef": [Function],
        "label": [Function],
        "margin": [Function],
        "maxRows": [Function],
        "minRows": [Function],
        "multiline": [Function],
        "name": [Function],
        "notched": [Function],
        "onChange": [Function],
        "placeholder": [Function],
        "readOnly": [Function],
        "required": [Function],
        "rows": [Function],
        "slots": [Function],
        "startAdornment": [Function],
        "sx": [Function],
        "type": [Function],
        "value": [Function],
      },
      "render": [Function],
    },
    "Pagination": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "boundaryCount": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "count": [Function],
        "defaultPage": [Function],
        "disabled": [Function],
        "getItemAriaLabel": [Function],
        "hideNextButton": [Function],
        "hidePrevButton": [Function],
        "onChange": [Function],
        "page": [Function],
        "renderItem": [Function],
        "shape": [Function],
        "showFirstButton": [Function],
        "showLastButton": [Function],
        "siblingCount": [Function],
        "size": [Function],
        "sx": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "PaginationItem": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "component": [Function],
        "components": [Function],
        "disabled": [Function],
        "page": [Function],
        "selected": [Function],
        "shape": [Function],
        "size": [Function],
        "slots": [Function],
        "sx": [Function],
        "type": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "Paper": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "elevation": [Function],
        "square": [Function],
        "sx": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "Popover": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "PaperProps": [Function],
        "TransitionComponent": [Function],
        "TransitionProps": [Function],
        "action": [Function],
        "anchorEl": [Function],
        "anchorOrigin": [Function],
        "anchorPosition": [Function],
        "anchorReference": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "container": [Function],
        "disableScrollLock": [Function],
        "elevation": [Function],
        "marginThreshold": [Function],
        "onClose": [Function],
        "open": [Function],
        "slotProps": [Function],
        "slots": [Function],
        "sx": [Function],
        "transformOrigin": [Function],
        "transitionDuration": [Function],
      },
      "render": [Function],
    },
    "PopoverPaper": {
      "$$typeof": Symbol(react.forward_ref),
      "__emotion_base": {
        "$$typeof": Symbol(react.forward_ref),
        "propTypes": {
          "children": [Function],
          "className": [Function],
          "classes": [Function],
          "component": [Function],
          "elevation": [Function],
          "square": [Function],
          "sx": [Function],
          "variant": [Function],
        },
        "render": [Function],
      },
      "__emotion_forwardProp": [Function],
      "__emotion_real": [Circular],
      "__emotion_styles": [
        "label:MuiPopover-paper;",
        [Function],
        [Function],
      ],
      "defaultProps": undefined,
      "render": [Function],
      "withComponent": [Function],
    },
    "PopoverRoot": {
      "$$typeof": Symbol(react.forward_ref),
      "__emotion_base": {
        "$$typeof": Symbol(react.forward_ref),
        "propTypes": {
          "BackdropComponent": [Function],
          "BackdropProps": [Function],
          "children": [Function],
          "className": [Function],
          "classes": [Function],
          "closeAfterTransition": [Function],
          "component": [Function],
          "components": [Function],
          "componentsProps": [Function],
          "container": [Function],
          "disableAutoFocus": [Function],
          "disableEnforceFocus": [Function],
          "disableEscapeKeyDown": [Function],
          "disablePortal": [Function],
          "disableRestoreFocus": [Function],
          "disableScrollLock": [Function],
          "hideBackdrop": [Function],
          "keepMounted": [Function],
          "onBackdropClick": [Function],
          "onClose": [Function],
          "onTransitionEnter": [Function],
          "onTransitionExited": [Function],
          "open": [Function],
          "slotProps": [Function],
          "slots": [Function],
          "sx": [Function],
        },
        "render": [Function],
      },
      "__emotion_forwardProp": [Function],
      "__emotion_real": [Circular],
      "__emotion_styles": [
        "label:MuiPopover-root;",
        [Function],
        [Function],
        [Function],
        [Function],
      ],
      "defaultProps": undefined,
      "render": [Function],
      "withComponent": [Function],
    },
    "Popper": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "anchorEl": [Function],
        "children": [Function],
        "component": [Function],
        "components": [Function],
        "componentsProps": [Function],
        "container": [Function],
        "disablePortal": [Function],
        "keepMounted": [Function],
        "modifiers": [Function],
        "open": [Function],
        "placement": [Function],
        "popperOptions": [Function],
        "popperRef": [Function],
        "slotProps": [Function],
        "slots": [Function],
        "sx": [Function],
        "transition": [Function],
      },
      "render": [Function],
    },
    "Portal": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "container": [Function],
        "disablePortal": [Function],
        "exact-prop: ​": [Function],
      },
      "render": [Function],
    },
    "Radio": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "checked": [Function],
        "checkedIcon": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "disableRipple": [Function],
        "disabled": [Function],
        "icon": [Function],
        "id": [Function],
        "inputProps": [Function],
        "inputRef": [Function],
        "name": [Function],
        "onChange": [Function],
        "required": [Function],
        "size": [Function],
        "sx": [Function],
        "value": [Function],
      },
      "render": [Function],
    },
    "RadioGroup": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "defaultValue": [Function],
        "name": [Function],
        "onChange": [Function],
        "value": [Function],
      },
      "render": [Function],
    },
    "Rating": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "IconContainerComponent": [Function],
        "className": [Function],
        "classes": [Function],
        "defaultValue": [Function],
        "disabled": [Function],
        "emptyIcon": [Function],
        "emptyLabelText": [Function],
        "getLabelText": [Function],
        "highlightSelectedOnly": [Function],
        "icon": [Function],
        "max": [Function],
        "name": [Function],
        "onChange": [Function],
        "onChangeActive": [Function],
        "onMouseLeave": [Function],
        "onMouseMove": [Function],
        "precision": [Function],
        "readOnly": [Function],
        "size": [Function],
        "sx": [Function],
        "value": [Function],
      },
      "render": [Function],
    },
    "ScopedCssBaseline": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "enableColorScheme": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "Select": {
      "$$typeof": Symbol(react.forward_ref),
      "muiName": "Select",
      "propTypes": {
        "IconComponent": [Function],
        "MenuProps": [Function],
        "SelectDisplayProps": [Function],
        "autoWidth": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "defaultOpen": [Function],
        "defaultValue": [Function],
        "displayEmpty": [Function],
        "id": [Function],
        "input": [Function],
        "inputProps": [Function],
        "label": [Function],
        "labelId": [Function],
        "multiple": [Function],
        "native": [Function],
        "onChange": [Function],
        "onClose": [Function],
        "onOpen": [Function],
        "open": [Function],
        "renderValue": [Function],
        "sx": [Function],
        "value": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "Skeleton": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "animation": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "height": [Function],
        "style": [Function],
        "sx": [Function],
        "variant": [Function],
        "width": [Function],
      },
      "render": [Function],
    },
    "Slide": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "addEndListener": [Function],
        "appear": [Function],
        "children": [Function],
        "container": [Function],
        "direction": [Function],
        "easing": [Function],
        "in": [Function],
        "onEnter": [Function],
        "onEntered": [Function],
        "onEntering": [Function],
        "onExit": [Function],
        "onExited": [Function],
        "onExiting": [Function],
        "style": [Function],
        "timeout": [Function],
      },
      "render": [Function],
    },
    "Slider": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "aria-label": [Function],
        "aria-labelledby": [Function],
        "aria-valuetext": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "components": [Function],
        "componentsProps": [Function],
        "defaultValue": [Function],
        "disableSwap": [Function],
        "disabled": [Function],
        "getAriaLabel": [Function],
        "getAriaValueText": [Function],
        "marks": [Function],
        "max": [Function],
        "min": [Function],
        "name": [Function],
        "onChange": [Function],
        "onChangeCommitted": [Function],
        "orientation": [Function],
        "scale": [Function],
        "shiftStep": [Function],
        "size": [Function],
        "slotProps": [Function],
        "slots": [Function],
        "step": [Function],
        "sx": [Function],
        "tabIndex": [Function],
        "track": [Function],
        "value": [Function],
        "valueLabelDisplay": [Function],
        "valueLabelFormat": [Function],
      },
      "render": [Function],
    },
    "SliderMark": {
      "$$typeof": Symbol(react.forward_ref),
      "__emotion_base": "span",
      "__emotion_forwardProp": [Function],
      "__emotion_real": [Circular],
      "__emotion_styles": [
        "label:MuiSlider-mark;",
        [Function],
        [Function],
        [Function],
      ],
      "defaultProps": undefined,
      "render": [Function],
      "withComponent": [Function],
    },
    "SliderMarkLabel": {
      "$$typeof": Symbol(react.forward_ref),
      "__emotion_base": "span",
      "__emotion_forwardProp": [Function],
      "__emotion_real": [Circular],
      "__emotion_styles": [
        "label:MuiSlider-markLabel;",
        [Function],
        [Function],
        [Function],
      ],
      "defaultProps": undefined,
      "render": [Function],
      "withComponent": [Function],
    },
    "SliderRail": {
      "$$typeof": Symbol(react.forward_ref),
      "__emotion_base": "span",
      "__emotion_forwardProp": [Function],
      "__emotion_real": [Circular],
      "__emotion_styles": [
        "label:MuiSlider-rail;",
        [Function],
        [Function],
        [Function],
      ],
      "defaultProps": undefined,
      "render": [Function],
      "withComponent": [Function],
    },
    "SliderRoot": {
      "$$typeof": Symbol(react.forward_ref),
      "__emotion_base": "span",
      "__emotion_forwardProp": [Function],
      "__emotion_real": [Circular],
      "__emotion_styles": [
        "label:MuiSlider-root;",
        [Function],
        [Function],
        [Function],
        [Function],
      ],
      "defaultProps": undefined,
      "render": [Function],
      "withComponent": [Function],
    },
    "SliderThumb": {
      "$$typeof": Symbol(react.forward_ref),
      "__emotion_base": "span",
      "__emotion_forwardProp": [Function],
      "__emotion_real": [Circular],
      "__emotion_styles": [
        "label:MuiSlider-thumb;",
        [Function],
        [Function],
        [Function],
      ],
      "defaultProps": undefined,
      "render": [Function],
      "withComponent": [Function],
    },
    "SliderTrack": {
      "$$typeof": Symbol(react.forward_ref),
      "__emotion_base": "span",
      "__emotion_forwardProp": [Function],
      "__emotion_real": [Circular],
      "__emotion_styles": [
        "label:MuiSlider-track;",
        [Function],
        [Function],
        [Function],
      ],
      "defaultProps": undefined,
      "render": [Function],
      "withComponent": [Function],
    },
    "SliderValueLabel": {
      "$$typeof": Symbol(react.forward_ref),
      "__emotion_base": [Function],
      "__emotion_forwardProp": [Function],
      "__emotion_real": [Circular],
      "__emotion_styles": [
        "label:MuiSlider-valueLabel;",
        [Function],
        [Function],
        [Function],
      ],
      "defaultProps": undefined,
      "render": [Function],
      "withComponent": [Function],
    },
    "Snackbar": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "ClickAwayListenerProps": [Function],
        "ContentProps": [Function],
        "TransitionComponent": [Function],
        "TransitionProps": [Function],
        "action": [Function],
        "anchorOrigin": [Function],
        "autoHideDuration": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "disableWindowBlurListener": [Function],
        "key": [Function],
        "message": [Function],
        "onBlur": [Function],
        "onClose": [Function],
        "onFocus": [Function],
        "onMouseEnter": [Function],
        "onMouseLeave": [Function],
        "open": [Function],
        "resumeHideDuration": [Function],
        "sx": [Function],
        "transitionDuration": [Function],
      },
      "render": [Function],
    },
    "SnackbarContent": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "action": [Function],
        "className": [Function],
        "classes": [Function],
        "message": [Function],
        "role": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "SpeedDial": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "FabProps": [Function],
        "TransitionComponent": [Function],
        "TransitionProps": [Function],
        "ariaLabel": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "direction": [Function],
        "hidden": [Function],
        "icon": [Function],
        "onBlur": [Function],
        "onClose": [Function],
        "onFocus": [Function],
        "onKeyDown": [Function],
        "onMouseEnter": [Function],
        "onMouseLeave": [Function],
        "onOpen": [Function],
        "open": [Function],
        "openIcon": [Function],
        "sx": [Function],
        "transitionDuration": [Function],
      },
      "render": [Function],
    },
    "SpeedDialAction": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "FabProps": [Function],
        "TooltipClasses": [Function],
        "className": [Function],
        "classes": [Function],
        "delay": [Function],
        "icon": [Function],
        "id": [Function],
        "open": [Function],
        "sx": [Function],
        "tooltipOpen": [Function],
        "tooltipPlacement": [Function],
        "tooltipTitle": [Function],
      },
      "render": [Function],
    },
    "SpeedDialIcon": {
      "$$typeof": Symbol(react.forward_ref),
      "muiName": "SpeedDialIcon",
      "propTypes": {
        "className": [Function],
        "classes": [Function],
        "icon": [Function],
        "open": [Function],
        "openIcon": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "Stack": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "component": [Function],
        "direction": [Function],
        "divider": [Function],
        "spacing": [Function],
        "sx": [Function],
        "useFlexGap": [Function],
      },
      "render": [Function],
    },
    "Step": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "active": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "completed": [Function],
        "component": [Function],
        "disabled": [Function],
        "expanded": [Function],
        "index": [Function],
        "last": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "StepButton": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "icon": [Function],
        "optional": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "StepConnector": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "className": [Function],
        "classes": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "StepContent": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "TransitionComponent": [Function],
        "TransitionProps": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "sx": [Function],
        "transitionDuration": [Function],
      },
      "render": [Function],
    },
    "StepContext": {
      "$$typeof": Symbol(react.context),
      "Consumer": {
        "$$typeof": Symbol(react.context),
        "_context": [Circular],
      },
      "Provider": {
        "$$typeof": Symbol(react.provider),
        "_context": [Circular],
      },
      "_currentRenderer": null,
      "_currentRenderer2": null,
      "_currentValue": {},
      "_currentValue2": {},
      "_defaultValue": null,
      "_globalName": null,
      "_threadCount": 0,
      "displayName": "StepContext",
    },
    "StepIcon": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "active": [Function],
        "className": [Function],
        "classes": [Function],
        "completed": [Function],
        "error": [Function],
        "icon": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "StepLabel": {
      "$$typeof": Symbol(react.forward_ref),
      "muiName": "StepLabel",
      "propTypes": {
        "StepIconComponent": [Function],
        "StepIconProps": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "componentsProps": [Function],
        "error": [Function],
        "icon": [Function],
        "optional": [Function],
        "slotProps": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "Stepper": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "activeStep": [Function],
        "alternativeLabel": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "connector": [Function],
        "nonLinear": [Function],
        "orientation": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "StepperContext": {
      "$$typeof": Symbol(react.context),
      "Consumer": {
        "$$typeof": Symbol(react.context),
        "_context": [Circular],
      },
      "Provider": {
        "$$typeof": Symbol(react.provider),
        "_context": [Circular],
      },
      "_currentRenderer": null,
      "_currentRenderer2": null,
      "_currentValue": {},
      "_currentValue2": {},
      "_defaultValue": null,
      "_globalName": null,
      "_threadCount": 0,
      "displayName": "StepperContext",
    },
    "StyledEngineProvider": [Function],
    "SvgIcon": {
      "$$typeof": Symbol(react.forward_ref),
      "muiName": "SvgIcon",
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "component": [Function],
        "fontSize": [Function],
        "htmlColor": [Function],
        "inheritViewBox": [Function],
        "shapeRendering": [Function],
        "sx": [Function],
        "titleAccess": [Function],
        "viewBox": [Function],
      },
      "render": [Function],
    },
    "SwipeableDrawer": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "ModalProps": [Function],
        "PaperProps": [Function],
        "SwipeAreaProps": [Function],
        "allowSwipeInChildren": [Function],
        "anchor": [Function],
        "children": [Function],
        "disableBackdropTransition": [Function],
        "disableDiscovery": [Function],
        "disableSwipeToOpen": [Function],
        "hideBackdrop": [Function],
        "hysteresis": [Function],
        "minFlingVelocity": [Function],
        "onClose": [Function],
        "onOpen": [Function],
        "open": [Function],
        "swipeAreaWidth": [Function],
        "transitionDuration": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "Switch": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "checked": [Function],
        "checkedIcon": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "defaultChecked": [Function],
        "disableRipple": [Function],
        "disabled": [Function],
        "edge": [Function],
        "icon": [Function],
        "id": [Function],
        "inputProps": [Function],
        "inputRef": [Function],
        "onChange": [Function],
        "required": [Function],
        "size": [Function],
        "sx": [Function],
        "value": [Function],
      },
      "render": [Function],
    },
    "THEME_ID": "$$material",
    "Tab": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "disableFocusRipple": [Function],
        "disableRipple": [Function],
        "disabled": [Function],
        "icon": [Function],
        "iconPosition": [Function],
        "label": [Function],
        "onChange": [Function],
        "onClick": [Function],
        "onFocus": [Function],
        "sx": [Function],
        "value": [Function],
        "wrapped": [Function],
      },
      "render": [Function],
    },
    "TabScrollButton": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "direction": [Function],
        "disabled": [Function],
        "orientation": [Function],
        "slotProps": [Function],
        "slots": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "Table": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "padding": [Function],
        "size": [Function],
        "stickyHeader": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "TableBody": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "TableCell": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "align": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "padding": [Function],
        "scope": [Function],
        "size": [Function],
        "sortDirection": [Function],
        "sx": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "TableContainer": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "TableFooter": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "TableHead": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "TablePagination": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "ActionsComponent": [Function],
        "SelectProps": [Function],
        "backIconButtonProps": [Function],
        "className": [Function],
        "classes": [Function],
        "colSpan": [Function],
        "component": [Function],
        "count": [Function],
        "disabled": [Function],
        "getItemAriaLabel": [Function],
        "labelDisplayedRows": [Function],
        "labelRowsPerPage": [Function],
        "nextIconButtonProps": [Function],
        "onPageChange": [Function],
        "onRowsPerPageChange": [Function],
        "page": [Function],
        "rowsPerPage": [Function],
        "rowsPerPageOptions": [Function],
        "showFirstButton": [Function],
        "showLastButton": [Function],
        "slotProps": [Function],
        "slots": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "TableRow": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "hover": [Function],
        "selected": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "TableSortLabel": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "IconComponent": [Function],
        "active": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "direction": [Function],
        "hideSortIcon": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "Tabs": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "ScrollButtonComponent": [Function],
        "TabIndicatorProps": [Function],
        "TabScrollButtonProps": [Function],
        "action": [Function],
        "allowScrollButtonsMobile": [Function],
        "aria-label": [Function],
        "aria-labelledby": [Function],
        "centered": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "indicatorColor": [Function],
        "onChange": [Function],
        "orientation": [Function],
        "scrollButtons": [Function],
        "selectionFollowsFocus": [Function],
        "slotProps": [Function],
        "slots": [Function],
        "sx": [Function],
        "textColor": [Function],
        "value": [Function],
        "variant": [Function],
        "visibleScrollbar": [Function],
      },
      "render": [Function],
    },
    "TextField": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "FormHelperTextProps": [Function],
        "InputLabelProps": [Function],
        "InputProps": [Function],
        "SelectProps": [Function],
        "autoComplete": [Function],
        "autoFocus": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "defaultValue": [Function],
        "disabled": [Function],
        "error": [Function],
        "fullWidth": [Function],
        "helperText": [Function],
        "id": [Function],
        "inputProps": [Function],
        "inputRef": [Function],
        "label": [Function],
        "margin": [Function],
        "maxRows": [Function],
        "minRows": [Function],
        "multiline": [Function],
        "name": [Function],
        "onBlur": [Function],
        "onChange": [Function],
        "onFocus": [Function],
        "placeholder": [Function],
        "required": [Function],
        "rows": [Function],
        "select": [Function],
        "size": [Function],
        "sx": [Function],
        "type": [Function],
        "value": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "TextareaAutosize": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "className": [Function],
        "maxRows": [Function],
        "minRows": [Function],
        "onChange": [Function],
        "placeholder": [Function],
        "style": [Function],
        "value": [Function],
      },
      "render": [Function],
    },
    "ThemeProvider": [Function],
    "ToggleButton": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "disableFocusRipple": [Function],
        "disableRipple": [Function],
        "disabled": [Function],
        "fullWidth": [Function],
        "onChange": [Function],
        "onClick": [Function],
        "selected": [Function],
        "size": [Function],
        "sx": [Function],
        "value": [Function],
      },
      "render": [Function],
    },
    "ToggleButtonGroup": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "disabled": [Function],
        "exclusive": [Function],
        "fullWidth": [Function],
        "onChange": [Function],
        "orientation": [Function],
        "size": [Function],
        "sx": [Function],
        "value": [Function],
      },
      "render": [Function],
    },
    "Toolbar": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "disableGutters": [Function],
        "sx": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "Tooltip": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "PopperComponent": [Function],
        "PopperProps": [Function],
        "TransitionComponent": [Function],
        "TransitionProps": [Function],
        "arrow": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "components": [Function],
        "componentsProps": [Function],
        "describeChild": [Function],
        "disableFocusListener": [Function],
        "disableHoverListener": [Function],
        "disableInteractive": [Function],
        "disableTouchListener": [Function],
        "enterDelay": [Function],
        "enterNextDelay": [Function],
        "enterTouchDelay": [Function],
        "followCursor": [Function],
        "id": [Function],
        "leaveDelay": [Function],
        "leaveTouchDelay": [Function],
        "onClose": [Function],
        "onOpen": [Function],
        "open": [Function],
        "placement": [Function],
        "slotProps": [Function],
        "slots": [Function],
        "sx": [Function],
        "title": [Function],
      },
      "render": [Function],
    },
    "Typography": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "align": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "gutterBottom": [Function],
        "noWrap": [Function],
        "paragraph": [Function],
        "sx": [Function],
        "variant": [Function],
        "variantMapping": [Function],
      },
      "render": [Function],
    },
    "Unstable_Grid2": {
      "$$typeof": Symbol(react.forward_ref),
      "muiName": "Grid",
      "propTypes": {
        "children": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "Unstable_TrapFocus": [Function],
    "Zoom": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "addEndListener": [Function],
        "appear": [Function],
        "children": [Function],
        "easing": [Function],
        "in": [Function],
        "onEnter": [Function],
        "onEntered": [Function],
        "onEntering": [Function],
        "onExit": [Function],
        "onExited": [Function],
        "onExiting": [Function],
        "style": [Function],
        "timeout": [Function],
      },
      "render": [Function],
    },
    "accordionActionsClasses": {
      "root": "MuiAccordionActions-root",
      "spacing": "MuiAccordionActions-spacing",
    },
    "accordionClasses": {
      "disabled": "Mui-disabled",
      "expanded": "Mui-expanded",
      "gutters": "MuiAccordion-gutters",
      "region": "MuiAccordion-region",
      "root": "MuiAccordion-root",
      "rounded": "MuiAccordion-rounded",
    },
    "accordionDetailsClasses": {
      "root": "MuiAccordionDetails-root",
    },
    "accordionSummaryClasses": {
      "content": "MuiAccordionSummary-content",
      "contentGutters": "MuiAccordionSummary-contentGutters",
      "disabled": "Mui-disabled",
      "expandIconWrapper": "MuiAccordionSummary-expandIconWrapper",
      "expanded": "Mui-expanded",
      "focusVisible": "Mui-focusVisible",
      "gutters": "MuiAccordionSummary-gutters",
      "root": "MuiAccordionSummary-root",
    },
    "adaptV4Theme": [Function],
    "alertClasses": {
      "action": "MuiAlert-action",
      "colorError": "MuiAlert-colorError",
      "colorInfo": "MuiAlert-colorInfo",
      "colorSuccess": "MuiAlert-colorSuccess",
      "colorWarning": "MuiAlert-colorWarning",
      "filled": "MuiAlert-filled",
      "filledError": "MuiAlert-filledError",
      "filledInfo": "MuiAlert-filledInfo",
      "filledSuccess": "MuiAlert-filledSuccess",
      "filledWarning": "MuiAlert-filledWarning",
      "icon": "MuiAlert-icon",
      "message": "MuiAlert-message",
      "outlined": "MuiAlert-outlined",
      "outlinedError": "MuiAlert-outlinedError",
      "outlinedInfo": "MuiAlert-outlinedInfo",
      "outlinedSuccess": "MuiAlert-outlinedSuccess",
      "outlinedWarning": "MuiAlert-outlinedWarning",
      "root": "MuiAlert-root",
      "standard": "MuiAlert-standard",
      "standardError": "MuiAlert-standardError",
      "standardInfo": "MuiAlert-standardInfo",
      "standardSuccess": "MuiAlert-standardSuccess",
      "standardWarning": "MuiAlert-standardWarning",
    },
    "alertTitleClasses": {
      "root": "MuiAlertTitle-root",
    },
    "alpha": [Function],
    "appBarClasses": {
      "colorDefault": "MuiAppBar-colorDefault",
      "colorError": "MuiAppBar-colorError",
      "colorInfo": "MuiAppBar-colorInfo",
      "colorInherit": "MuiAppBar-colorInherit",
      "colorPrimary": "MuiAppBar-colorPrimary",
      "colorSecondary": "MuiAppBar-colorSecondary",
      "colorSuccess": "MuiAppBar-colorSuccess",
      "colorTransparent": "MuiAppBar-colorTransparent",
      "colorWarning": "MuiAppBar-colorWarning",
      "positionAbsolute": "MuiAppBar-positionAbsolute",
      "positionFixed": "MuiAppBar-positionFixed",
      "positionRelative": "MuiAppBar-positionRelative",
      "positionStatic": "MuiAppBar-positionStatic",
      "positionSticky": "MuiAppBar-positionSticky",
      "root": "MuiAppBar-root",
    },
    "autocompleteClasses": {
      "clearIndicator": "MuiAutocomplete-clearIndicator",
      "endAdornment": "MuiAutocomplete-endAdornment",
      "expanded": "Mui-expanded",
      "focusVisible": "Mui-focusVisible",
      "focused": "Mui-focused",
      "fullWidth": "MuiAutocomplete-fullWidth",
      "groupLabel": "MuiAutocomplete-groupLabel",
      "groupUl": "MuiAutocomplete-groupUl",
      "hasClearIcon": "MuiAutocomplete-hasClearIcon",
      "hasPopupIcon": "MuiAutocomplete-hasPopupIcon",
      "input": "MuiAutocomplete-input",
      "inputFocused": "MuiAutocomplete-inputFocused",
      "inputRoot": "MuiAutocomplete-inputRoot",
      "listbox": "MuiAutocomplete-listbox",
      "loading": "MuiAutocomplete-loading",
      "noOptions": "MuiAutocomplete-noOptions",
      "option": "MuiAutocomplete-option",
      "paper": "MuiAutocomplete-paper",
      "popper": "MuiAutocomplete-popper",
      "popperDisablePortal": "MuiAutocomplete-popperDisablePortal",
      "popupIndicator": "MuiAutocomplete-popupIndicator",
      "popupIndicatorOpen": "MuiAutocomplete-popupIndicatorOpen",
      "root": "MuiAutocomplete-root",
      "tag": "MuiAutocomplete-tag",
      "tagSizeMedium": "MuiAutocomplete-tagSizeMedium",
      "tagSizeSmall": "MuiAutocomplete-tagSizeSmall",
    },
    "avatarClasses": {
      "circular": "MuiAvatar-circular",
      "colorDefault": "MuiAvatar-colorDefault",
      "fallback": "MuiAvatar-fallback",
      "img": "MuiAvatar-img",
      "root": "MuiAvatar-root",
      "rounded": "MuiAvatar-rounded",
      "square": "MuiAvatar-square",
    },
    "avatarGroupClasses": {
      "avatar": "MuiAvatarGroup-avatar",
      "root": "MuiAvatarGroup-root",
    },
    "backdropClasses": {
      "invisible": "MuiBackdrop-invisible",
      "root": "MuiBackdrop-root",
    },
    "badgeClasses": {
      "anchorOriginBottomLeft": "MuiBadge-anchorOriginBottomLeft",
      "anchorOriginBottomLeftCircular": "MuiBadge-anchorOriginBottomLeftCircular",
      "anchorOriginBottomLeftRectangular": "MuiBadge-anchorOriginBottomLeftRectangular",
      "anchorOriginBottomRight": "MuiBadge-anchorOriginBottomRight",
      "anchorOriginBottomRightCircular": "MuiBadge-anchorOriginBottomRightCircular",
      "anchorOriginBottomRightRectangular": "MuiBadge-anchorOriginBottomRightRectangular",
      "anchorOriginTopLeft": "MuiBadge-anchorOriginTopLeft",
      "anchorOriginTopLeftCircular": "MuiBadge-anchorOriginTopLeftCircular",
      "anchorOriginTopLeftRectangular": "MuiBadge-anchorOriginTopLeftRectangular",
      "anchorOriginTopRight": "MuiBadge-anchorOriginTopRight",
      "anchorOriginTopRightCircular": "MuiBadge-anchorOriginTopRightCircular",
      "anchorOriginTopRightRectangular": "MuiBadge-anchorOriginTopRightRectangular",
      "badge": "MuiBadge-badge",
      "colorError": "MuiBadge-colorError",
      "colorInfo": "MuiBadge-colorInfo",
      "colorPrimary": "MuiBadge-colorPrimary",
      "colorSecondary": "MuiBadge-colorSecondary",
      "colorSuccess": "MuiBadge-colorSuccess",
      "colorWarning": "MuiBadge-colorWarning",
      "dot": "MuiBadge-dot",
      "invisible": "MuiBadge-invisible",
      "overlapCircular": "MuiBadge-overlapCircular",
      "overlapRectangular": "MuiBadge-overlapRectangular",
      "root": "MuiBadge-root",
      "standard": "MuiBadge-standard",
    },
    "bottomNavigationActionClasses": {
      "iconOnly": "MuiBottomNavigationAction-iconOnly",
      "label": "MuiBottomNavigationAction-label",
      "root": "MuiBottomNavigationAction-root",
      "selected": "Mui-selected",
    },
    "bottomNavigationClasses": {
      "root": "MuiBottomNavigation-root",
    },
    "boxClasses": {
      "root": "MuiBox-root",
    },
    "breadcrumbsClasses": {
      "li": "MuiBreadcrumbs-li",
      "ol": "MuiBreadcrumbs-ol",
      "root": "MuiBreadcrumbs-root",
      "separator": "MuiBreadcrumbs-separator",
    },
    "buttonBaseClasses": {
      "disabled": "Mui-disabled",
      "focusVisible": "Mui-focusVisible",
      "root": "MuiButtonBase-root",
    },
    "buttonClasses": {
      "colorError": "MuiButton-colorError",
      "colorInfo": "MuiButton-colorInfo",
      "colorInherit": "MuiButton-colorInherit",
      "colorPrimary": "MuiButton-colorPrimary",
      "colorSecondary": "MuiButton-colorSecondary",
      "colorSuccess": "MuiButton-colorSuccess",
      "colorWarning": "MuiButton-colorWarning",
      "contained": "MuiButton-contained",
      "containedError": "MuiButton-containedError",
      "containedInfo": "MuiButton-containedInfo",
      "containedInherit": "MuiButton-containedInherit",
      "containedPrimary": "MuiButton-containedPrimary",
      "containedSecondary": "MuiButton-containedSecondary",
      "containedSizeLarge": "MuiButton-containedSizeLarge",
      "containedSizeMedium": "MuiButton-containedSizeMedium",
      "containedSizeSmall": "MuiButton-containedSizeSmall",
      "containedSuccess": "MuiButton-containedSuccess",
      "containedWarning": "MuiButton-containedWarning",
      "disableElevation": "MuiButton-disableElevation",
      "disabled": "Mui-disabled",
      "endIcon": "MuiButton-endIcon",
      "focusVisible": "Mui-focusVisible",
      "fullWidth": "MuiButton-fullWidth",
      "icon": "MuiButton-icon",
      "iconSizeLarge": "MuiButton-iconSizeLarge",
      "iconSizeMedium": "MuiButton-iconSizeMedium",
      "iconSizeSmall": "MuiButton-iconSizeSmall",
      "outlined": "MuiButton-outlined",
      "outlinedError": "MuiButton-outlinedError",
      "outlinedInfo": "MuiButton-outlinedInfo",
      "outlinedInherit": "MuiButton-outlinedInherit",
      "outlinedPrimary": "MuiButton-outlinedPrimary",
      "outlinedSecondary": "MuiButton-outlinedSecondary",
      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
      "outlinedSizeMedium": "MuiButton-outlinedSizeMedium",
      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
      "outlinedSuccess": "MuiButton-outlinedSuccess",
      "outlinedWarning": "MuiButton-outlinedWarning",
      "root": "MuiButton-root",
      "sizeLarge": "MuiButton-sizeLarge",
      "sizeMedium": "MuiButton-sizeMedium",
      "sizeSmall": "MuiButton-sizeSmall",
      "startIcon": "MuiButton-startIcon",
      "text": "MuiButton-text",
      "textError": "MuiButton-textError",
      "textInfo": "MuiButton-textInfo",
      "textInherit": "MuiButton-textInherit",
      "textPrimary": "MuiButton-textPrimary",
      "textSecondary": "MuiButton-textSecondary",
      "textSizeLarge": "MuiButton-textSizeLarge",
      "textSizeMedium": "MuiButton-textSizeMedium",
      "textSizeSmall": "MuiButton-textSizeSmall",
      "textSuccess": "MuiButton-textSuccess",
      "textWarning": "MuiButton-textWarning",
    },
    "buttonGroupClasses": {
      "contained": "MuiButtonGroup-contained",
      "disableElevation": "MuiButtonGroup-disableElevation",
      "disabled": "Mui-disabled",
      "firstButton": "MuiButtonGroup-firstButton",
      "fullWidth": "MuiButtonGroup-fullWidth",
      "grouped": "MuiButtonGroup-grouped",
      "groupedContained": "MuiButtonGroup-groupedContained",
      "groupedContainedHorizontal": "MuiButtonGroup-groupedContainedHorizontal",
      "groupedContainedPrimary": "MuiButtonGroup-groupedContainedPrimary",
      "groupedContainedSecondary": "MuiButtonGroup-groupedContainedSecondary",
      "groupedContainedVertical": "MuiButtonGroup-groupedContainedVertical",
      "groupedHorizontal": "MuiButtonGroup-groupedHorizontal",
      "groupedOutlined": "MuiButtonGroup-groupedOutlined",
      "groupedOutlinedHorizontal": "MuiButtonGroup-groupedOutlinedHorizontal",
      "groupedOutlinedPrimary": "MuiButtonGroup-groupedOutlinedPrimary",
      "groupedOutlinedSecondary": "MuiButtonGroup-groupedOutlinedSecondary",
      "groupedOutlinedVertical": "MuiButtonGroup-groupedOutlinedVertical",
      "groupedText": "MuiButtonGroup-groupedText",
      "groupedTextHorizontal": "MuiButtonGroup-groupedTextHorizontal",
      "groupedTextPrimary": "MuiButtonGroup-groupedTextPrimary",
      "groupedTextSecondary": "MuiButtonGroup-groupedTextSecondary",
      "groupedTextVertical": "MuiButtonGroup-groupedTextVertical",
      "groupedVertical": "MuiButtonGroup-groupedVertical",
      "lastButton": "MuiButtonGroup-lastButton",
      "middleButton": "MuiButtonGroup-middleButton",
      "outlined": "MuiButtonGroup-outlined",
      "root": "MuiButtonGroup-root",
      "text": "MuiButtonGroup-text",
      "vertical": "MuiButtonGroup-vertical",
    },
    "capitalize": [Function],
    "cardActionAreaClasses": {
      "focusHighlight": "MuiCardActionArea-focusHighlight",
      "focusVisible": "Mui-focusVisible",
      "root": "MuiCardActionArea-root",
    },
    "cardActionsClasses": {
      "root": "MuiCardActions-root",
      "spacing": "MuiCardActions-spacing",
    },
    "cardClasses": {
      "root": "MuiCard-root",
    },
    "cardContentClasses": {
      "root": "MuiCardContent-root",
    },
    "cardHeaderClasses": {
      "action": "MuiCardHeader-action",
      "avatar": "MuiCardHeader-avatar",
      "content": "MuiCardHeader-content",
      "root": "MuiCardHeader-root",
      "subheader": "MuiCardHeader-subheader",
      "title": "MuiCardHeader-title",
    },
    "cardMediaClasses": {
      "img": "MuiCardMedia-img",
      "media": "MuiCardMedia-media",
      "root": "MuiCardMedia-root",
    },
    "checkboxClasses": {
      "checked": "Mui-checked",
      "colorPrimary": "MuiCheckbox-colorPrimary",
      "colorSecondary": "MuiCheckbox-colorSecondary",
      "disabled": "Mui-disabled",
      "indeterminate": "MuiCheckbox-indeterminate",
      "root": "MuiCheckbox-root",
      "sizeMedium": "MuiCheckbox-sizeMedium",
      "sizeSmall": "MuiCheckbox-sizeSmall",
    },
    "chipClasses": {
      "avatar": "MuiChip-avatar",
      "avatarColorPrimary": "MuiChip-avatarColorPrimary",
      "avatarColorSecondary": "MuiChip-avatarColorSecondary",
      "avatarMedium": "MuiChip-avatarMedium",
      "avatarSmall": "MuiChip-avatarSmall",
      "clickable": "MuiChip-clickable",
      "clickableColorPrimary": "MuiChip-clickableColorPrimary",
      "clickableColorSecondary": "MuiChip-clickableColorSecondary",
      "colorError": "MuiChip-colorError",
      "colorInfo": "MuiChip-colorInfo",
      "colorPrimary": "MuiChip-colorPrimary",
      "colorSecondary": "MuiChip-colorSecondary",
      "colorSuccess": "MuiChip-colorSuccess",
      "colorWarning": "MuiChip-colorWarning",
      "deletable": "MuiChip-deletable",
      "deletableColorPrimary": "MuiChip-deletableColorPrimary",
      "deletableColorSecondary": "MuiChip-deletableColorSecondary",
      "deleteIcon": "MuiChip-deleteIcon",
      "deleteIconColorPrimary": "MuiChip-deleteIconColorPrimary",
      "deleteIconColorSecondary": "MuiChip-deleteIconColorSecondary",
      "deleteIconFilledColorPrimary": "MuiChip-deleteIconFilledColorPrimary",
      "deleteIconFilledColorSecondary": "MuiChip-deleteIconFilledColorSecondary",
      "deleteIconMedium": "MuiChip-deleteIconMedium",
      "deleteIconOutlinedColorPrimary": "MuiChip-deleteIconOutlinedColorPrimary",
      "deleteIconOutlinedColorSecondary": "MuiChip-deleteIconOutlinedColorSecondary",
      "deleteIconSmall": "MuiChip-deleteIconSmall",
      "disabled": "Mui-disabled",
      "filled": "MuiChip-filled",
      "filledPrimary": "MuiChip-filledPrimary",
      "filledSecondary": "MuiChip-filledSecondary",
      "focusVisible": "Mui-focusVisible",
      "icon": "MuiChip-icon",
      "iconColorPrimary": "MuiChip-iconColorPrimary",
      "iconColorSecondary": "MuiChip-iconColorSecondary",
      "iconMedium": "MuiChip-iconMedium",
      "iconSmall": "MuiChip-iconSmall",
      "label": "MuiChip-label",
      "labelMedium": "MuiChip-labelMedium",
      "labelSmall": "MuiChip-labelSmall",
      "outlined": "MuiChip-outlined",
      "outlinedPrimary": "MuiChip-outlinedPrimary",
      "outlinedSecondary": "MuiChip-outlinedSecondary",
      "root": "MuiChip-root",
      "sizeMedium": "MuiChip-sizeMedium",
      "sizeSmall": "MuiChip-sizeSmall",
    },
    "circularProgressClasses": {
      "circle": "MuiCircularProgress-circle",
      "circleDeterminate": "MuiCircularProgress-circleDeterminate",
      "circleDisableShrink": "MuiCircularProgress-circleDisableShrink",
      "circleIndeterminate": "MuiCircularProgress-circleIndeterminate",
      "colorPrimary": "MuiCircularProgress-colorPrimary",
      "colorSecondary": "MuiCircularProgress-colorSecondary",
      "determinate": "MuiCircularProgress-determinate",
      "indeterminate": "MuiCircularProgress-indeterminate",
      "root": "MuiCircularProgress-root",
      "svg": "MuiCircularProgress-svg",
    },
    "collapseClasses": {
      "entered": "MuiCollapse-entered",
      "hidden": "MuiCollapse-hidden",
      "horizontal": "MuiCollapse-horizontal",
      "root": "MuiCollapse-root",
      "vertical": "MuiCollapse-vertical",
      "wrapper": "MuiCollapse-wrapper",
      "wrapperInner": "MuiCollapse-wrapperInner",
    },
    "colors": {
      "amber": {
        "100": "#ffecb3",
        "200": "#ffe082",
        "300": "#ffd54f",
        "400": "#ffca28",
        "50": "#fff8e1",
        "500": "#ffc107",
        "600": "#ffb300",
        "700": "#ffa000",
        "800": "#ff8f00",
        "900": "#ff6f00",
        "A100": "#ffe57f",
        "A200": "#ffd740",
        "A400": "#ffc400",
        "A700": "#ffab00",
      },
      "blue": {
        "100": "#bbdefb",
        "200": "#90caf9",
        "300": "#64b5f6",
        "400": "#42a5f5",
        "50": "#e3f2fd",
        "500": "#2196f3",
        "600": "#1e88e5",
        "700": "#1976d2",
        "800": "#1565c0",
        "900": "#0d47a1",
        "A100": "#82b1ff",
        "A200": "#448aff",
        "A400": "#2979ff",
        "A700": "#2962ff",
      },
      "blueGrey": {
        "100": "#cfd8dc",
        "200": "#b0bec5",
        "300": "#90a4ae",
        "400": "#78909c",
        "50": "#eceff1",
        "500": "#607d8b",
        "600": "#546e7a",
        "700": "#455a64",
        "800": "#37474f",
        "900": "#263238",
        "A100": "#cfd8dc",
        "A200": "#b0bec5",
        "A400": "#78909c",
        "A700": "#455a64",
      },
      "brown": {
        "100": "#d7ccc8",
        "200": "#bcaaa4",
        "300": "#a1887f",
        "400": "#8d6e63",
        "50": "#efebe9",
        "500": "#795548",
        "600": "#6d4c41",
        "700": "#5d4037",
        "800": "#4e342e",
        "900": "#3e2723",
        "A100": "#d7ccc8",
        "A200": "#bcaaa4",
        "A400": "#8d6e63",
        "A700": "#5d4037",
      },
      "common": {
        "black": "#000",
        "white": "#fff",
      },
      "cyan": {
        "100": "#b2ebf2",
        "200": "#80deea",
        "300": "#4dd0e1",
        "400": "#26c6da",
        "50": "#e0f7fa",
        "500": "#00bcd4",
        "600": "#00acc1",
        "700": "#0097a7",
        "800": "#00838f",
        "900": "#006064",
        "A100": "#84ffff",
        "A200": "#18ffff",
        "A400": "#00e5ff",
        "A700": "#00b8d4",
      },
      "deepOrange": {
        "100": "#ffccbc",
        "200": "#ffab91",
        "300": "#ff8a65",
        "400": "#ff7043",
        "50": "#fbe9e7",
        "500": "#ff5722",
        "600": "#f4511e",
        "700": "#e64a19",
        "800": "#d84315",
        "900": "#bf360c",
        "A100": "#ff9e80",
        "A200": "#ff6e40",
        "A400": "#ff3d00",
        "A700": "#dd2c00",
      },
      "deepPurple": {
        "100": "#d1c4e9",
        "200": "#b39ddb",
        "300": "#9575cd",
        "400": "#7e57c2",
        "50": "#ede7f6",
        "500": "#673ab7",
        "600": "#5e35b1",
        "700": "#512da8",
        "800": "#4527a0",
        "900": "#311b92",
        "A100": "#b388ff",
        "A200": "#7c4dff",
        "A400": "#651fff",
        "A700": "#6200ea",
      },
      "green": {
        "100": "#c8e6c9",
        "200": "#a5d6a7",
        "300": "#81c784",
        "400": "#66bb6a",
        "50": "#e8f5e9",
        "500": "#4caf50",
        "600": "#43a047",
        "700": "#388e3c",
        "800": "#2e7d32",
        "900": "#1b5e20",
        "A100": "#b9f6ca",
        "A200": "#69f0ae",
        "A400": "#00e676",
        "A700": "#00c853",
      },
      "grey": {
        "100": "#f5f5f5",
        "200": "#eeeeee",
        "300": "#e0e0e0",
        "400": "#bdbdbd",
        "50": "#fafafa",
        "500": "#9e9e9e",
        "600": "#757575",
        "700": "#616161",
        "800": "#424242",
        "900": "#212121",
        "A100": "#f5f5f5",
        "A200": "#eeeeee",
        "A400": "#bdbdbd",
        "A700": "#616161",
      },
      "indigo": {
        "100": "#c5cae9",
        "200": "#9fa8da",
        "300": "#7986cb",
        "400": "#5c6bc0",
        "50": "#e8eaf6",
        "500": "#3f51b5",
        "600": "#3949ab",
        "700": "#303f9f",
        "800": "#283593",
        "900": "#1a237e",
        "A100": "#8c9eff",
        "A200": "#536dfe",
        "A400": "#3d5afe",
        "A700": "#304ffe",
      },
      "lightBlue": {
        "100": "#b3e5fc",
        "200": "#81d4fa",
        "300": "#4fc3f7",
        "400": "#29b6f6",
        "50": "#e1f5fe",
        "500": "#03a9f4",
        "600": "#039be5",
        "700": "#0288d1",
        "800": "#0277bd",
        "900": "#01579b",
        "A100": "#80d8ff",
        "A200": "#40c4ff",
        "A400": "#00b0ff",
        "A700": "#0091ea",
      },
      "lightGreen": {
        "100": "#dcedc8",
        "200": "#c5e1a5",
        "300": "#aed581",
        "400": "#9ccc65",
        "50": "#f1f8e9",
        "500": "#8bc34a",
        "600": "#7cb342",
        "700": "#689f38",
        "800": "#558b2f",
        "900": "#33691e",
        "A100": "#ccff90",
        "A200": "#b2ff59",
        "A400": "#76ff03",
        "A700": "#64dd17",
      },
      "lime": {
        "100": "#f0f4c3",
        "200": "#e6ee9c",
        "300": "#dce775",
        "400": "#d4e157",
        "50": "#f9fbe7",
        "500": "#cddc39",
        "600": "#c0ca33",
        "700": "#afb42b",
        "800": "#9e9d24",
        "900": "#827717",
        "A100": "#f4ff81",
        "A200": "#eeff41",
        "A400": "#c6ff00",
        "A700": "#aeea00",
      },
      "orange": {
        "100": "#ffe0b2",
        "200": "#ffcc80",
        "300": "#ffb74d",
        "400": "#ffa726",
        "50": "#fff3e0",
        "500": "#ff9800",
        "600": "#fb8c00",
        "700": "#f57c00",
        "800": "#ef6c00",
        "900": "#e65100",
        "A100": "#ffd180",
        "A200": "#ffab40",
        "A400": "#ff9100",
        "A700": "#ff6d00",
      },
      "pink": {
        "100": "#f8bbd0",
        "200": "#f48fb1",
        "300": "#f06292",
        "400": "#ec407a",
        "50": "#fce4ec",
        "500": "#e91e63",
        "600": "#d81b60",
        "700": "#c2185b",
        "800": "#ad1457",
        "900": "#880e4f",
        "A100": "#ff80ab",
        "A200": "#ff4081",
        "A400": "#f50057",
        "A700": "#c51162",
      },
      "purple": {
        "100": "#e1bee7",
        "200": "#ce93d8",
        "300": "#ba68c8",
        "400": "#ab47bc",
        "50": "#f3e5f5",
        "500": "#9c27b0",
        "600": "#8e24aa",
        "700": "#7b1fa2",
        "800": "#6a1b9a",
        "900": "#4a148c",
        "A100": "#ea80fc",
        "A200": "#e040fb",
        "A400": "#d500f9",
        "A700": "#aa00ff",
      },
      "red": {
        "100": "#ffcdd2",
        "200": "#ef9a9a",
        "300": "#e57373",
        "400": "#ef5350",
        "50": "#ffebee",
        "500": "#f44336",
        "600": "#e53935",
        "700": "#d32f2f",
        "800": "#c62828",
        "900": "#b71c1c",
        "A100": "#ff8a80",
        "A200": "#ff5252",
        "A400": "#ff1744",
        "A700": "#d50000",
      },
      "teal": {
        "100": "#b2dfdb",
        "200": "#80cbc4",
        "300": "#4db6ac",
        "400": "#26a69a",
        "50": "#e0f2f1",
        "500": "#009688",
        "600": "#00897b",
        "700": "#00796b",
        "800": "#00695c",
        "900": "#004d40",
        "A100": "#a7ffeb",
        "A200": "#64ffda",
        "A400": "#1de9b6",
        "A700": "#00bfa5",
      },
      "yellow": {
        "100": "#fff9c4",
        "200": "#fff59d",
        "300": "#fff176",
        "400": "#ffee58",
        "50": "#fffde7",
        "500": "#ffeb3b",
        "600": "#fdd835",
        "700": "#fbc02d",
        "800": "#f9a825",
        "900": "#f57f17",
        "A100": "#ffff8d",
        "A200": "#ffff00",
        "A400": "#ffea00",
        "A700": "#ffd600",
      },
    },
    "containerClasses": {
      "disableGutters": "MuiContainer-disableGutters",
      "fixed": "MuiContainer-fixed",
      "maxWidthLg": "MuiContainer-maxWidthLg",
      "maxWidthMd": "MuiContainer-maxWidthMd",
      "maxWidthSm": "MuiContainer-maxWidthSm",
      "maxWidthXl": "MuiContainer-maxWidthXl",
      "maxWidthXs": "MuiContainer-maxWidthXs",
      "root": "MuiContainer-root",
    },
    "createChainedFunction": [Function],
    "createFilterOptions": [Function],
    "createMuiTheme": [Function],
    "createStyles": [Function],
    "createSvgIcon": [Function],
    "createTheme": [Function],
    "css": [Function],
    "darkScrollbar": [Function],
    "darken": [Function],
    "debounce": [Function],
    "decomposeColor": [Function],
    "deprecatedPropType": [Function],
    "dialogActionsClasses": {
      "root": "MuiDialogActions-root",
      "spacing": "MuiDialogActions-spacing",
    },
    "dialogClasses": {
      "container": "MuiDialog-container",
      "paper": "MuiDialog-paper",
      "paperFullScreen": "MuiDialog-paperFullScreen",
      "paperFullWidth": "MuiDialog-paperFullWidth",
      "paperScrollBody": "MuiDialog-paperScrollBody",
      "paperScrollPaper": "MuiDialog-paperScrollPaper",
      "paperWidthFalse": "MuiDialog-paperWidthFalse",
      "paperWidthLg": "MuiDialog-paperWidthLg",
      "paperWidthMd": "MuiDialog-paperWidthMd",
      "paperWidthSm": "MuiDialog-paperWidthSm",
      "paperWidthXl": "MuiDialog-paperWidthXl",
      "paperWidthXs": "MuiDialog-paperWidthXs",
      "root": "MuiDialog-root",
      "scrollBody": "MuiDialog-scrollBody",
      "scrollPaper": "MuiDialog-scrollPaper",
    },
    "dialogContentClasses": {
      "dividers": "MuiDialogContent-dividers",
      "root": "MuiDialogContent-root",
    },
    "dialogContentTextClasses": {
      "root": "MuiDialogContentText-root",
    },
    "dialogTitleClasses": {
      "root": "MuiDialogTitle-root",
    },
    "dividerClasses": {
      "absolute": "MuiDivider-absolute",
      "flexItem": "MuiDivider-flexItem",
      "fullWidth": "MuiDivider-fullWidth",
      "inset": "MuiDivider-inset",
      "light": "MuiDivider-light",
      "middle": "MuiDivider-middle",
      "root": "MuiDivider-root",
      "textAlignLeft": "MuiDivider-textAlignLeft",
      "textAlignRight": "MuiDivider-textAlignRight",
      "vertical": "MuiDivider-vertical",
      "withChildren": "MuiDivider-withChildren",
      "withChildrenVertical": "MuiDivider-withChildrenVertical",
      "wrapper": "MuiDivider-wrapper",
      "wrapperVertical": "MuiDivider-wrapperVertical",
    },
    "drawerClasses": {
      "docked": "MuiDrawer-docked",
      "modal": "MuiDrawer-modal",
      "paper": "MuiDrawer-paper",
      "paperAnchorBottom": "MuiDrawer-paperAnchorBottom",
      "paperAnchorDockedBottom": "MuiDrawer-paperAnchorDockedBottom",
      "paperAnchorDockedLeft": "MuiDrawer-paperAnchorDockedLeft",
      "paperAnchorDockedRight": "MuiDrawer-paperAnchorDockedRight",
      "paperAnchorDockedTop": "MuiDrawer-paperAnchorDockedTop",
      "paperAnchorLeft": "MuiDrawer-paperAnchorLeft",
      "paperAnchorRight": "MuiDrawer-paperAnchorRight",
      "paperAnchorTop": "MuiDrawer-paperAnchorTop",
      "root": "MuiDrawer-root",
    },
    "duration": {
      "complex": 375,
      "enteringScreen": 225,
      "leavingScreen": 195,
      "short": 250,
      "shorter": 200,
      "shortest": 150,
      "standard": 300,
    },
    "easing": {
      "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
      "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
      "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
      "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
    },
    "emphasize": [Function],
    "experimentalStyled": [Function],
    "experimental_extendTheme": [Function],
    "experimental_sx": [Function],
    "fabClasses": {
      "circular": "MuiFab-circular",
      "colorInherit": "MuiFab-colorInherit",
      "disabled": "Mui-disabled",
      "error": "Mui-error",
      "extended": "MuiFab-extended",
      "focusVisible": "Mui-focusVisible",
      "info": "MuiFab-info",
      "primary": "MuiFab-primary",
      "root": "MuiFab-root",
      "secondary": "MuiFab-secondary",
      "sizeLarge": "MuiFab-sizeLarge",
      "sizeMedium": "MuiFab-sizeMedium",
      "sizeSmall": "MuiFab-sizeSmall",
      "success": "MuiFab-success",
      "warning": "MuiFab-warning",
    },
    "filledInputClasses": {
      "adornedEnd": "MuiInputBase-adornedEnd",
      "adornedStart": "MuiInputBase-adornedStart",
      "colorSecondary": "MuiInputBase-colorSecondary",
      "disabled": "Mui-disabled",
      "error": "Mui-error",
      "focused": "Mui-focused",
      "formControl": "MuiInputBase-formControl",
      "fullWidth": "MuiInputBase-fullWidth",
      "hiddenLabel": "MuiInputBase-hiddenLabel",
      "input": "MuiFilledInput-input",
      "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
      "inputAdornedStart": "MuiInputBase-inputAdornedStart",
      "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
      "inputMultiline": "MuiInputBase-inputMultiline",
      "inputSizeSmall": "MuiInputBase-inputSizeSmall",
      "inputTypeSearch": "MuiInputBase-inputTypeSearch",
      "multiline": "MuiInputBase-multiline",
      "readOnly": "Mui-readOnly",
      "root": "MuiFilledInput-root",
      "sizeSmall": "MuiInputBase-sizeSmall",
      "underline": "MuiFilledInput-underline",
    },
    "formControlClasses": {
      "disabled": "Mui-disabled",
      "fullWidth": "MuiFormControl-fullWidth",
      "marginDense": "MuiFormControl-marginDense",
      "marginNone": "MuiFormControl-marginNone",
      "marginNormal": "MuiFormControl-marginNormal",
      "root": "MuiFormControl-root",
    },
    "formControlLabelClasses": {
      "asterisk": "MuiFormControlLabel-asterisk",
      "disabled": "Mui-disabled",
      "error": "Mui-error",
      "label": "MuiFormControlLabel-label",
      "labelPlacementBottom": "MuiFormControlLabel-labelPlacementBottom",
      "labelPlacementStart": "MuiFormControlLabel-labelPlacementStart",
      "labelPlacementTop": "MuiFormControlLabel-labelPlacementTop",
      "required": "Mui-required",
      "root": "MuiFormControlLabel-root",
    },
    "formGroupClasses": {
      "error": "Mui-error",
      "root": "MuiFormGroup-root",
      "row": "MuiFormGroup-row",
    },
    "formHelperTextClasses": {
      "contained": "MuiFormHelperText-contained",
      "disabled": "Mui-disabled",
      "error": "Mui-error",
      "filled": "MuiFormHelperText-filled",
      "focused": "Mui-focused",
      "required": "Mui-required",
      "root": "MuiFormHelperText-root",
      "sizeMedium": "MuiFormHelperText-sizeMedium",
      "sizeSmall": "MuiFormHelperText-sizeSmall",
    },
    "formLabelClasses": {
      "asterisk": "MuiFormLabel-asterisk",
      "colorSecondary": "MuiFormLabel-colorSecondary",
      "disabled": "Mui-disabled",
      "error": "Mui-error",
      "filled": "MuiFormLabel-filled",
      "focused": "Mui-focused",
      "required": "Mui-required",
      "root": "MuiFormLabel-root",
    },
    "generateUtilityClass": [Function],
    "generateUtilityClasses": [Function],
    "getAccordionActionsUtilityClass": [Function],
    "getAccordionDetailsUtilityClass": [Function],
    "getAccordionSummaryUtilityClass": [Function],
    "getAccordionUtilityClass": [Function],
    "getAlertTitleUtilityClass": [Function],
    "getAlertUtilityClass": [Function],
    "getAppBarUtilityClass": [Function],
    "getAutocompleteUtilityClass": [Function],
    "getAvatarGroupUtilityClass": [Function],
    "getAvatarUtilityClass": [Function],
    "getBackdropUtilityClass": [Function],
    "getBadgeUtilityClass": [Function],
    "getBottomNavigationActionUtilityClass": [Function],
    "getBottomNavigationUtilityClass": [Function],
    "getBreadcrumbsUtilityClass": [Function],
    "getButtonBaseUtilityClass": [Function],
    "getButtonGroupUtilityClass": [Function],
    "getButtonUtilityClass": [Function],
    "getCardActionAreaUtilityClass": [Function],
    "getCardActionsUtilityClass": [Function],
    "getCardContentUtilityClass": [Function],
    "getCardHeaderUtilityClass": [Function],
    "getCardMediaUtilityClass": [Function],
    "getCardUtilityClass": [Function],
    "getCheckboxUtilityClass": [Function],
    "getChipUtilityClass": [Function],
    "getCircularProgressUtilityClass": [Function],
    "getCollapseUtilityClass": [Function],
    "getContainerUtilityClass": [Function],
    "getContrastRatio": [Function],
    "getDialogActionsUtilityClass": [Function],
    "getDialogContentTextUtilityClass": [Function],
    "getDialogContentUtilityClass": [Function],
    "getDialogTitleUtilityClass": [Function],
    "getDialogUtilityClass": [Function],
    "getDividerUtilityClass": [Function],
    "getDrawerUtilityClass": [Function],
    "getFabUtilityClass": [Function],
    "getFilledInputUtilityClass": [Function],
    "getFormControlLabelUtilityClasses": [Function],
    "getFormControlUtilityClasses": [Function],
    "getFormGroupUtilityClass": [Function],
    "getFormHelperTextUtilityClasses": [Function],
    "getFormLabelUtilityClasses": [Function],
    "getGrid2UtilityClass": [Function],
    "getGridUtilityClass": [Function],
    "getIconButtonUtilityClass": [Function],
    "getIconUtilityClass": [Function],
    "getImageListItemBarUtilityClass": [Function],
    "getImageListItemUtilityClass": [Function],
    "getImageListUtilityClass": [Function],
    "getInitColorSchemeScript": [Function],
    "getInputAdornmentUtilityClass": [Function],
    "getInputBaseUtilityClass": [Function],
    "getInputLabelUtilityClasses": [Function],
    "getInputUtilityClass": [Function],
    "getLinearProgressUtilityClass": [Function],
    "getLinkUtilityClass": [Function],
    "getListItemAvatarUtilityClass": [Function],
    "getListItemButtonUtilityClass": [Function],
    "getListItemIconUtilityClass": [Function],
    "getListItemSecondaryActionClassesUtilityClass": [Function],
    "getListItemTextUtilityClass": [Function],
    "getListItemUtilityClass": [Function],
    "getListSubheaderUtilityClass": [Function],
    "getListUtilityClass": [Function],
    "getLuminance": [Function],
    "getMenuItemUtilityClass": [Function],
    "getMenuUtilityClass": [Function],
    "getMobileStepperUtilityClass": [Function],
    "getModalUtilityClass": [Function],
    "getNativeSelectUtilityClasses": [Function],
    "getOffsetLeft": [Function],
    "getOffsetTop": [Function],
    "getOutlinedInputUtilityClass": [Function],
    "getOverlayAlpha": [Function],
    "getPaginationItemUtilityClass": [Function],
    "getPaginationUtilityClass": [Function],
    "getPaperUtilityClass": [Function],
    "getPopoverUtilityClass": [Function],
    "getPopperUtilityClass": [Function],
    "getRadioGroupUtilityClass": [Function],
    "getRadioUtilityClass": [Function],
    "getRatingUtilityClass": [Function],
    "getScopedCssBaselineUtilityClass": [Function],
    "getSelectUtilityClasses": [Function],
    "getSkeletonUtilityClass": [Function],
    "getSliderUtilityClass": [Function],
    "getSnackbarContentUtilityClass": [Function],
    "getSnackbarUtilityClass": [Function],
    "getSpeedDialActionUtilityClass": [Function],
    "getSpeedDialIconUtilityClass": [Function],
    "getSpeedDialUtilityClass": [Function],
    "getStepButtonUtilityClass": [Function],
    "getStepConnectorUtilityClass": [Function],
    "getStepContentUtilityClass": [Function],
    "getStepIconUtilityClass": [Function],
    "getStepLabelUtilityClass": [Function],
    "getStepUtilityClass": [Function],
    "getStepperUtilityClass": [Function],
    "getSvgIconUtilityClass": [Function],
    "getSwitchUtilityClass": [Function],
    "getTabScrollButtonUtilityClass": [Function],
    "getTabUtilityClass": [Function],
    "getTableBodyUtilityClass": [Function],
    "getTableCellUtilityClass": [Function],
    "getTableContainerUtilityClass": [Function],
    "getTableFooterUtilityClass": [Function],
    "getTableHeadUtilityClass": [Function],
    "getTablePaginationUtilityClass": [Function],
    "getTableRowUtilityClass": [Function],
    "getTableSortLabelUtilityClass": [Function],
    "getTableUtilityClass": [Function],
    "getTabsUtilityClass": [Function],
    "getTextFieldUtilityClass": [Function],
    "getToggleButtonGroupUtilityClass": [Function],
    "getToggleButtonUtilityClass": [Function],
    "getToolbarUtilityClass": [Function],
    "getTooltipUtilityClass": [Function],
    "getTouchRippleUtilityClass": [Function],
    "getTypographyUtilityClass": [Function],
    "grid2Classes": {
      "container": "MuiGrid2-container",
      "direction-xs-column": "MuiGrid2-direction-xs-column",
      "direction-xs-column-reverse": "MuiGrid2-direction-xs-column-reverse",
      "direction-xs-row": "MuiGrid2-direction-xs-row",
      "direction-xs-row-reverse": "MuiGrid2-direction-xs-row-reverse",
      "grid-lg-1": "MuiGrid2-grid-lg-1",
      "grid-lg-10": "MuiGrid2-grid-lg-10",
      "grid-lg-11": "MuiGrid2-grid-lg-11",
      "grid-lg-12": "MuiGrid2-grid-lg-12",
      "grid-lg-2": "MuiGrid2-grid-lg-2",
      "grid-lg-3": "MuiGrid2-grid-lg-3",
      "grid-lg-4": "MuiGrid2-grid-lg-4",
      "grid-lg-5": "MuiGrid2-grid-lg-5",
      "grid-lg-6": "MuiGrid2-grid-lg-6",
      "grid-lg-7": "MuiGrid2-grid-lg-7",
      "grid-lg-8": "MuiGrid2-grid-lg-8",
      "grid-lg-9": "MuiGrid2-grid-lg-9",
      "grid-lg-auto": "MuiGrid2-grid-lg-auto",
      "grid-lg-true": "MuiGrid2-grid-lg-true",
      "grid-md-1": "MuiGrid2-grid-md-1",
      "grid-md-10": "MuiGrid2-grid-md-10",
      "grid-md-11": "MuiGrid2-grid-md-11",
      "grid-md-12": "MuiGrid2-grid-md-12",
      "grid-md-2": "MuiGrid2-grid-md-2",
      "grid-md-3": "MuiGrid2-grid-md-3",
      "grid-md-4": "MuiGrid2-grid-md-4",
      "grid-md-5": "MuiGrid2-grid-md-5",
      "grid-md-6": "MuiGrid2-grid-md-6",
      "grid-md-7": "MuiGrid2-grid-md-7",
      "grid-md-8": "MuiGrid2-grid-md-8",
      "grid-md-9": "MuiGrid2-grid-md-9",
      "grid-md-auto": "MuiGrid2-grid-md-auto",
      "grid-md-true": "MuiGrid2-grid-md-true",
      "grid-sm-1": "MuiGrid2-grid-sm-1",
      "grid-sm-10": "MuiGrid2-grid-sm-10",
      "grid-sm-11": "MuiGrid2-grid-sm-11",
      "grid-sm-12": "MuiGrid2-grid-sm-12",
      "grid-sm-2": "MuiGrid2-grid-sm-2",
      "grid-sm-3": "MuiGrid2-grid-sm-3",
      "grid-sm-4": "MuiGrid2-grid-sm-4",
      "grid-sm-5": "MuiGrid2-grid-sm-5",
      "grid-sm-6": "MuiGrid2-grid-sm-6",
      "grid-sm-7": "MuiGrid2-grid-sm-7",
      "grid-sm-8": "MuiGrid2-grid-sm-8",
      "grid-sm-9": "MuiGrid2-grid-sm-9",
      "grid-sm-auto": "MuiGrid2-grid-sm-auto",
      "grid-sm-true": "MuiGrid2-grid-sm-true",
      "grid-xl-1": "MuiGrid2-grid-xl-1",
      "grid-xl-10": "MuiGrid2-grid-xl-10",
      "grid-xl-11": "MuiGrid2-grid-xl-11",
      "grid-xl-12": "MuiGrid2-grid-xl-12",
      "grid-xl-2": "MuiGrid2-grid-xl-2",
      "grid-xl-3": "MuiGrid2-grid-xl-3",
      "grid-xl-4": "MuiGrid2-grid-xl-4",
      "grid-xl-5": "MuiGrid2-grid-xl-5",
      "grid-xl-6": "MuiGrid2-grid-xl-6",
      "grid-xl-7": "MuiGrid2-grid-xl-7",
      "grid-xl-8": "MuiGrid2-grid-xl-8",
      "grid-xl-9": "MuiGrid2-grid-xl-9",
      "grid-xl-auto": "MuiGrid2-grid-xl-auto",
      "grid-xl-true": "MuiGrid2-grid-xl-true",
      "grid-xs-1": "MuiGrid2-grid-xs-1",
      "grid-xs-10": "MuiGrid2-grid-xs-10",
      "grid-xs-11": "MuiGrid2-grid-xs-11",
      "grid-xs-12": "MuiGrid2-grid-xs-12",
      "grid-xs-2": "MuiGrid2-grid-xs-2",
      "grid-xs-3": "MuiGrid2-grid-xs-3",
      "grid-xs-4": "MuiGrid2-grid-xs-4",
      "grid-xs-5": "MuiGrid2-grid-xs-5",
      "grid-xs-6": "MuiGrid2-grid-xs-6",
      "grid-xs-7": "MuiGrid2-grid-xs-7",
      "grid-xs-8": "MuiGrid2-grid-xs-8",
      "grid-xs-9": "MuiGrid2-grid-xs-9",
      "grid-xs-auto": "MuiGrid2-grid-xs-auto",
      "grid-xs-true": "MuiGrid2-grid-xs-true",
      "item": "MuiGrid2-item",
      "root": "MuiGrid2-root",
      "spacing-xs-0": "MuiGrid2-spacing-xs-0",
      "spacing-xs-1": "MuiGrid2-spacing-xs-1",
      "spacing-xs-10": "MuiGrid2-spacing-xs-10",
      "spacing-xs-2": "MuiGrid2-spacing-xs-2",
      "spacing-xs-3": "MuiGrid2-spacing-xs-3",
      "spacing-xs-4": "MuiGrid2-spacing-xs-4",
      "spacing-xs-5": "MuiGrid2-spacing-xs-5",
      "spacing-xs-6": "MuiGrid2-spacing-xs-6",
      "spacing-xs-7": "MuiGrid2-spacing-xs-7",
      "spacing-xs-8": "MuiGrid2-spacing-xs-8",
      "spacing-xs-9": "MuiGrid2-spacing-xs-9",
      "wrap-xs-nowrap": "MuiGrid2-wrap-xs-nowrap",
      "wrap-xs-wrap": "MuiGrid2-wrap-xs-wrap",
      "wrap-xs-wrap-reverse": "MuiGrid2-wrap-xs-wrap-reverse",
      "zeroMinWidth": "MuiGrid2-zeroMinWidth",
    },
    "gridClasses": {
      "container": "MuiGrid-container",
      "direction-xs-column": "MuiGrid-direction-xs-column",
      "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
      "direction-xs-row": "MuiGrid-direction-xs-row",
      "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
      "grid-lg-1": "MuiGrid-grid-lg-1",
      "grid-lg-10": "MuiGrid-grid-lg-10",
      "grid-lg-11": "MuiGrid-grid-lg-11",
      "grid-lg-12": "MuiGrid-grid-lg-12",
      "grid-lg-2": "MuiGrid-grid-lg-2",
      "grid-lg-3": "MuiGrid-grid-lg-3",
      "grid-lg-4": "MuiGrid-grid-lg-4",
      "grid-lg-5": "MuiGrid-grid-lg-5",
      "grid-lg-6": "MuiGrid-grid-lg-6",
      "grid-lg-7": "MuiGrid-grid-lg-7",
      "grid-lg-8": "MuiGrid-grid-lg-8",
      "grid-lg-9": "MuiGrid-grid-lg-9",
      "grid-lg-auto": "MuiGrid-grid-lg-auto",
      "grid-lg-true": "MuiGrid-grid-lg-true",
      "grid-md-1": "MuiGrid-grid-md-1",
      "grid-md-10": "MuiGrid-grid-md-10",
      "grid-md-11": "MuiGrid-grid-md-11",
      "grid-md-12": "MuiGrid-grid-md-12",
      "grid-md-2": "MuiGrid-grid-md-2",
      "grid-md-3": "MuiGrid-grid-md-3",
      "grid-md-4": "MuiGrid-grid-md-4",
      "grid-md-5": "MuiGrid-grid-md-5",
      "grid-md-6": "MuiGrid-grid-md-6",
      "grid-md-7": "MuiGrid-grid-md-7",
      "grid-md-8": "MuiGrid-grid-md-8",
      "grid-md-9": "MuiGrid-grid-md-9",
      "grid-md-auto": "MuiGrid-grid-md-auto",
      "grid-md-true": "MuiGrid-grid-md-true",
      "grid-sm-1": "MuiGrid-grid-sm-1",
      "grid-sm-10": "MuiGrid-grid-sm-10",
      "grid-sm-11": "MuiGrid-grid-sm-11",
      "grid-sm-12": "MuiGrid-grid-sm-12",
      "grid-sm-2": "MuiGrid-grid-sm-2",
      "grid-sm-3": "MuiGrid-grid-sm-3",
      "grid-sm-4": "MuiGrid-grid-sm-4",
      "grid-sm-5": "MuiGrid-grid-sm-5",
      "grid-sm-6": "MuiGrid-grid-sm-6",
      "grid-sm-7": "MuiGrid-grid-sm-7",
      "grid-sm-8": "MuiGrid-grid-sm-8",
      "grid-sm-9": "MuiGrid-grid-sm-9",
      "grid-sm-auto": "MuiGrid-grid-sm-auto",
      "grid-sm-true": "MuiGrid-grid-sm-true",
      "grid-xl-1": "MuiGrid-grid-xl-1",
      "grid-xl-10": "MuiGrid-grid-xl-10",
      "grid-xl-11": "MuiGrid-grid-xl-11",
      "grid-xl-12": "MuiGrid-grid-xl-12",
      "grid-xl-2": "MuiGrid-grid-xl-2",
      "grid-xl-3": "MuiGrid-grid-xl-3",
      "grid-xl-4": "MuiGrid-grid-xl-4",
      "grid-xl-5": "MuiGrid-grid-xl-5",
      "grid-xl-6": "MuiGrid-grid-xl-6",
      "grid-xl-7": "MuiGrid-grid-xl-7",
      "grid-xl-8": "MuiGrid-grid-xl-8",
      "grid-xl-9": "MuiGrid-grid-xl-9",
      "grid-xl-auto": "MuiGrid-grid-xl-auto",
      "grid-xl-true": "MuiGrid-grid-xl-true",
      "grid-xs-1": "MuiGrid-grid-xs-1",
      "grid-xs-10": "MuiGrid-grid-xs-10",
      "grid-xs-11": "MuiGrid-grid-xs-11",
      "grid-xs-12": "MuiGrid-grid-xs-12",
      "grid-xs-2": "MuiGrid-grid-xs-2",
      "grid-xs-3": "MuiGrid-grid-xs-3",
      "grid-xs-4": "MuiGrid-grid-xs-4",
      "grid-xs-5": "MuiGrid-grid-xs-5",
      "grid-xs-6": "MuiGrid-grid-xs-6",
      "grid-xs-7": "MuiGrid-grid-xs-7",
      "grid-xs-8": "MuiGrid-grid-xs-8",
      "grid-xs-9": "MuiGrid-grid-xs-9",
      "grid-xs-auto": "MuiGrid-grid-xs-auto",
      "grid-xs-true": "MuiGrid-grid-xs-true",
      "item": "MuiGrid-item",
      "root": "MuiGrid-root",
      "spacing-xs-0": "MuiGrid-spacing-xs-0",
      "spacing-xs-1": "MuiGrid-spacing-xs-1",
      "spacing-xs-10": "MuiGrid-spacing-xs-10",
      "spacing-xs-2": "MuiGrid-spacing-xs-2",
      "spacing-xs-3": "MuiGrid-spacing-xs-3",
      "spacing-xs-4": "MuiGrid-spacing-xs-4",
      "spacing-xs-5": "MuiGrid-spacing-xs-5",
      "spacing-xs-6": "MuiGrid-spacing-xs-6",
      "spacing-xs-7": "MuiGrid-spacing-xs-7",
      "spacing-xs-8": "MuiGrid-spacing-xs-8",
      "spacing-xs-9": "MuiGrid-spacing-xs-9",
      "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
      "wrap-xs-wrap": "MuiGrid-wrap-xs-wrap",
      "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
      "zeroMinWidth": "MuiGrid-zeroMinWidth",
    },
    "hexToRgb": [Function],
    "hslToRgb": [Function],
    "iconButtonClasses": {
      "colorError": "MuiIconButton-colorError",
      "colorInfo": "MuiIconButton-colorInfo",
      "colorInherit": "MuiIconButton-colorInherit",
      "colorPrimary": "MuiIconButton-colorPrimary",
      "colorSecondary": "MuiIconButton-colorSecondary",
      "colorSuccess": "MuiIconButton-colorSuccess",
      "colorWarning": "MuiIconButton-colorWarning",
      "disabled": "Mui-disabled",
      "edgeEnd": "MuiIconButton-edgeEnd",
      "edgeStart": "MuiIconButton-edgeStart",
      "root": "MuiIconButton-root",
      "sizeLarge": "MuiIconButton-sizeLarge",
      "sizeMedium": "MuiIconButton-sizeMedium",
      "sizeSmall": "MuiIconButton-sizeSmall",
    },
    "iconClasses": {
      "colorAction": "MuiIcon-colorAction",
      "colorDisabled": "MuiIcon-colorDisabled",
      "colorError": "MuiIcon-colorError",
      "colorPrimary": "MuiIcon-colorPrimary",
      "colorSecondary": "MuiIcon-colorSecondary",
      "fontSizeInherit": "MuiIcon-fontSizeInherit",
      "fontSizeLarge": "MuiIcon-fontSizeLarge",
      "fontSizeMedium": "MuiIcon-fontSizeMedium",
      "fontSizeSmall": "MuiIcon-fontSizeSmall",
      "root": "MuiIcon-root",
    },
    "imageListClasses": {
      "masonry": "MuiImageList-masonry",
      "quilted": "MuiImageList-quilted",
      "root": "MuiImageList-root",
      "standard": "MuiImageList-standard",
      "woven": "MuiImageList-woven",
    },
    "imageListItemBarClasses": {
      "actionIcon": "MuiImageListItemBar-actionIcon",
      "actionIconActionPosLeft": "MuiImageListItemBar-actionIconActionPosLeft",
      "actionIconActionPosRight": "MuiImageListItemBar-actionIconActionPosRight",
      "positionBelow": "MuiImageListItemBar-positionBelow",
      "positionBottom": "MuiImageListItemBar-positionBottom",
      "positionTop": "MuiImageListItemBar-positionTop",
      "root": "MuiImageListItemBar-root",
      "subtitle": "MuiImageListItemBar-subtitle",
      "title": "MuiImageListItemBar-title",
      "titleWrap": "MuiImageListItemBar-titleWrap",
      "titleWrapActionPosLeft": "MuiImageListItemBar-titleWrapActionPosLeft",
      "titleWrapActionPosRight": "MuiImageListItemBar-titleWrapActionPosRight",
      "titleWrapBelow": "MuiImageListItemBar-titleWrapBelow",
      "titleWrapBottom": "MuiImageListItemBar-titleWrapBottom",
      "titleWrapTop": "MuiImageListItemBar-titleWrapTop",
    },
    "imageListItemClasses": {
      "img": "MuiImageListItem-img",
      "masonry": "MuiImageListItem-masonry",
      "quilted": "MuiImageListItem-quilted",
      "root": "MuiImageListItem-root",
      "standard": "MuiImageListItem-standard",
      "woven": "MuiImageListItem-woven",
    },
    "inputAdornmentClasses": {
      "disablePointerEvents": "MuiInputAdornment-disablePointerEvents",
      "filled": "MuiInputAdornment-filled",
      "hiddenLabel": "MuiInputAdornment-hiddenLabel",
      "outlined": "MuiInputAdornment-outlined",
      "positionEnd": "MuiInputAdornment-positionEnd",
      "positionStart": "MuiInputAdornment-positionStart",
      "root": "MuiInputAdornment-root",
      "sizeSmall": "MuiInputAdornment-sizeSmall",
      "standard": "MuiInputAdornment-standard",
    },
    "inputBaseClasses": {
      "adornedEnd": "MuiInputBase-adornedEnd",
      "adornedStart": "MuiInputBase-adornedStart",
      "colorSecondary": "MuiInputBase-colorSecondary",
      "disabled": "Mui-disabled",
      "error": "Mui-error",
      "focused": "Mui-focused",
      "formControl": "MuiInputBase-formControl",
      "fullWidth": "MuiInputBase-fullWidth",
      "hiddenLabel": "MuiInputBase-hiddenLabel",
      "input": "MuiInputBase-input",
      "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
      "inputAdornedStart": "MuiInputBase-inputAdornedStart",
      "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
      "inputMultiline": "MuiInputBase-inputMultiline",
      "inputSizeSmall": "MuiInputBase-inputSizeSmall",
      "inputTypeSearch": "MuiInputBase-inputTypeSearch",
      "multiline": "MuiInputBase-multiline",
      "readOnly": "Mui-readOnly",
      "root": "MuiInputBase-root",
      "sizeSmall": "MuiInputBase-sizeSmall",
    },
    "inputClasses": {
      "adornedEnd": "MuiInputBase-adornedEnd",
      "adornedStart": "MuiInputBase-adornedStart",
      "colorSecondary": "MuiInputBase-colorSecondary",
      "disabled": "Mui-disabled",
      "error": "Mui-error",
      "focused": "Mui-focused",
      "formControl": "MuiInputBase-formControl",
      "fullWidth": "MuiInputBase-fullWidth",
      "hiddenLabel": "MuiInputBase-hiddenLabel",
      "input": "MuiInput-input",
      "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
      "inputAdornedStart": "MuiInputBase-inputAdornedStart",
      "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
      "inputMultiline": "MuiInputBase-inputMultiline",
      "inputSizeSmall": "MuiInputBase-inputSizeSmall",
      "inputTypeSearch": "MuiInputBase-inputTypeSearch",
      "multiline": "MuiInputBase-multiline",
      "readOnly": "Mui-readOnly",
      "root": "MuiInput-root",
      "sizeSmall": "MuiInputBase-sizeSmall",
      "underline": "MuiInput-underline",
    },
    "inputLabelClasses": {
      "animated": "MuiInputLabel-animated",
      "asterisk": "MuiInputLabel-asterisk",
      "disabled": "Mui-disabled",
      "error": "Mui-error",
      "filled": "MuiInputLabel-filled",
      "focused": "Mui-focused",
      "formControl": "MuiInputLabel-formControl",
      "outlined": "MuiInputLabel-outlined",
      "required": "Mui-required",
      "root": "MuiInputLabel-root",
      "shrink": "MuiInputLabel-shrink",
      "sizeSmall": "MuiInputLabel-sizeSmall",
      "standard": "MuiInputLabel-standard",
    },
    "isMuiElement": [Function],
    "keyframes": [Function],
    "lighten": [Function],
    "linearProgressClasses": {
      "bar": "MuiLinearProgress-bar",
      "bar1Buffer": "MuiLinearProgress-bar1Buffer",
      "bar1Determinate": "MuiLinearProgress-bar1Determinate",
      "bar1Indeterminate": "MuiLinearProgress-bar1Indeterminate",
      "bar2Buffer": "MuiLinearProgress-bar2Buffer",
      "bar2Indeterminate": "MuiLinearProgress-bar2Indeterminate",
      "barColorPrimary": "MuiLinearProgress-barColorPrimary",
      "barColorSecondary": "MuiLinearProgress-barColorSecondary",
      "buffer": "MuiLinearProgress-buffer",
      "colorPrimary": "MuiLinearProgress-colorPrimary",
      "colorSecondary": "MuiLinearProgress-colorSecondary",
      "dashed": "MuiLinearProgress-dashed",
      "dashedColorPrimary": "MuiLinearProgress-dashedColorPrimary",
      "dashedColorSecondary": "MuiLinearProgress-dashedColorSecondary",
      "determinate": "MuiLinearProgress-determinate",
      "indeterminate": "MuiLinearProgress-indeterminate",
      "query": "MuiLinearProgress-query",
      "root": "MuiLinearProgress-root",
    },
    "linkClasses": {
      "button": "MuiLink-button",
      "focusVisible": "Mui-focusVisible",
      "root": "MuiLink-root",
      "underlineAlways": "MuiLink-underlineAlways",
      "underlineHover": "MuiLink-underlineHover",
      "underlineNone": "MuiLink-underlineNone",
    },
    "listClasses": {
      "dense": "MuiList-dense",
      "padding": "MuiList-padding",
      "root": "MuiList-root",
      "subheader": "MuiList-subheader",
    },
    "listItemAvatarClasses": {
      "alignItemsFlexStart": "MuiListItemAvatar-alignItemsFlexStart",
      "root": "MuiListItemAvatar-root",
    },
    "listItemButtonClasses": {
      "alignItemsFlexStart": "MuiListItemButton-alignItemsFlexStart",
      "dense": "MuiListItemButton-dense",
      "disabled": "Mui-disabled",
      "divider": "MuiListItemButton-divider",
      "focusVisible": "Mui-focusVisible",
      "gutters": "MuiListItemButton-gutters",
      "root": "MuiListItemButton-root",
      "selected": "Mui-selected",
    },
    "listItemClasses": {
      "alignItemsFlexStart": "MuiListItem-alignItemsFlexStart",
      "button": "MuiListItem-button",
      "container": "MuiListItem-container",
      "dense": "MuiListItem-dense",
      "disabled": "Mui-disabled",
      "divider": "MuiListItem-divider",
      "focusVisible": "Mui-focusVisible",
      "gutters": "MuiListItem-gutters",
      "padding": "MuiListItem-padding",
      "root": "MuiListItem-root",
      "secondaryAction": "MuiListItem-secondaryAction",
      "selected": "Mui-selected",
    },
    "listItemIconClasses": {
      "alignItemsFlexStart": "MuiListItemIcon-alignItemsFlexStart",
      "root": "MuiListItemIcon-root",
    },
    "listItemSecondaryActionClasses": {
      "disableGutters": "MuiListItemSecondaryAction-disableGutters",
      "root": "MuiListItemSecondaryAction-root",
    },
    "listItemTextClasses": {
      "dense": "MuiListItemText-dense",
      "inset": "MuiListItemText-inset",
      "multiline": "MuiListItemText-multiline",
      "primary": "MuiListItemText-primary",
      "root": "MuiListItemText-root",
      "secondary": "MuiListItemText-secondary",
    },
    "listSubheaderClasses": {
      "colorInherit": "MuiListSubheader-colorInherit",
      "colorPrimary": "MuiListSubheader-colorPrimary",
      "gutters": "MuiListSubheader-gutters",
      "inset": "MuiListSubheader-inset",
      "root": "MuiListSubheader-root",
      "sticky": "MuiListSubheader-sticky",
    },
    "major": 5,
    "makeStyles": [Function],
    "menuClasses": {
      "list": "MuiMenu-list",
      "paper": "MuiMenu-paper",
      "root": "MuiMenu-root",
    },
    "menuItemClasses": {
      "dense": "MuiMenuItem-dense",
      "disabled": "Mui-disabled",
      "divider": "MuiMenuItem-divider",
      "focusVisible": "Mui-focusVisible",
      "gutters": "MuiMenuItem-gutters",
      "root": "MuiMenuItem-root",
      "selected": "Mui-selected",
    },
    "minor": 16,
    "mobileStepperClasses": {
      "dot": "MuiMobileStepper-dot",
      "dotActive": "MuiMobileStepper-dotActive",
      "dots": "MuiMobileStepper-dots",
      "positionBottom": "MuiMobileStepper-positionBottom",
      "positionStatic": "MuiMobileStepper-positionStatic",
      "positionTop": "MuiMobileStepper-positionTop",
      "progress": "MuiMobileStepper-progress",
      "root": "MuiMobileStepper-root",
    },
    "modalClasses": {
      "backdrop": "MuiModal-backdrop",
      "hidden": "MuiModal-hidden",
      "root": "MuiModal-root",
    },
    "nativeSelectClasses": {
      "disabled": "Mui-disabled",
      "error": "Mui-error",
      "filled": "MuiNativeSelect-filled",
      "icon": "MuiNativeSelect-icon",
      "iconFilled": "MuiNativeSelect-iconFilled",
      "iconOpen": "MuiNativeSelect-iconOpen",
      "iconOutlined": "MuiNativeSelect-iconOutlined",
      "iconStandard": "MuiNativeSelect-iconStandard",
      "multiple": "MuiNativeSelect-multiple",
      "nativeInput": "MuiNativeSelect-nativeInput",
      "outlined": "MuiNativeSelect-outlined",
      "root": "MuiNativeSelect-root",
      "select": "MuiNativeSelect-select",
      "standard": "MuiNativeSelect-standard",
    },
    "outlinedInputClasses": {
      "adornedEnd": "MuiInputBase-adornedEnd",
      "adornedStart": "MuiInputBase-adornedStart",
      "colorSecondary": "MuiInputBase-colorSecondary",
      "disabled": "Mui-disabled",
      "error": "Mui-error",
      "focused": "Mui-focused",
      "formControl": "MuiInputBase-formControl",
      "fullWidth": "MuiInputBase-fullWidth",
      "hiddenLabel": "MuiInputBase-hiddenLabel",
      "input": "MuiOutlinedInput-input",
      "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
      "inputAdornedStart": "MuiInputBase-inputAdornedStart",
      "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
      "inputMultiline": "MuiInputBase-inputMultiline",
      "inputSizeSmall": "MuiInputBase-inputSizeSmall",
      "inputTypeSearch": "MuiInputBase-inputTypeSearch",
      "multiline": "MuiInputBase-multiline",
      "notchedOutline": "MuiOutlinedInput-notchedOutline",
      "readOnly": "Mui-readOnly",
      "root": "MuiOutlinedInput-root",
      "sizeSmall": "MuiInputBase-sizeSmall",
    },
    "ownerDocument": [Function],
    "ownerWindow": [Function],
    "paginationClasses": {
      "outlined": "MuiPagination-outlined",
      "root": "MuiPagination-root",
      "text": "MuiPagination-text",
      "ul": "MuiPagination-ul",
    },
    "paginationItemClasses": {
      "colorPrimary": "MuiPaginationItem-colorPrimary",
      "colorSecondary": "MuiPaginationItem-colorSecondary",
      "disabled": "Mui-disabled",
      "ellipsis": "MuiPaginationItem-ellipsis",
      "firstLast": "MuiPaginationItem-firstLast",
      "focusVisible": "Mui-focusVisible",
      "icon": "MuiPaginationItem-icon",
      "outlined": "MuiPaginationItem-outlined",
      "outlinedPrimary": "MuiPaginationItem-outlinedPrimary",
      "outlinedSecondary": "MuiPaginationItem-outlinedSecondary",
      "page": "MuiPaginationItem-page",
      "previousNext": "MuiPaginationItem-previousNext",
      "root": "MuiPaginationItem-root",
      "rounded": "MuiPaginationItem-rounded",
      "selected": "Mui-selected",
      "sizeLarge": "MuiPaginationItem-sizeLarge",
      "sizeSmall": "MuiPaginationItem-sizeSmall",
      "text": "MuiPaginationItem-text",
      "textPrimary": "MuiPaginationItem-textPrimary",
      "textSecondary": "MuiPaginationItem-textSecondary",
    },
    "paperClasses": {
      "elevation": "MuiPaper-elevation",
      "elevation0": "MuiPaper-elevation0",
      "elevation1": "MuiPaper-elevation1",
      "elevation10": "MuiPaper-elevation10",
      "elevation11": "MuiPaper-elevation11",
      "elevation12": "MuiPaper-elevation12",
      "elevation13": "MuiPaper-elevation13",
      "elevation14": "MuiPaper-elevation14",
      "elevation15": "MuiPaper-elevation15",
      "elevation16": "MuiPaper-elevation16",
      "elevation17": "MuiPaper-elevation17",
      "elevation18": "MuiPaper-elevation18",
      "elevation19": "MuiPaper-elevation19",
      "elevation2": "MuiPaper-elevation2",
      "elevation20": "MuiPaper-elevation20",
      "elevation21": "MuiPaper-elevation21",
      "elevation22": "MuiPaper-elevation22",
      "elevation23": "MuiPaper-elevation23",
      "elevation24": "MuiPaper-elevation24",
      "elevation3": "MuiPaper-elevation3",
      "elevation4": "MuiPaper-elevation4",
      "elevation5": "MuiPaper-elevation5",
      "elevation6": "MuiPaper-elevation6",
      "elevation7": "MuiPaper-elevation7",
      "elevation8": "MuiPaper-elevation8",
      "elevation9": "MuiPaper-elevation9",
      "outlined": "MuiPaper-outlined",
      "root": "MuiPaper-root",
      "rounded": "MuiPaper-rounded",
    },
    "patch": 7,
    "popoverClasses": {
      "paper": "MuiPopover-paper",
      "root": "MuiPopover-root",
    },
    "preReleaseLabel": null,
    "preReleaseNumber": null,
    "private_createMixins": [Function],
    "private_createTypography": [Function],
    "private_excludeVariablesFromRoot": [Function],
    "radioClasses": {
      "checked": "Mui-checked",
      "colorPrimary": "MuiRadio-colorPrimary",
      "colorSecondary": "MuiRadio-colorSecondary",
      "disabled": "Mui-disabled",
      "root": "MuiRadio-root",
      "sizeSmall": "MuiRadio-sizeSmall",
    },
    "radioGroupClasses": {
      "error": "Mui-error",
      "root": "MuiRadioGroup-root",
      "row": "MuiRadioGroup-row",
    },
    "ratingClasses": {
      "decimal": "MuiRating-decimal",
      "disabled": "Mui-disabled",
      "focusVisible": "Mui-focusVisible",
      "icon": "MuiRating-icon",
      "iconActive": "MuiRating-iconActive",
      "iconEmpty": "MuiRating-iconEmpty",
      "iconFilled": "MuiRating-iconFilled",
      "iconFocus": "MuiRating-iconFocus",
      "iconHover": "MuiRating-iconHover",
      "label": "MuiRating-label",
      "labelEmptyValueActive": "MuiRating-labelEmptyValueActive",
      "pristine": "MuiRating-pristine",
      "readOnly": "Mui-readOnly",
      "root": "MuiRating-root",
      "sizeLarge": "MuiRating-sizeLarge",
      "sizeMedium": "MuiRating-sizeMedium",
      "sizeSmall": "MuiRating-sizeSmall",
      "visuallyHidden": "MuiRating-visuallyHidden",
    },
    "recomposeColor": [Function],
    "requirePropFactory": [Function],
    "responsiveFontSizes": [Function],
    "rgbToHex": [Function],
    "scopedCssBaselineClasses": {
      "root": "MuiScopedCssBaseline-root",
    },
    "selectClasses": {
      "disabled": "Mui-disabled",
      "error": "Mui-error",
      "filled": "MuiSelect-filled",
      "focused": "Mui-focused",
      "icon": "MuiSelect-icon",
      "iconFilled": "MuiSelect-iconFilled",
      "iconOpen": "MuiSelect-iconOpen",
      "iconOutlined": "MuiSelect-iconOutlined",
      "iconStandard": "MuiSelect-iconStandard",
      "multiple": "MuiSelect-multiple",
      "nativeInput": "MuiSelect-nativeInput",
      "outlined": "MuiSelect-outlined",
      "root": "MuiSelect-root",
      "select": "MuiSelect-select",
      "standard": "MuiSelect-standard",
    },
    "setRef": [Function],
    "shouldSkipGeneratingVar": [Function],
    "skeletonClasses": {
      "circular": "MuiSkeleton-circular",
      "fitContent": "MuiSkeleton-fitContent",
      "heightAuto": "MuiSkeleton-heightAuto",
      "pulse": "MuiSkeleton-pulse",
      "rectangular": "MuiSkeleton-rectangular",
      "root": "MuiSkeleton-root",
      "rounded": "MuiSkeleton-rounded",
      "text": "MuiSkeleton-text",
      "wave": "MuiSkeleton-wave",
      "withChildren": "MuiSkeleton-withChildren",
    },
    "sliderClasses": {
      "active": "Mui-active",
      "colorError": "MuiSlider-colorError",
      "colorInfo": "MuiSlider-colorInfo",
      "colorPrimary": "MuiSlider-colorPrimary",
      "colorSecondary": "MuiSlider-colorSecondary",
      "colorSuccess": "MuiSlider-colorSuccess",
      "colorWarning": "MuiSlider-colorWarning",
      "disabled": "Mui-disabled",
      "dragging": "MuiSlider-dragging",
      "focusVisible": "Mui-focusVisible",
      "mark": "MuiSlider-mark",
      "markActive": "MuiSlider-markActive",
      "markLabel": "MuiSlider-markLabel",
      "markLabelActive": "MuiSlider-markLabelActive",
      "marked": "MuiSlider-marked",
      "rail": "MuiSlider-rail",
      "root": "MuiSlider-root",
      "sizeSmall": "MuiSlider-sizeSmall",
      "thumb": "MuiSlider-thumb",
      "thumbColorError": "MuiSlider-thumbColorError",
      "thumbColorInfo": "MuiSlider-thumbColorInfo",
      "thumbColorPrimary": "MuiSlider-thumbColorPrimary",
      "thumbColorSecondary": "MuiSlider-thumbColorSecondary",
      "thumbColorSuccess": "MuiSlider-thumbColorSuccess",
      "thumbColorWarning": "MuiSlider-thumbColorWarning",
      "thumbSizeSmall": "MuiSlider-thumbSizeSmall",
      "track": "MuiSlider-track",
      "trackFalse": "MuiSlider-trackFalse",
      "trackInverted": "MuiSlider-trackInverted",
      "valueLabel": "MuiSlider-valueLabel",
      "valueLabelCircle": "MuiSlider-valueLabelCircle",
      "valueLabelLabel": "MuiSlider-valueLabelLabel",
      "valueLabelOpen": "MuiSlider-valueLabelOpen",
      "vertical": "MuiSlider-vertical",
    },
    "snackbarClasses": {
      "anchorOriginBottomCenter": "MuiSnackbar-anchorOriginBottomCenter",
      "anchorOriginBottomLeft": "MuiSnackbar-anchorOriginBottomLeft",
      "anchorOriginBottomRight": "MuiSnackbar-anchorOriginBottomRight",
      "anchorOriginTopCenter": "MuiSnackbar-anchorOriginTopCenter",
      "anchorOriginTopLeft": "MuiSnackbar-anchorOriginTopLeft",
      "anchorOriginTopRight": "MuiSnackbar-anchorOriginTopRight",
      "root": "MuiSnackbar-root",
    },
    "snackbarContentClasses": {
      "action": "MuiSnackbarContent-action",
      "message": "MuiSnackbarContent-message",
      "root": "MuiSnackbarContent-root",
    },
    "speedDialActionClasses": {
      "fab": "MuiSpeedDialAction-fab",
      "fabClosed": "MuiSpeedDialAction-fabClosed",
      "staticTooltip": "MuiSpeedDialAction-staticTooltip",
      "staticTooltipClosed": "MuiSpeedDialAction-staticTooltipClosed",
      "staticTooltipLabel": "MuiSpeedDialAction-staticTooltipLabel",
      "tooltipPlacementLeft": "MuiSpeedDialAction-tooltipPlacementLeft",
      "tooltipPlacementRight": "MuiSpeedDialAction-tooltipPlacementRight",
    },
    "speedDialClasses": {
      "actions": "MuiSpeedDial-actions",
      "actionsClosed": "MuiSpeedDial-actionsClosed",
      "directionDown": "MuiSpeedDial-directionDown",
      "directionLeft": "MuiSpeedDial-directionLeft",
      "directionRight": "MuiSpeedDial-directionRight",
      "directionUp": "MuiSpeedDial-directionUp",
      "fab": "MuiSpeedDial-fab",
      "root": "MuiSpeedDial-root",
    },
    "speedDialIconClasses": {
      "icon": "MuiSpeedDialIcon-icon",
      "iconOpen": "MuiSpeedDialIcon-iconOpen",
      "iconWithOpenIconOpen": "MuiSpeedDialIcon-iconWithOpenIconOpen",
      "openIcon": "MuiSpeedDialIcon-openIcon",
      "openIconOpen": "MuiSpeedDialIcon-openIconOpen",
      "root": "MuiSpeedDialIcon-root",
    },
    "stackClasses": {
      "root": "MuiStack-root",
    },
    "stepButtonClasses": {
      "horizontal": "MuiStepButton-horizontal",
      "root": "MuiStepButton-root",
      "touchRipple": "MuiStepButton-touchRipple",
      "vertical": "MuiStepButton-vertical",
    },
    "stepClasses": {
      "alternativeLabel": "MuiStep-alternativeLabel",
      "completed": "Mui-completed",
      "horizontal": "MuiStep-horizontal",
      "root": "MuiStep-root",
      "vertical": "MuiStep-vertical",
    },
    "stepConnectorClasses": {
      "active": "Mui-active",
      "alternativeLabel": "MuiStepConnector-alternativeLabel",
      "completed": "Mui-completed",
      "disabled": "Mui-disabled",
      "horizontal": "MuiStepConnector-horizontal",
      "line": "MuiStepConnector-line",
      "lineHorizontal": "MuiStepConnector-lineHorizontal",
      "lineVertical": "MuiStepConnector-lineVertical",
      "root": "MuiStepConnector-root",
      "vertical": "MuiStepConnector-vertical",
    },
    "stepContentClasses": {
      "last": "MuiStepContent-last",
      "root": "MuiStepContent-root",
      "transition": "MuiStepContent-transition",
    },
    "stepIconClasses": {
      "active": "Mui-active",
      "completed": "Mui-completed",
      "error": "Mui-error",
      "root": "MuiStepIcon-root",
      "text": "MuiStepIcon-text",
    },
    "stepLabelClasses": {
      "active": "Mui-active",
      "alternativeLabel": "MuiStepLabel-alternativeLabel",
      "completed": "Mui-completed",
      "disabled": "Mui-disabled",
      "error": "Mui-error",
      "horizontal": "MuiStepLabel-horizontal",
      "iconContainer": "MuiStepLabel-iconContainer",
      "label": "MuiStepLabel-label",
      "labelContainer": "MuiStepLabel-labelContainer",
      "root": "MuiStepLabel-root",
      "vertical": "MuiStepLabel-vertical",
    },
    "stepperClasses": {
      "alternativeLabel": "MuiStepper-alternativeLabel",
      "horizontal": "MuiStepper-horizontal",
      "nonLinear": "MuiStepper-nonLinear",
      "root": "MuiStepper-root",
      "vertical": "MuiStepper-vertical",
    },
    "styled": [Function],
    "styles": {
      "Experimental_CssVarsProvider": [Function],
      "StyledEngineProvider": [Function],
      "THEME_ID": "$$material",
      "ThemeProvider": [Function],
      "adaptV4Theme": [Function],
      "alpha": [Function],
      "createMuiTheme": [Function],
      "createStyles": [Function],
      "createTheme": [Function],
      "css": [Function],
      "darken": [Function],
      "decomposeColor": [Function],
      "duration": {
        "complex": 375,
        "enteringScreen": 225,
        "leavingScreen": 195,
        "short": 250,
        "shorter": 200,
        "shortest": 150,
        "standard": 300,
      },
      "easing": {
        "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
        "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
        "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
        "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
      },
      "emphasize": [Function],
      "experimentalStyled": [Function],
      "experimental_extendTheme": [Function],
      "experimental_sx": [Function],
      "getContrastRatio": [Function],
      "getInitColorSchemeScript": [Function],
      "getLuminance": [Function],
      "getOverlayAlpha": [Function],
      "hexToRgb": [Function],
      "hslToRgb": [Function],
      "keyframes": [Function],
      "lighten": [Function],
      "makeStyles": [Function],
      "private_createMixins": [Function],
      "private_createTypography": [Function],
      "private_excludeVariablesFromRoot": [Function],
      "recomposeColor": [Function],
      "responsiveFontSizes": [Function],
      "rgbToHex": [Function],
      "shouldSkipGeneratingVar": [Function],
      "styled": [Function],
      "unstable_createMuiStrictModeTheme": [Function],
      "unstable_getUnit": [Function],
      "unstable_toUnitless": [Function],
      "useColorScheme": [Function],
      "useTheme": [Function],
      "useThemeProps": [Function],
      "withStyles": [Function],
      "withTheme": [Function],
    },
    "svgIconClasses": {
      "colorAction": "MuiSvgIcon-colorAction",
      "colorDisabled": "MuiSvgIcon-colorDisabled",
      "colorError": "MuiSvgIcon-colorError",
      "colorPrimary": "MuiSvgIcon-colorPrimary",
      "colorSecondary": "MuiSvgIcon-colorSecondary",
      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
      "fontSizeMedium": "MuiSvgIcon-fontSizeMedium",
      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
      "root": "MuiSvgIcon-root",
    },
    "switchClasses": {
      "checked": "Mui-checked",
      "colorPrimary": "MuiSwitch-colorPrimary",
      "colorSecondary": "MuiSwitch-colorSecondary",
      "disabled": "Mui-disabled",
      "edgeEnd": "MuiSwitch-edgeEnd",
      "edgeStart": "MuiSwitch-edgeStart",
      "input": "MuiSwitch-input",
      "root": "MuiSwitch-root",
      "sizeMedium": "MuiSwitch-sizeMedium",
      "sizeSmall": "MuiSwitch-sizeSmall",
      "switchBase": "MuiSwitch-switchBase",
      "thumb": "MuiSwitch-thumb",
      "track": "MuiSwitch-track",
    },
    "tabClasses": {
      "disabled": "Mui-disabled",
      "fullWidth": "MuiTab-fullWidth",
      "iconWrapper": "MuiTab-iconWrapper",
      "labelIcon": "MuiTab-labelIcon",
      "root": "MuiTab-root",
      "selected": "Mui-selected",
      "textColorInherit": "MuiTab-textColorInherit",
      "textColorPrimary": "MuiTab-textColorPrimary",
      "textColorSecondary": "MuiTab-textColorSecondary",
      "wrapped": "MuiTab-wrapped",
    },
    "tabScrollButtonClasses": {
      "disabled": "Mui-disabled",
      "horizontal": "MuiTabScrollButton-horizontal",
      "root": "MuiTabScrollButton-root",
      "vertical": "MuiTabScrollButton-vertical",
    },
    "tableBodyClasses": {
      "root": "MuiTableBody-root",
    },
    "tableCellClasses": {
      "alignCenter": "MuiTableCell-alignCenter",
      "alignJustify": "MuiTableCell-alignJustify",
      "alignLeft": "MuiTableCell-alignLeft",
      "alignRight": "MuiTableCell-alignRight",
      "body": "MuiTableCell-body",
      "footer": "MuiTableCell-footer",
      "head": "MuiTableCell-head",
      "paddingCheckbox": "MuiTableCell-paddingCheckbox",
      "paddingNone": "MuiTableCell-paddingNone",
      "root": "MuiTableCell-root",
      "sizeMedium": "MuiTableCell-sizeMedium",
      "sizeSmall": "MuiTableCell-sizeSmall",
      "stickyHeader": "MuiTableCell-stickyHeader",
    },
    "tableClasses": {
      "root": "MuiTable-root",
      "stickyHeader": "MuiTable-stickyHeader",
    },
    "tableContainerClasses": {
      "root": "MuiTableContainer-root",
    },
    "tableFooterClasses": {
      "root": "MuiTableFooter-root",
    },
    "tableHeadClasses": {
      "root": "MuiTableHead-root",
    },
    "tablePaginationClasses": {
      "actions": "MuiTablePagination-actions",
      "displayedRows": "MuiTablePagination-displayedRows",
      "input": "MuiTablePagination-input",
      "menuItem": "MuiTablePagination-menuItem",
      "root": "MuiTablePagination-root",
      "select": "MuiTablePagination-select",
      "selectIcon": "MuiTablePagination-selectIcon",
      "selectLabel": "MuiTablePagination-selectLabel",
      "selectRoot": "MuiTablePagination-selectRoot",
      "spacer": "MuiTablePagination-spacer",
      "toolbar": "MuiTablePagination-toolbar",
    },
    "tableRowClasses": {
      "footer": "MuiTableRow-footer",
      "head": "MuiTableRow-head",
      "hover": "MuiTableRow-hover",
      "root": "MuiTableRow-root",
      "selected": "Mui-selected",
    },
    "tableSortLabelClasses": {
      "active": "Mui-active",
      "icon": "MuiTableSortLabel-icon",
      "iconDirectionAsc": "MuiTableSortLabel-iconDirectionAsc",
      "iconDirectionDesc": "MuiTableSortLabel-iconDirectionDesc",
      "root": "MuiTableSortLabel-root",
    },
    "tabsClasses": {
      "centered": "MuiTabs-centered",
      "fixed": "MuiTabs-fixed",
      "flexContainer": "MuiTabs-flexContainer",
      "flexContainerVertical": "MuiTabs-flexContainerVertical",
      "hideScrollbar": "MuiTabs-hideScrollbar",
      "indicator": "MuiTabs-indicator",
      "root": "MuiTabs-root",
      "scrollButtons": "MuiTabs-scrollButtons",
      "scrollButtonsHideMobile": "MuiTabs-scrollButtonsHideMobile",
      "scrollableX": "MuiTabs-scrollableX",
      "scrollableY": "MuiTabs-scrollableY",
      "scroller": "MuiTabs-scroller",
      "vertical": "MuiTabs-vertical",
    },
    "textFieldClasses": {
      "root": "MuiTextField-root",
    },
    "toggleButtonClasses": {
      "disabled": "Mui-disabled",
      "fullWidth": "MuiToggleButton-fullWidth",
      "primary": "MuiToggleButton-primary",
      "root": "MuiToggleButton-root",
      "secondary": "MuiToggleButton-secondary",
      "selected": "Mui-selected",
      "sizeLarge": "MuiToggleButton-sizeLarge",
      "sizeMedium": "MuiToggleButton-sizeMedium",
      "sizeSmall": "MuiToggleButton-sizeSmall",
      "standard": "MuiToggleButton-standard",
    },
    "toggleButtonGroupClasses": {
      "disabled": "Mui-disabled",
      "firstButton": "MuiToggleButtonGroup-firstButton",
      "fullWidth": "MuiToggleButtonGroup-fullWidth",
      "grouped": "MuiToggleButtonGroup-grouped",
      "groupedHorizontal": "MuiToggleButtonGroup-groupedHorizontal",
      "groupedVertical": "MuiToggleButtonGroup-groupedVertical",
      "horizontal": "MuiToggleButtonGroup-horizontal",
      "lastButton": "MuiToggleButtonGroup-lastButton",
      "middleButton": "MuiToggleButtonGroup-middleButton",
      "root": "MuiToggleButtonGroup-root",
      "selected": "Mui-selected",
      "vertical": "MuiToggleButtonGroup-vertical",
    },
    "toolbarClasses": {
      "dense": "MuiToolbar-dense",
      "gutters": "MuiToolbar-gutters",
      "regular": "MuiToolbar-regular",
      "root": "MuiToolbar-root",
    },
    "tooltipClasses": {
      "arrow": "MuiTooltip-arrow",
      "popper": "MuiTooltip-popper",
      "popperArrow": "MuiTooltip-popperArrow",
      "popperClose": "MuiTooltip-popperClose",
      "popperInteractive": "MuiTooltip-popperInteractive",
      "tooltip": "MuiTooltip-tooltip",
      "tooltipArrow": "MuiTooltip-tooltipArrow",
      "tooltipPlacementBottom": "MuiTooltip-tooltipPlacementBottom",
      "tooltipPlacementLeft": "MuiTooltip-tooltipPlacementLeft",
      "tooltipPlacementRight": "MuiTooltip-tooltipPlacementRight",
      "tooltipPlacementTop": "MuiTooltip-tooltipPlacementTop",
      "touch": "MuiTooltip-touch",
    },
    "touchRippleClasses": {
      "child": "MuiTouchRipple-child",
      "childLeaving": "MuiTouchRipple-childLeaving",
      "childPulsate": "MuiTouchRipple-childPulsate",
      "ripple": "MuiTouchRipple-ripple",
      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
      "rippleVisible": "MuiTouchRipple-rippleVisible",
      "root": "MuiTouchRipple-root",
    },
    "typographyClasses": {
      "alignCenter": "MuiTypography-alignCenter",
      "alignJustify": "MuiTypography-alignJustify",
      "alignLeft": "MuiTypography-alignLeft",
      "alignRight": "MuiTypography-alignRight",
      "body1": "MuiTypography-body1",
      "body2": "MuiTypography-body2",
      "button": "MuiTypography-button",
      "caption": "MuiTypography-caption",
      "gutterBottom": "MuiTypography-gutterBottom",
      "h1": "MuiTypography-h1",
      "h2": "MuiTypography-h2",
      "h3": "MuiTypography-h3",
      "h4": "MuiTypography-h4",
      "h5": "MuiTypography-h5",
      "h6": "MuiTypography-h6",
      "inherit": "MuiTypography-inherit",
      "noWrap": "MuiTypography-noWrap",
      "overline": "MuiTypography-overline",
      "paragraph": "MuiTypography-paragraph",
      "root": "MuiTypography-root",
      "subtitle1": "MuiTypography-subtitle1",
      "subtitle2": "MuiTypography-subtitle2",
    },
    "unstable_ClassNameGenerator": {
      "configure": [Function],
    },
    "unstable_composeClasses": [Function],
    "unstable_createMuiStrictModeTheme": [Function],
    "unstable_getUnit": [Function],
    "unstable_toUnitless": [Function],
    "unstable_useEnhancedEffect": [Function],
    "unstable_useId": [Function],
    "unsupportedProp": [Function],
    "useAutocomplete": [Function],
    "useColorScheme": [Function],
    "useControlled": [Function],
    "useEventCallback": [Function],
    "useForkRef": [Function],
    "useFormControl": [Function],
    "useIsFocusVisible": [Function],
    "useMediaQuery": [Function],
    "usePagination": [Function],
    "useRadioGroup": [Function],
    "useScrollTrigger": [Function],
    "useStepContext": [Function],
    "useStepperContext": [Function],
    "useTheme": [Function],
    "useThemeProps": [Function],
    "version": "5.16.7",
    "withStyles": [Function],
    "withTheme": [Function],
  },
  "MuiLab": {
    "Alert": {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
    "AlertTitle": {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
    "Autocomplete": {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
    "AvatarGroup": {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
    "CalendarPicker": {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
    "CalendarPickerSkeleton": {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
    "ClockPicker": {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
    "DatePicker": {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
    "DateRangePicker": {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
    "DateRangePickerDay": {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
    "DateTimePicker": {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
    "DesktopDatePicker": {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
    "DesktopDateRangePicker": {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
    "DesktopDateTimePicker": {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
    "DesktopTimePicker": {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
    "LoadingButton": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "classes": [Function],
        "disabled": [Function],
        "id": [Function],
        "loading": [Function],
        "loadingIndicator": [Function],
        "loadingPosition": [Function],
        "sx": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "LocalizationProvider": {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
    "Masonry": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "columns": [Function],
        "component": [Function],
        "defaultColumns": [Function],
        "defaultHeight": [Function],
        "defaultSpacing": [Function],
        "sequential": [Function],
        "spacing": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "MobileDatePicker": {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
    "MobileDateRangePicker": {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
    "MobileDateTimePicker": {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
    "MobileTimePicker": {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
    "MonthPicker": {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
    "Pagination": {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
    "PaginationItem": {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
    "PickersDay": {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
    "Rating": {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
    "Skeleton": {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
    "SpeedDial": {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
    "SpeedDialAction": {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
    "SpeedDialIcon": {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
    "StaticDatePicker": {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
    "StaticDateRangePicker": {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
    "StaticDateTimePicker": {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
    "StaticTimePicker": {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
    "TabContext": [Function],
    "TabList": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
      },
      "render": [Function],
    },
    "TabPanel": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "sx": [Function],
        "value": [Function],
      },
      "render": [Function],
    },
    "TimePicker": {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
    "Timeline": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "position": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "TimelineConnector": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "TimelineContent": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "TimelineDot": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "sx": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "TimelineItem": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "position": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "TimelineOppositeContent": {
      "$$typeof": Symbol(react.forward_ref),
      "muiName": "TimelineOppositeContent",
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "TimelineSeparator": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "ToggleButton": {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
    "ToggleButtonGroup": {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
    "TreeItem": {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
    "TreeView": {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
    "YearPicker": [Function],
    "calendarPickerClasses": {},
    "calendarPickerSkeletonClasses": {},
    "clockPickerClasses": {},
    "getCalendarPickerSkeletonUtilityClass": [Function],
    "getDateRangePickerDayUtilityClass": [Function],
    "getLoadingButtonUtilityClass": [Function],
    "getMasonryUtilityClass": [Function],
    "getMonthPickerUtilityClass": [Function],
    "getPanelId": [Function],
    "getPickersDayUtilityClass": [Function],
    "getTabId": [Function],
    "getTabPanelUtilityClass": [Function],
    "getTimelineConnectorUtilityClass": [Function],
    "getTimelineContentUtilityClass": [Function],
    "getTimelineDotUtilityClass": [Function],
    "getTimelineItemUtilityClass": [Function],
    "getTimelineOppositeContentUtilityClass": [Function],
    "getTimelineSeparatorUtilityClass": [Function],
    "getTimelineUtilityClass": [Function],
    "getYearPickerUtilityClass": [Function],
    "loadingButtonClasses": {
      "endIconLoadingEnd": "MuiLoadingButton-endIconLoadingEnd",
      "loading": "MuiLoadingButton-loading",
      "loadingIndicator": "MuiLoadingButton-loadingIndicator",
      "loadingIndicatorCenter": "MuiLoadingButton-loadingIndicatorCenter",
      "loadingIndicatorEnd": "MuiLoadingButton-loadingIndicatorEnd",
      "loadingIndicatorStart": "MuiLoadingButton-loadingIndicatorStart",
      "root": "MuiLoadingButton-root",
      "startIconLoadingStart": "MuiLoadingButton-startIconLoadingStart",
    },
    "masonryClasses": {
      "root": "MuiMasonry-root",
    },
    "monthPickerClasses": {},
    "pickersDayClasses": {},
    "tabPanelClasses": {
      "root": "MuiTabPanel-root",
    },
    "timelineClasses": {
      "positionAlternate": "MuiTimeline-positionAlternate",
      "positionAlternateReverse": "MuiTimeline-positionAlternateReverse",
      "positionLeft": "MuiTimeline-positionLeft",
      "positionRight": "MuiTimeline-positionRight",
      "root": "MuiTimeline-root",
    },
    "timelineConnectorClasses": {
      "root": "MuiTimelineConnector-root",
    },
    "timelineContentClasses": {
      "positionAlternate": "MuiTimelineContent-positionAlternate",
      "positionAlternateReverse": "MuiTimelineContent-positionAlternateReverse",
      "positionLeft": "MuiTimelineContent-positionLeft",
      "positionRight": "MuiTimelineContent-positionRight",
      "root": "MuiTimelineContent-root",
    },
    "timelineDotClasses": {
      "filled": "MuiTimelineDot-filled",
      "filledGrey": "MuiTimelineDot-filledGrey",
      "filledPrimary": "MuiTimelineDot-filledPrimary",
      "filledSecondary": "MuiTimelineDot-filledSecondary",
      "outlined": "MuiTimelineDot-outlined",
      "outlinedGrey": "MuiTimelineDot-outlinedGrey",
      "outlinedPrimary": "MuiTimelineDot-outlinedPrimary",
      "outlinedSecondary": "MuiTimelineDot-outlinedSecondary",
      "root": "MuiTimelineDot-root",
    },
    "timelineItemClasses": {
      "missingOppositeContent": "MuiTimelineItem-missingOppositeContent",
      "positionAlternate": "MuiTimelineItem-positionAlternate",
      "positionAlternateReverse": "MuiTimelineItem-positionAlternateReverse",
      "positionLeft": "MuiTimelineItem-positionLeft",
      "positionRight": "MuiTimelineItem-positionRight",
      "root": "MuiTimelineItem-root",
    },
    "timelineOppositeContentClasses": {
      "positionAlternate": "MuiTimelineOppositeContent-positionAlternate",
      "positionAlternateReverse": "MuiTimelineOppositeContent-positionAlternateReverse",
      "positionLeft": "MuiTimelineOppositeContent-positionLeft",
      "positionRight": "MuiTimelineOppositeContent-positionRight",
      "root": "MuiTimelineOppositeContent-root",
    },
    "timelineSeparatorClasses": {
      "root": "MuiTimelineSeparator-root",
    },
    "useAutocomplete": [Function],
    "usePagination": [Function],
    "useTabContext": [Function],
    "yearPickerClasses": {},
  },
  "MuiMaterial": {
    "Accordion": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "TransitionComponent": [Function],
        "TransitionProps": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "defaultExpanded": [Function],
        "disableGutters": [Function],
        "disabled": [Function],
        "expanded": [Function],
        "onChange": [Function],
        "slotProps": [Function],
        "slots": [Function],
        "square": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "AccordionActions": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "disableSpacing": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "AccordionDetails": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "AccordionSummary": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "expandIcon": [Function],
        "focusVisibleClassName": [Function],
        "onClick": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "Alert": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "action": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "closeText": [Function],
        "color": [Function],
        "components": [Function],
        "componentsProps": [Function],
        "icon": [Function],
        "iconMapping": [Function],
        "onClose": [Function],
        "role": [Function],
        "severity": [Function],
        "slotProps": [Function],
        "slots": [Function],
        "sx": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "AlertTitle": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "AppBar": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "enableColorOnDark": [Function],
        "position": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "Autocomplete": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "ChipProps": [Function],
        "ListboxComponent": [Function],
        "ListboxProps": [Function],
        "PaperComponent": [Function],
        "PopperComponent": [Function],
        "autoComplete": [Function],
        "autoHighlight": [Function],
        "autoSelect": [Function],
        "blurOnSelect": [Function],
        "className": [Function],
        "classes": [Function],
        "clearIcon": [Function],
        "clearOnBlur": [Function],
        "clearOnEscape": [Function],
        "clearText": [Function],
        "closeText": [Function],
        "componentsProps": [Function],
        "defaultValue": [Function],
        "disableClearable": [Function],
        "disableCloseOnSelect": [Function],
        "disableListWrap": [Function],
        "disablePortal": [Function],
        "disabled": [Function],
        "disabledItemsFocusable": [Function],
        "filterOptions": [Function],
        "filterSelectedOptions": [Function],
        "forcePopupIcon": [Function],
        "freeSolo": [Function],
        "fullWidth": [Function],
        "getLimitTagsText": [Function],
        "getOptionDisabled": [Function],
        "getOptionKey": [Function],
        "getOptionLabel": [Function],
        "groupBy": [Function],
        "handleHomeEndKeys": [Function],
        "id": [Function],
        "includeInputInList": [Function],
        "inputValue": [Function],
        "isOptionEqualToValue": [Function],
        "limitTags": [Function],
        "loading": [Function],
        "loadingText": [Function],
        "multiple": [Function],
        "noOptionsText": [Function],
        "onChange": [Function],
        "onClose": [Function],
        "onHighlightChange": [Function],
        "onInputChange": [Function],
        "onKeyDown": [Function],
        "onOpen": [Function],
        "open": [Function],
        "openOnFocus": [Function],
        "openText": [Function],
        "options": [Function],
        "popupIcon": [Function],
        "readOnly": [Function],
        "renderGroup": [Function],
        "renderInput": [Function],
        "renderOption": [Function],
        "renderTags": [Function],
        "selectOnFocus": [Function],
        "size": [Function],
        "slotProps": [Function],
        "sx": [Function],
        "value": [Function],
      },
      "render": [Function],
    },
    "Avatar": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "alt": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "imgProps": [Function],
        "sizes": [Function],
        "slotProps": [Function],
        "slots": [Function],
        "src": [Function],
        "srcSet": [Function],
        "sx": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "AvatarGroup": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "componentsProps": [Function],
        "max": [Function],
        "renderSurplus": [Function],
        "slotProps": [Function],
        "spacing": [Function],
        "sx": [Function],
        "total": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "Backdrop": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "TransitionComponent": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "components": [Function],
        "componentsProps": [Function],
        "invisible": [Function],
        "open": [Function],
        "slotProps": [Function],
        "slots": [Function],
        "sx": [Function],
        "transitionDuration": [Function],
      },
      "render": [Function],
    },
    "Badge": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "anchorOrigin": [Function],
        "badgeContent": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "component": [Function],
        "components": [Function],
        "componentsProps": [Function],
        "invisible": [Function],
        "max": [Function],
        "overlap": [Function],
        "showZero": [Function],
        "slotProps": [Function],
        "slots": [Function],
        "sx": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "BottomNavigation": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "onChange": [Function],
        "showLabels": [Function],
        "sx": [Function],
        "value": [Function],
      },
      "render": [Function],
    },
    "BottomNavigationAction": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "icon": [Function],
        "label": [Function],
        "onChange": [Function],
        "onClick": [Function],
        "showLabel": [Function],
        "sx": [Function],
        "value": [Function],
      },
      "render": [Function],
    },
    "Box": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "component": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "Breadcrumbs": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "expandText": [Function],
        "itemsAfterCollapse": [Function],
        "itemsBeforeCollapse": [Function],
        "maxItems": [Function],
        "separator": [Function],
        "slotProps": [Function],
        "slots": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "Button": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "component": [Function],
        "disableElevation": [Function],
        "disableFocusRipple": [Function],
        "disableRipple": [Function],
        "disabled": [Function],
        "endIcon": [Function],
        "focusVisibleClassName": [Function],
        "fullWidth": [Function],
        "href": [Function],
        "size": [Function],
        "startIcon": [Function],
        "sx": [Function],
        "type": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "ButtonBase": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "LinkComponent": [Function],
        "TouchRippleProps": [Function],
        "action": [Function],
        "centerRipple": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "disableRipple": [Function],
        "disableTouchRipple": [Function],
        "disabled": [Function],
        "focusRipple": [Function],
        "focusVisibleClassName": [Function],
        "href": [Function],
        "onBlur": [Function],
        "onClick": [Function],
        "onContextMenu": [Function],
        "onDragLeave": [Function],
        "onFocus": [Function],
        "onFocusVisible": [Function],
        "onKeyDown": [Function],
        "onKeyUp": [Function],
        "onMouseDown": [Function],
        "onMouseLeave": [Function],
        "onMouseUp": [Function],
        "onTouchEnd": [Function],
        "onTouchMove": [Function],
        "onTouchStart": [Function],
        "sx": [Function],
        "tabIndex": [Function],
        "touchRippleRef": [Function],
        "type": [Function],
      },
      "render": [Function],
    },
    "ButtonGroup": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "component": [Function],
        "disableElevation": [Function],
        "disableFocusRipple": [Function],
        "disableRipple": [Function],
        "disabled": [Function],
        "fullWidth": [Function],
        "orientation": [Function],
        "size": [Function],
        "sx": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "ButtonGroupButtonContext": {
      "$$typeof": Symbol(react.context),
      "Consumer": {
        "$$typeof": Symbol(react.context),
        "_context": [Circular],
      },
      "Provider": {
        "$$typeof": Symbol(react.provider),
        "_context": [Circular],
      },
      "_currentRenderer": null,
      "_currentRenderer2": null,
      "_currentValue": undefined,
      "_currentValue2": undefined,
      "_defaultValue": null,
      "_globalName": null,
      "_threadCount": 0,
      "displayName": "ButtonGroupButtonContext",
    },
    "ButtonGroupContext": {
      "$$typeof": Symbol(react.context),
      "Consumer": {
        "$$typeof": Symbol(react.context),
        "_context": [Circular],
      },
      "Provider": {
        "$$typeof": Symbol(react.provider),
        "_context": [Circular],
      },
      "_currentRenderer": null,
      "_currentRenderer2": null,
      "_currentValue": {},
      "_currentValue2": {},
      "_defaultValue": null,
      "_globalName": null,
      "_threadCount": 0,
      "displayName": "ButtonGroupContext",
    },
    "Card": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "raised": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "CardActionArea": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "focusVisibleClassName": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "CardActions": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "disableSpacing": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "CardContent": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "CardHeader": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "action": [Function],
        "avatar": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "disableTypography": [Function],
        "subheader": [Function],
        "subheaderTypographyProps": [Function],
        "sx": [Function],
        "title": [Function],
        "titleTypographyProps": [Function],
      },
      "render": [Function],
    },
    "CardMedia": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "image": [Function],
        "src": [Function],
        "style": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "Checkbox": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "checked": [Function],
        "checkedIcon": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "defaultChecked": [Function],
        "disableRipple": [Function],
        "disabled": [Function],
        "icon": [Function],
        "id": [Function],
        "indeterminate": [Function],
        "indeterminateIcon": [Function],
        "inputProps": [Function],
        "inputRef": [Function],
        "onChange": [Function],
        "required": [Function],
        "size": [Function],
        "sx": [Function],
        "value": [Function],
      },
      "render": [Function],
    },
    "Chip": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "avatar": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "clickable": [Function],
        "color": [Function],
        "component": [Function],
        "deleteIcon": [Function],
        "disabled": [Function],
        "icon": [Function],
        "label": [Function],
        "onClick": [Function],
        "onDelete": [Function],
        "onKeyDown": [Function],
        "onKeyUp": [Function],
        "size": [Function],
        "skipFocusWhenDisabled": [Function],
        "sx": [Function],
        "tabIndex": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "CircularProgress": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "disableShrink": [Function],
        "size": [Function],
        "style": [Function],
        "sx": [Function],
        "thickness": [Function],
        "value": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "ClickAwayListener": [Function],
    "Collapse": {
      "$$typeof": Symbol(react.forward_ref),
      "muiSupportAuto": true,
      "propTypes": {
        "addEndListener": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "collapsedSize": [Function],
        "component": [Function],
        "easing": [Function],
        "in": [Function],
        "onEnter": [Function],
        "onEntered": [Function],
        "onEntering": [Function],
        "onExit": [Function],
        "onExited": [Function],
        "onExiting": [Function],
        "orientation": [Function],
        "style": [Function],
        "sx": [Function],
        "timeout": [Function],
      },
      "render": [Function],
    },
    "Container": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "classes": [Function],
        "component": [Function],
        "disableGutters": [Function],
        "fixed": [Function],
        "maxWidth": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "CssBaseline": [Function],
    "Dialog": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "BackdropComponent": [Function],
        "BackdropProps": [Function],
        "PaperComponent": [Function],
        "PaperProps": [Function],
        "TransitionComponent": [Function],
        "TransitionProps": [Function],
        "aria-describedby": [Function],
        "aria-labelledby": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "disableEscapeKeyDown": [Function],
        "fullScreen": [Function],
        "fullWidth": [Function],
        "maxWidth": [Function],
        "onBackdropClick": [Function],
        "onClick": [Function],
        "onClose": [Function],
        "open": [Function],
        "scroll": [Function],
        "sx": [Function],
        "transitionDuration": [Function],
      },
      "render": [Function],
    },
    "DialogActions": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "disableSpacing": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "DialogContent": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "dividers": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "DialogContentText": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "DialogTitle": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "id": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "Divider": {
      "$$typeof": Symbol(react.forward_ref),
      "muiSkipListHighlight": true,
      "propTypes": {
        "absolute": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "flexItem": [Function],
        "light": [Function],
        "orientation": [Function],
        "role": [Function],
        "sx": [Function],
        "textAlign": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "Drawer": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "BackdropProps": [Function],
        "ModalProps": [Function],
        "PaperProps": [Function],
        "SlideProps": [Function],
        "anchor": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "elevation": [Function],
        "hideBackdrop": [Function],
        "onClose": [Function],
        "open": [Function],
        "sx": [Function],
        "transitionDuration": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "Experimental_CssVarsProvider": [Function],
    "Fab": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "component": [Function],
        "disableFocusRipple": [Function],
        "disableRipple": [Function],
        "disabled": [Function],
        "focusVisibleClassName": [Function],
        "href": [Function],
        "size": [Function],
        "sx": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "Fade": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "addEndListener": [Function],
        "appear": [Function],
        "children": [Function],
        "easing": [Function],
        "in": [Function],
        "onEnter": [Function],
        "onEntered": [Function],
        "onEntering": [Function],
        "onExit": [Function],
        "onExited": [Function],
        "onExiting": [Function],
        "style": [Function],
        "timeout": [Function],
      },
      "render": [Function],
    },
    "FilledInput": {
      "$$typeof": Symbol(react.forward_ref),
      "muiName": "Input",
      "propTypes": {
        "autoComplete": [Function],
        "autoFocus": [Function],
        "classes": [Function],
        "color": [Function],
        "components": [Function],
        "componentsProps": [Function],
        "defaultValue": [Function],
        "disableUnderline": [Function],
        "disabled": [Function],
        "endAdornment": [Function],
        "error": [Function],
        "fullWidth": [Function],
        "hiddenLabel": [Function],
        "id": [Function],
        "inputComponent": [Function],
        "inputProps": [Function],
        "inputRef": [Function],
        "margin": [Function],
        "maxRows": [Function],
        "minRows": [Function],
        "multiline": [Function],
        "name": [Function],
        "onChange": [Function],
        "placeholder": [Function],
        "readOnly": [Function],
        "required": [Function],
        "rows": [Function],
        "slotProps": [Function],
        "slots": [Function],
        "startAdornment": [Function],
        "sx": [Function],
        "type": [Function],
        "value": [Function],
      },
      "render": [Function],
    },
    "FormControl": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "component": [Function],
        "disabled": [Function],
        "error": [Function],
        "focused": [Function],
        "fullWidth": [Function],
        "hiddenLabel": [Function],
        "margin": [Function],
        "required": [Function],
        "size": [Function],
        "sx": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "FormControlLabel": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "checked": [Function],
        "className": [Function],
        "classes": [Function],
        "componentsProps": [Function],
        "control": [Function],
        "disableTypography": [Function],
        "disabled": [Function],
        "inputRef": [Function],
        "label": [Function],
        "labelPlacement": [Function],
        "name": [Function],
        "onChange": [Function],
        "required": [Function],
        "slotProps": [Function],
        "sx": [Function],
        "value": [Function],
      },
      "render": [Function],
    },
    "FormGroup": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "row": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "FormHelperText": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "disabled": [Function],
        "error": [Function],
        "filled": [Function],
        "focused": [Function],
        "margin": [Function],
        "required": [Function],
        "sx": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "FormLabel": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "component": [Function],
        "disabled": [Function],
        "error": [Function],
        "filled": [Function],
        "focused": [Function],
        "required": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "FormLabelRoot": {
      "$$typeof": Symbol(react.forward_ref),
      "__emotion_base": "label",
      "__emotion_forwardProp": [Function],
      "__emotion_real": [Circular],
      "__emotion_styles": [
        "label:MuiFormLabel-root;",
        [Function],
        [Function],
        [Function],
        [Function],
      ],
      "defaultProps": undefined,
      "render": [Function],
      "withComponent": [Function],
    },
    "GlobalStyles": [Function],
    "Grid": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "columnSpacing": [Function],
        "columns": [Function],
        "component": [Function],
        "container": [Function],
        "direction": [Function],
        "item": [Function],
        "lg": [Function],
        "md": [Function],
        "rowSpacing": [Function],
        "sm": [Function],
        "spacing": [Function],
        "sx": [Function],
        "wrap": [Function],
        "xl": [Function],
        "xs": [Function],
        "zeroMinWidth": [Function],
      },
      "render": [Function],
    },
    "Grow": {
      "$$typeof": Symbol(react.forward_ref),
      "muiSupportAuto": true,
      "propTypes": {
        "addEndListener": [Function],
        "appear": [Function],
        "children": [Function],
        "easing": [Function],
        "in": [Function],
        "onEnter": [Function],
        "onEntered": [Function],
        "onEntering": [Function],
        "onExit": [Function],
        "onExited": [Function],
        "onExiting": [Function],
        "style": [Function],
        "timeout": [Function],
      },
      "render": [Function],
    },
    "Hidden": [Function],
    "Icon": {
      "$$typeof": Symbol(react.forward_ref),
      "muiName": "Icon",
      "propTypes": {
        "baseClassName": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "component": [Function],
        "fontSize": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "IconButton": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "disableFocusRipple": [Function],
        "disableRipple": [Function],
        "disabled": [Function],
        "edge": [Function],
        "size": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "ImageList": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "cols": [Function],
        "component": [Function],
        "gap": [Function],
        "rowHeight": [Function],
        "style": [Function],
        "sx": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "ImageListItem": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "cols": [Function],
        "component": [Function],
        "rows": [Function],
        "style": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "ImageListItemBar": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "actionIcon": [Function],
        "actionPosition": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "position": [Function],
        "subtitle": [Function],
        "sx": [Function],
        "title": [Function],
      },
      "render": [Function],
    },
    "Input": {
      "$$typeof": Symbol(react.forward_ref),
      "muiName": "Input",
      "propTypes": {
        "autoComplete": [Function],
        "autoFocus": [Function],
        "classes": [Function],
        "color": [Function],
        "components": [Function],
        "componentsProps": [Function],
        "defaultValue": [Function],
        "disableUnderline": [Function],
        "disabled": [Function],
        "endAdornment": [Function],
        "error": [Function],
        "fullWidth": [Function],
        "id": [Function],
        "inputComponent": [Function],
        "inputProps": [Function],
        "inputRef": [Function],
        "margin": [Function],
        "maxRows": [Function],
        "minRows": [Function],
        "multiline": [Function],
        "name": [Function],
        "onChange": [Function],
        "placeholder": [Function],
        "readOnly": [Function],
        "required": [Function],
        "rows": [Function],
        "slotProps": [Function],
        "slots": [Function],
        "startAdornment": [Function],
        "sx": [Function],
        "type": [Function],
        "value": [Function],
      },
      "render": [Function],
    },
    "InputAdornment": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "disablePointerEvents": [Function],
        "disableTypography": [Function],
        "position": [Function],
        "sx": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "InputBase": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "aria-describedby": [Function],
        "autoComplete": [Function],
        "autoFocus": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "components": [Function],
        "componentsProps": [Function],
        "defaultValue": [Function],
        "disableInjectingGlobalStyles": [Function],
        "disabled": [Function],
        "endAdornment": [Function],
        "error": [Function],
        "fullWidth": [Function],
        "id": [Function],
        "inputComponent": [Function],
        "inputProps": [Function],
        "inputRef": [Function],
        "margin": [Function],
        "maxRows": [Function],
        "minRows": [Function],
        "multiline": [Function],
        "name": [Function],
        "onBlur": [Function],
        "onChange": [Function],
        "onClick": [Function],
        "onFocus": [Function],
        "onInvalid": [Function],
        "onKeyDown": [Function],
        "onKeyUp": [Function],
        "placeholder": [Function],
        "readOnly": [Function],
        "renderSuffix": [Function],
        "required": [Function],
        "rows": [Function],
        "size": [Function],
        "slotProps": [Function],
        "slots": [Function],
        "startAdornment": [Function],
        "sx": [Function],
        "type": [Function],
        "value": [Function],
      },
      "render": [Function],
    },
    "InputLabel": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "disableAnimation": [Function],
        "disabled": [Function],
        "error": [Function],
        "focused": [Function],
        "margin": [Function],
        "required": [Function],
        "shrink": [Function],
        "size": [Function],
        "sx": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "LinearProgress": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "sx": [Function],
        "value": [Function],
        "valueBuffer": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "Link": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "TypographyClasses": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "component": [Function],
        "onBlur": [Function],
        "onFocus": [Function],
        "sx": [Function],
        "underline": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "List": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "dense": [Function],
        "disablePadding": [Function],
        "subheader": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "ListItem": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "ContainerComponent": [Function],
        "ContainerProps": [Function],
        "alignItems": [Function],
        "autoFocus": [Function],
        "button": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "components": [Function],
        "componentsProps": [Function],
        "dense": [Function],
        "disableGutters": [Function],
        "disablePadding": [Function],
        "disabled": [Function],
        "divider": [Function],
        "focusVisibleClassName": [Function],
        "secondaryAction": [Function],
        "selected": [Function],
        "slotProps": [Function],
        "slots": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "ListItemAvatar": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "ListItemButton": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "alignItems": [Function],
        "autoFocus": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "dense": [Function],
        "disableGutters": [Function],
        "disabled": [Function],
        "divider": [Function],
        "focusVisibleClassName": [Function],
        "href": [Function],
        "selected": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "ListItemIcon": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "ListItemSecondaryAction": {
      "$$typeof": Symbol(react.forward_ref),
      "muiName": "ListItemSecondaryAction",
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "ListItemText": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "disableTypography": [Function],
        "inset": [Function],
        "primary": [Function],
        "primaryTypographyProps": [Function],
        "secondary": [Function],
        "secondaryTypographyProps": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "ListSubheader": {
      "$$typeof": Symbol(react.forward_ref),
      "muiSkipListHighlight": true,
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "component": [Function],
        "disableGutters": [Function],
        "disableSticky": [Function],
        "inset": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "Menu": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "MenuListProps": [Function],
        "PaperProps": [Function],
        "PopoverClasses": [Function],
        "TransitionProps": [Function],
        "anchorEl": [Function],
        "autoFocus": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "disableAutoFocusItem": [Function],
        "onClose": [Function],
        "open": [Function],
        "slotProps": [Function],
        "slots": [Function],
        "sx": [Function],
        "transitionDuration": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "MenuItem": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "autoFocus": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "dense": [Function],
        "disableGutters": [Function],
        "disabled": [Function],
        "divider": [Function],
        "focusVisibleClassName": [Function],
        "role": [Function],
        "selected": [Function],
        "sx": [Function],
        "tabIndex": [Function],
      },
      "render": [Function],
    },
    "MenuList": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "autoFocus": [Function],
        "autoFocusItem": [Function],
        "children": [Function],
        "className": [Function],
        "disableListWrap": [Function],
        "disabledItemsFocusable": [Function],
        "onKeyDown": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "MobileStepper": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "LinearProgressProps": [Function],
        "activeStep": [Function],
        "backButton": [Function],
        "className": [Function],
        "classes": [Function],
        "nextButton": [Function],
        "position": [Function],
        "steps": [Function],
        "sx": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "Modal": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "BackdropComponent": [Function],
        "BackdropProps": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "closeAfterTransition": [Function],
        "component": [Function],
        "components": [Function],
        "componentsProps": [Function],
        "container": [Function],
        "disableAutoFocus": [Function],
        "disableEnforceFocus": [Function],
        "disableEscapeKeyDown": [Function],
        "disablePortal": [Function],
        "disableRestoreFocus": [Function],
        "disableScrollLock": [Function],
        "hideBackdrop": [Function],
        "keepMounted": [Function],
        "onBackdropClick": [Function],
        "onClose": [Function],
        "onTransitionEnter": [Function],
        "onTransitionExited": [Function],
        "open": [Function],
        "slotProps": [Function],
        "slots": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "ModalManager": [Function],
    "NativeSelect": {
      "$$typeof": Symbol(react.forward_ref),
      "muiName": "Select",
      "propTypes": {
        "IconComponent": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "input": [Function],
        "inputProps": [Function],
        "onChange": [Function],
        "sx": [Function],
        "value": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "NoSsr": [Function],
    "OutlinedInput": {
      "$$typeof": Symbol(react.forward_ref),
      "muiName": "Input",
      "propTypes": {
        "autoComplete": [Function],
        "autoFocus": [Function],
        "classes": [Function],
        "color": [Function],
        "components": [Function],
        "defaultValue": [Function],
        "disabled": [Function],
        "endAdornment": [Function],
        "error": [Function],
        "fullWidth": [Function],
        "id": [Function],
        "inputComponent": [Function],
        "inputProps": [Function],
        "inputRef": [Function],
        "label": [Function],
        "margin": [Function],
        "maxRows": [Function],
        "minRows": [Function],
        "multiline": [Function],
        "name": [Function],
        "notched": [Function],
        "onChange": [Function],
        "placeholder": [Function],
        "readOnly": [Function],
        "required": [Function],
        "rows": [Function],
        "slots": [Function],
        "startAdornment": [Function],
        "sx": [Function],
        "type": [Function],
        "value": [Function],
      },
      "render": [Function],
    },
    "Pagination": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "boundaryCount": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "count": [Function],
        "defaultPage": [Function],
        "disabled": [Function],
        "getItemAriaLabel": [Function],
        "hideNextButton": [Function],
        "hidePrevButton": [Function],
        "onChange": [Function],
        "page": [Function],
        "renderItem": [Function],
        "shape": [Function],
        "showFirstButton": [Function],
        "showLastButton": [Function],
        "siblingCount": [Function],
        "size": [Function],
        "sx": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "PaginationItem": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "component": [Function],
        "components": [Function],
        "disabled": [Function],
        "page": [Function],
        "selected": [Function],
        "shape": [Function],
        "size": [Function],
        "slots": [Function],
        "sx": [Function],
        "type": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "Paper": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "elevation": [Function],
        "square": [Function],
        "sx": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "Popover": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "PaperProps": [Function],
        "TransitionComponent": [Function],
        "TransitionProps": [Function],
        "action": [Function],
        "anchorEl": [Function],
        "anchorOrigin": [Function],
        "anchorPosition": [Function],
        "anchorReference": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "container": [Function],
        "disableScrollLock": [Function],
        "elevation": [Function],
        "marginThreshold": [Function],
        "onClose": [Function],
        "open": [Function],
        "slotProps": [Function],
        "slots": [Function],
        "sx": [Function],
        "transformOrigin": [Function],
        "transitionDuration": [Function],
      },
      "render": [Function],
    },
    "PopoverPaper": {
      "$$typeof": Symbol(react.forward_ref),
      "__emotion_base": {
        "$$typeof": Symbol(react.forward_ref),
        "propTypes": {
          "children": [Function],
          "className": [Function],
          "classes": [Function],
          "component": [Function],
          "elevation": [Function],
          "square": [Function],
          "sx": [Function],
          "variant": [Function],
        },
        "render": [Function],
      },
      "__emotion_forwardProp": [Function],
      "__emotion_real": [Circular],
      "__emotion_styles": [
        "label:MuiPopover-paper;",
        [Function],
        [Function],
      ],
      "defaultProps": undefined,
      "render": [Function],
      "withComponent": [Function],
    },
    "PopoverRoot": {
      "$$typeof": Symbol(react.forward_ref),
      "__emotion_base": {
        "$$typeof": Symbol(react.forward_ref),
        "propTypes": {
          "BackdropComponent": [Function],
          "BackdropProps": [Function],
          "children": [Function],
          "className": [Function],
          "classes": [Function],
          "closeAfterTransition": [Function],
          "component": [Function],
          "components": [Function],
          "componentsProps": [Function],
          "container": [Function],
          "disableAutoFocus": [Function],
          "disableEnforceFocus": [Function],
          "disableEscapeKeyDown": [Function],
          "disablePortal": [Function],
          "disableRestoreFocus": [Function],
          "disableScrollLock": [Function],
          "hideBackdrop": [Function],
          "keepMounted": [Function],
          "onBackdropClick": [Function],
          "onClose": [Function],
          "onTransitionEnter": [Function],
          "onTransitionExited": [Function],
          "open": [Function],
          "slotProps": [Function],
          "slots": [Function],
          "sx": [Function],
        },
        "render": [Function],
      },
      "__emotion_forwardProp": [Function],
      "__emotion_real": [Circular],
      "__emotion_styles": [
        "label:MuiPopover-root;",
        [Function],
        [Function],
        [Function],
        [Function],
      ],
      "defaultProps": undefined,
      "render": [Function],
      "withComponent": [Function],
    },
    "Popper": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "anchorEl": [Function],
        "children": [Function],
        "component": [Function],
        "components": [Function],
        "componentsProps": [Function],
        "container": [Function],
        "disablePortal": [Function],
        "keepMounted": [Function],
        "modifiers": [Function],
        "open": [Function],
        "placement": [Function],
        "popperOptions": [Function],
        "popperRef": [Function],
        "slotProps": [Function],
        "slots": [Function],
        "sx": [Function],
        "transition": [Function],
      },
      "render": [Function],
    },
    "Portal": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "container": [Function],
        "disablePortal": [Function],
        "exact-prop: ​": [Function],
      },
      "render": [Function],
    },
    "Radio": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "checked": [Function],
        "checkedIcon": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "disableRipple": [Function],
        "disabled": [Function],
        "icon": [Function],
        "id": [Function],
        "inputProps": [Function],
        "inputRef": [Function],
        "name": [Function],
        "onChange": [Function],
        "required": [Function],
        "size": [Function],
        "sx": [Function],
        "value": [Function],
      },
      "render": [Function],
    },
    "RadioGroup": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "defaultValue": [Function],
        "name": [Function],
        "onChange": [Function],
        "value": [Function],
      },
      "render": [Function],
    },
    "Rating": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "IconContainerComponent": [Function],
        "className": [Function],
        "classes": [Function],
        "defaultValue": [Function],
        "disabled": [Function],
        "emptyIcon": [Function],
        "emptyLabelText": [Function],
        "getLabelText": [Function],
        "highlightSelectedOnly": [Function],
        "icon": [Function],
        "max": [Function],
        "name": [Function],
        "onChange": [Function],
        "onChangeActive": [Function],
        "onMouseLeave": [Function],
        "onMouseMove": [Function],
        "precision": [Function],
        "readOnly": [Function],
        "size": [Function],
        "sx": [Function],
        "value": [Function],
      },
      "render": [Function],
    },
    "ScopedCssBaseline": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "enableColorScheme": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "Select": {
      "$$typeof": Symbol(react.forward_ref),
      "muiName": "Select",
      "propTypes": {
        "IconComponent": [Function],
        "MenuProps": [Function],
        "SelectDisplayProps": [Function],
        "autoWidth": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "defaultOpen": [Function],
        "defaultValue": [Function],
        "displayEmpty": [Function],
        "id": [Function],
        "input": [Function],
        "inputProps": [Function],
        "label": [Function],
        "labelId": [Function],
        "multiple": [Function],
        "native": [Function],
        "onChange": [Function],
        "onClose": [Function],
        "onOpen": [Function],
        "open": [Function],
        "renderValue": [Function],
        "sx": [Function],
        "value": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "Skeleton": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "animation": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "height": [Function],
        "style": [Function],
        "sx": [Function],
        "variant": [Function],
        "width": [Function],
      },
      "render": [Function],
    },
    "Slide": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "addEndListener": [Function],
        "appear": [Function],
        "children": [Function],
        "container": [Function],
        "direction": [Function],
        "easing": [Function],
        "in": [Function],
        "onEnter": [Function],
        "onEntered": [Function],
        "onEntering": [Function],
        "onExit": [Function],
        "onExited": [Function],
        "onExiting": [Function],
        "style": [Function],
        "timeout": [Function],
      },
      "render": [Function],
    },
    "Slider": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "aria-label": [Function],
        "aria-labelledby": [Function],
        "aria-valuetext": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "components": [Function],
        "componentsProps": [Function],
        "defaultValue": [Function],
        "disableSwap": [Function],
        "disabled": [Function],
        "getAriaLabel": [Function],
        "getAriaValueText": [Function],
        "marks": [Function],
        "max": [Function],
        "min": [Function],
        "name": [Function],
        "onChange": [Function],
        "onChangeCommitted": [Function],
        "orientation": [Function],
        "scale": [Function],
        "shiftStep": [Function],
        "size": [Function],
        "slotProps": [Function],
        "slots": [Function],
        "step": [Function],
        "sx": [Function],
        "tabIndex": [Function],
        "track": [Function],
        "value": [Function],
        "valueLabelDisplay": [Function],
        "valueLabelFormat": [Function],
      },
      "render": [Function],
    },
    "SliderMark": {
      "$$typeof": Symbol(react.forward_ref),
      "__emotion_base": "span",
      "__emotion_forwardProp": [Function],
      "__emotion_real": [Circular],
      "__emotion_styles": [
        "label:MuiSlider-mark;",
        [Function],
        [Function],
        [Function],
      ],
      "defaultProps": undefined,
      "render": [Function],
      "withComponent": [Function],
    },
    "SliderMarkLabel": {
      "$$typeof": Symbol(react.forward_ref),
      "__emotion_base": "span",
      "__emotion_forwardProp": [Function],
      "__emotion_real": [Circular],
      "__emotion_styles": [
        "label:MuiSlider-markLabel;",
        [Function],
        [Function],
        [Function],
      ],
      "defaultProps": undefined,
      "render": [Function],
      "withComponent": [Function],
    },
    "SliderRail": {
      "$$typeof": Symbol(react.forward_ref),
      "__emotion_base": "span",
      "__emotion_forwardProp": [Function],
      "__emotion_real": [Circular],
      "__emotion_styles": [
        "label:MuiSlider-rail;",
        [Function],
        [Function],
        [Function],
      ],
      "defaultProps": undefined,
      "render": [Function],
      "withComponent": [Function],
    },
    "SliderRoot": {
      "$$typeof": Symbol(react.forward_ref),
      "__emotion_base": "span",
      "__emotion_forwardProp": [Function],
      "__emotion_real": [Circular],
      "__emotion_styles": [
        "label:MuiSlider-root;",
        [Function],
        [Function],
        [Function],
        [Function],
      ],
      "defaultProps": undefined,
      "render": [Function],
      "withComponent": [Function],
    },
    "SliderThumb": {
      "$$typeof": Symbol(react.forward_ref),
      "__emotion_base": "span",
      "__emotion_forwardProp": [Function],
      "__emotion_real": [Circular],
      "__emotion_styles": [
        "label:MuiSlider-thumb;",
        [Function],
        [Function],
        [Function],
      ],
      "defaultProps": undefined,
      "render": [Function],
      "withComponent": [Function],
    },
    "SliderTrack": {
      "$$typeof": Symbol(react.forward_ref),
      "__emotion_base": "span",
      "__emotion_forwardProp": [Function],
      "__emotion_real": [Circular],
      "__emotion_styles": [
        "label:MuiSlider-track;",
        [Function],
        [Function],
        [Function],
      ],
      "defaultProps": undefined,
      "render": [Function],
      "withComponent": [Function],
    },
    "SliderValueLabel": {
      "$$typeof": Symbol(react.forward_ref),
      "__emotion_base": [Function],
      "__emotion_forwardProp": [Function],
      "__emotion_real": [Circular],
      "__emotion_styles": [
        "label:MuiSlider-valueLabel;",
        [Function],
        [Function],
        [Function],
      ],
      "defaultProps": undefined,
      "render": [Function],
      "withComponent": [Function],
    },
    "Snackbar": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "ClickAwayListenerProps": [Function],
        "ContentProps": [Function],
        "TransitionComponent": [Function],
        "TransitionProps": [Function],
        "action": [Function],
        "anchorOrigin": [Function],
        "autoHideDuration": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "disableWindowBlurListener": [Function],
        "key": [Function],
        "message": [Function],
        "onBlur": [Function],
        "onClose": [Function],
        "onFocus": [Function],
        "onMouseEnter": [Function],
        "onMouseLeave": [Function],
        "open": [Function],
        "resumeHideDuration": [Function],
        "sx": [Function],
        "transitionDuration": [Function],
      },
      "render": [Function],
    },
    "SnackbarContent": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "action": [Function],
        "className": [Function],
        "classes": [Function],
        "message": [Function],
        "role": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "SpeedDial": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "FabProps": [Function],
        "TransitionComponent": [Function],
        "TransitionProps": [Function],
        "ariaLabel": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "direction": [Function],
        "hidden": [Function],
        "icon": [Function],
        "onBlur": [Function],
        "onClose": [Function],
        "onFocus": [Function],
        "onKeyDown": [Function],
        "onMouseEnter": [Function],
        "onMouseLeave": [Function],
        "onOpen": [Function],
        "open": [Function],
        "openIcon": [Function],
        "sx": [Function],
        "transitionDuration": [Function],
      },
      "render": [Function],
    },
    "SpeedDialAction": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "FabProps": [Function],
        "TooltipClasses": [Function],
        "className": [Function],
        "classes": [Function],
        "delay": [Function],
        "icon": [Function],
        "id": [Function],
        "open": [Function],
        "sx": [Function],
        "tooltipOpen": [Function],
        "tooltipPlacement": [Function],
        "tooltipTitle": [Function],
      },
      "render": [Function],
    },
    "SpeedDialIcon": {
      "$$typeof": Symbol(react.forward_ref),
      "muiName": "SpeedDialIcon",
      "propTypes": {
        "className": [Function],
        "classes": [Function],
        "icon": [Function],
        "open": [Function],
        "openIcon": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "Stack": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "component": [Function],
        "direction": [Function],
        "divider": [Function],
        "spacing": [Function],
        "sx": [Function],
        "useFlexGap": [Function],
      },
      "render": [Function],
    },
    "Step": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "active": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "completed": [Function],
        "component": [Function],
        "disabled": [Function],
        "expanded": [Function],
        "index": [Function],
        "last": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "StepButton": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "icon": [Function],
        "optional": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "StepConnector": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "className": [Function],
        "classes": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "StepContent": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "TransitionComponent": [Function],
        "TransitionProps": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "sx": [Function],
        "transitionDuration": [Function],
      },
      "render": [Function],
    },
    "StepContext": {
      "$$typeof": Symbol(react.context),
      "Consumer": {
        "$$typeof": Symbol(react.context),
        "_context": [Circular],
      },
      "Provider": {
        "$$typeof": Symbol(react.provider),
        "_context": [Circular],
      },
      "_currentRenderer": null,
      "_currentRenderer2": null,
      "_currentValue": {},
      "_currentValue2": {},
      "_defaultValue": null,
      "_globalName": null,
      "_threadCount": 0,
      "displayName": "StepContext",
    },
    "StepIcon": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "active": [Function],
        "className": [Function],
        "classes": [Function],
        "completed": [Function],
        "error": [Function],
        "icon": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "StepLabel": {
      "$$typeof": Symbol(react.forward_ref),
      "muiName": "StepLabel",
      "propTypes": {
        "StepIconComponent": [Function],
        "StepIconProps": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "componentsProps": [Function],
        "error": [Function],
        "icon": [Function],
        "optional": [Function],
        "slotProps": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "Stepper": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "activeStep": [Function],
        "alternativeLabel": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "connector": [Function],
        "nonLinear": [Function],
        "orientation": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "StepperContext": {
      "$$typeof": Symbol(react.context),
      "Consumer": {
        "$$typeof": Symbol(react.context),
        "_context": [Circular],
      },
      "Provider": {
        "$$typeof": Symbol(react.provider),
        "_context": [Circular],
      },
      "_currentRenderer": null,
      "_currentRenderer2": null,
      "_currentValue": {},
      "_currentValue2": {},
      "_defaultValue": null,
      "_globalName": null,
      "_threadCount": 0,
      "displayName": "StepperContext",
    },
    "StyledEngineProvider": [Function],
    "SvgIcon": {
      "$$typeof": Symbol(react.forward_ref),
      "muiName": "SvgIcon",
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "component": [Function],
        "fontSize": [Function],
        "htmlColor": [Function],
        "inheritViewBox": [Function],
        "shapeRendering": [Function],
        "sx": [Function],
        "titleAccess": [Function],
        "viewBox": [Function],
      },
      "render": [Function],
    },
    "SwipeableDrawer": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "ModalProps": [Function],
        "PaperProps": [Function],
        "SwipeAreaProps": [Function],
        "allowSwipeInChildren": [Function],
        "anchor": [Function],
        "children": [Function],
        "disableBackdropTransition": [Function],
        "disableDiscovery": [Function],
        "disableSwipeToOpen": [Function],
        "hideBackdrop": [Function],
        "hysteresis": [Function],
        "minFlingVelocity": [Function],
        "onClose": [Function],
        "onOpen": [Function],
        "open": [Function],
        "swipeAreaWidth": [Function],
        "transitionDuration": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "Switch": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "checked": [Function],
        "checkedIcon": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "defaultChecked": [Function],
        "disableRipple": [Function],
        "disabled": [Function],
        "edge": [Function],
        "icon": [Function],
        "id": [Function],
        "inputProps": [Function],
        "inputRef": [Function],
        "onChange": [Function],
        "required": [Function],
        "size": [Function],
        "sx": [Function],
        "value": [Function],
      },
      "render": [Function],
    },
    "THEME_ID": "$$material",
    "Tab": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "disableFocusRipple": [Function],
        "disableRipple": [Function],
        "disabled": [Function],
        "icon": [Function],
        "iconPosition": [Function],
        "label": [Function],
        "onChange": [Function],
        "onClick": [Function],
        "onFocus": [Function],
        "sx": [Function],
        "value": [Function],
        "wrapped": [Function],
      },
      "render": [Function],
    },
    "TabScrollButton": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "direction": [Function],
        "disabled": [Function],
        "orientation": [Function],
        "slotProps": [Function],
        "slots": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "Table": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "padding": [Function],
        "size": [Function],
        "stickyHeader": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "TableBody": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "TableCell": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "align": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "padding": [Function],
        "scope": [Function],
        "size": [Function],
        "sortDirection": [Function],
        "sx": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "TableContainer": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "TableFooter": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "TableHead": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "TablePagination": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "ActionsComponent": [Function],
        "SelectProps": [Function],
        "backIconButtonProps": [Function],
        "className": [Function],
        "classes": [Function],
        "colSpan": [Function],
        "component": [Function],
        "count": [Function],
        "disabled": [Function],
        "getItemAriaLabel": [Function],
        "labelDisplayedRows": [Function],
        "labelRowsPerPage": [Function],
        "nextIconButtonProps": [Function],
        "onPageChange": [Function],
        "onRowsPerPageChange": [Function],
        "page": [Function],
        "rowsPerPage": [Function],
        "rowsPerPageOptions": [Function],
        "showFirstButton": [Function],
        "showLastButton": [Function],
        "slotProps": [Function],
        "slots": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "TableRow": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "hover": [Function],
        "selected": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "TableSortLabel": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "IconComponent": [Function],
        "active": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "direction": [Function],
        "hideSortIcon": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "Tabs": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "ScrollButtonComponent": [Function],
        "TabIndicatorProps": [Function],
        "TabScrollButtonProps": [Function],
        "action": [Function],
        "allowScrollButtonsMobile": [Function],
        "aria-label": [Function],
        "aria-labelledby": [Function],
        "centered": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "indicatorColor": [Function],
        "onChange": [Function],
        "orientation": [Function],
        "scrollButtons": [Function],
        "selectionFollowsFocus": [Function],
        "slotProps": [Function],
        "slots": [Function],
        "sx": [Function],
        "textColor": [Function],
        "value": [Function],
        "variant": [Function],
        "visibleScrollbar": [Function],
      },
      "render": [Function],
    },
    "TextField": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "FormHelperTextProps": [Function],
        "InputLabelProps": [Function],
        "InputProps": [Function],
        "SelectProps": [Function],
        "autoComplete": [Function],
        "autoFocus": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "defaultValue": [Function],
        "disabled": [Function],
        "error": [Function],
        "fullWidth": [Function],
        "helperText": [Function],
        "id": [Function],
        "inputProps": [Function],
        "inputRef": [Function],
        "label": [Function],
        "margin": [Function],
        "maxRows": [Function],
        "minRows": [Function],
        "multiline": [Function],
        "name": [Function],
        "onBlur": [Function],
        "onChange": [Function],
        "onFocus": [Function],
        "placeholder": [Function],
        "required": [Function],
        "rows": [Function],
        "select": [Function],
        "size": [Function],
        "sx": [Function],
        "type": [Function],
        "value": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "TextareaAutosize": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "className": [Function],
        "maxRows": [Function],
        "minRows": [Function],
        "onChange": [Function],
        "placeholder": [Function],
        "style": [Function],
        "value": [Function],
      },
      "render": [Function],
    },
    "ThemeProvider": [Function],
    "ToggleButton": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "disableFocusRipple": [Function],
        "disableRipple": [Function],
        "disabled": [Function],
        "fullWidth": [Function],
        "onChange": [Function],
        "onClick": [Function],
        "selected": [Function],
        "size": [Function],
        "sx": [Function],
        "value": [Function],
      },
      "render": [Function],
    },
    "ToggleButtonGroup": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "color": [Function],
        "disabled": [Function],
        "exclusive": [Function],
        "fullWidth": [Function],
        "onChange": [Function],
        "orientation": [Function],
        "size": [Function],
        "sx": [Function],
        "value": [Function],
      },
      "render": [Function],
    },
    "Toolbar": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "disableGutters": [Function],
        "sx": [Function],
        "variant": [Function],
      },
      "render": [Function],
    },
    "Tooltip": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "PopperComponent": [Function],
        "PopperProps": [Function],
        "TransitionComponent": [Function],
        "TransitionProps": [Function],
        "arrow": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "components": [Function],
        "componentsProps": [Function],
        "describeChild": [Function],
        "disableFocusListener": [Function],
        "disableHoverListener": [Function],
        "disableInteractive": [Function],
        "disableTouchListener": [Function],
        "enterDelay": [Function],
        "enterNextDelay": [Function],
        "enterTouchDelay": [Function],
        "followCursor": [Function],
        "id": [Function],
        "leaveDelay": [Function],
        "leaveTouchDelay": [Function],
        "onClose": [Function],
        "onOpen": [Function],
        "open": [Function],
        "placement": [Function],
        "slotProps": [Function],
        "slots": [Function],
        "sx": [Function],
        "title": [Function],
      },
      "render": [Function],
    },
    "Typography": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "align": [Function],
        "children": [Function],
        "className": [Function],
        "classes": [Function],
        "component": [Function],
        "gutterBottom": [Function],
        "noWrap": [Function],
        "paragraph": [Function],
        "sx": [Function],
        "variant": [Function],
        "variantMapping": [Function],
      },
      "render": [Function],
    },
    "Unstable_Grid2": {
      "$$typeof": Symbol(react.forward_ref),
      "muiName": "Grid",
      "propTypes": {
        "children": [Function],
        "sx": [Function],
      },
      "render": [Function],
    },
    "Unstable_TrapFocus": [Function],
    "Zoom": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "addEndListener": [Function],
        "appear": [Function],
        "children": [Function],
        "easing": [Function],
        "in": [Function],
        "onEnter": [Function],
        "onEntered": [Function],
        "onEntering": [Function],
        "onExit": [Function],
        "onExited": [Function],
        "onExiting": [Function],
        "style": [Function],
        "timeout": [Function],
      },
      "render": [Function],
    },
    "accordionActionsClasses": {
      "root": "MuiAccordionActions-root",
      "spacing": "MuiAccordionActions-spacing",
    },
    "accordionClasses": {
      "disabled": "Mui-disabled",
      "expanded": "Mui-expanded",
      "gutters": "MuiAccordion-gutters",
      "region": "MuiAccordion-region",
      "root": "MuiAccordion-root",
      "rounded": "MuiAccordion-rounded",
    },
    "accordionDetailsClasses": {
      "root": "MuiAccordionDetails-root",
    },
    "accordionSummaryClasses": {
      "content": "MuiAccordionSummary-content",
      "contentGutters": "MuiAccordionSummary-contentGutters",
      "disabled": "Mui-disabled",
      "expandIconWrapper": "MuiAccordionSummary-expandIconWrapper",
      "expanded": "Mui-expanded",
      "focusVisible": "Mui-focusVisible",
      "gutters": "MuiAccordionSummary-gutters",
      "root": "MuiAccordionSummary-root",
    },
    "adaptV4Theme": [Function],
    "alertClasses": {
      "action": "MuiAlert-action",
      "colorError": "MuiAlert-colorError",
      "colorInfo": "MuiAlert-colorInfo",
      "colorSuccess": "MuiAlert-colorSuccess",
      "colorWarning": "MuiAlert-colorWarning",
      "filled": "MuiAlert-filled",
      "filledError": "MuiAlert-filledError",
      "filledInfo": "MuiAlert-filledInfo",
      "filledSuccess": "MuiAlert-filledSuccess",
      "filledWarning": "MuiAlert-filledWarning",
      "icon": "MuiAlert-icon",
      "message": "MuiAlert-message",
      "outlined": "MuiAlert-outlined",
      "outlinedError": "MuiAlert-outlinedError",
      "outlinedInfo": "MuiAlert-outlinedInfo",
      "outlinedSuccess": "MuiAlert-outlinedSuccess",
      "outlinedWarning": "MuiAlert-outlinedWarning",
      "root": "MuiAlert-root",
      "standard": "MuiAlert-standard",
      "standardError": "MuiAlert-standardError",
      "standardInfo": "MuiAlert-standardInfo",
      "standardSuccess": "MuiAlert-standardSuccess",
      "standardWarning": "MuiAlert-standardWarning",
    },
    "alertTitleClasses": {
      "root": "MuiAlertTitle-root",
    },
    "alpha": [Function],
    "appBarClasses": {
      "colorDefault": "MuiAppBar-colorDefault",
      "colorError": "MuiAppBar-colorError",
      "colorInfo": "MuiAppBar-colorInfo",
      "colorInherit": "MuiAppBar-colorInherit",
      "colorPrimary": "MuiAppBar-colorPrimary",
      "colorSecondary": "MuiAppBar-colorSecondary",
      "colorSuccess": "MuiAppBar-colorSuccess",
      "colorTransparent": "MuiAppBar-colorTransparent",
      "colorWarning": "MuiAppBar-colorWarning",
      "positionAbsolute": "MuiAppBar-positionAbsolute",
      "positionFixed": "MuiAppBar-positionFixed",
      "positionRelative": "MuiAppBar-positionRelative",
      "positionStatic": "MuiAppBar-positionStatic",
      "positionSticky": "MuiAppBar-positionSticky",
      "root": "MuiAppBar-root",
    },
    "autocompleteClasses": {
      "clearIndicator": "MuiAutocomplete-clearIndicator",
      "endAdornment": "MuiAutocomplete-endAdornment",
      "expanded": "Mui-expanded",
      "focusVisible": "Mui-focusVisible",
      "focused": "Mui-focused",
      "fullWidth": "MuiAutocomplete-fullWidth",
      "groupLabel": "MuiAutocomplete-groupLabel",
      "groupUl": "MuiAutocomplete-groupUl",
      "hasClearIcon": "MuiAutocomplete-hasClearIcon",
      "hasPopupIcon": "MuiAutocomplete-hasPopupIcon",
      "input": "MuiAutocomplete-input",
      "inputFocused": "MuiAutocomplete-inputFocused",
      "inputRoot": "MuiAutocomplete-inputRoot",
      "listbox": "MuiAutocomplete-listbox",
      "loading": "MuiAutocomplete-loading",
      "noOptions": "MuiAutocomplete-noOptions",
      "option": "MuiAutocomplete-option",
      "paper": "MuiAutocomplete-paper",
      "popper": "MuiAutocomplete-popper",
      "popperDisablePortal": "MuiAutocomplete-popperDisablePortal",
      "popupIndicator": "MuiAutocomplete-popupIndicator",
      "popupIndicatorOpen": "MuiAutocomplete-popupIndicatorOpen",
      "root": "MuiAutocomplete-root",
      "tag": "MuiAutocomplete-tag",
      "tagSizeMedium": "MuiAutocomplete-tagSizeMedium",
      "tagSizeSmall": "MuiAutocomplete-tagSizeSmall",
    },
    "avatarClasses": {
      "circular": "MuiAvatar-circular",
      "colorDefault": "MuiAvatar-colorDefault",
      "fallback": "MuiAvatar-fallback",
      "img": "MuiAvatar-img",
      "root": "MuiAvatar-root",
      "rounded": "MuiAvatar-rounded",
      "square": "MuiAvatar-square",
    },
    "avatarGroupClasses": {
      "avatar": "MuiAvatarGroup-avatar",
      "root": "MuiAvatarGroup-root",
    },
    "backdropClasses": {
      "invisible": "MuiBackdrop-invisible",
      "root": "MuiBackdrop-root",
    },
    "badgeClasses": {
      "anchorOriginBottomLeft": "MuiBadge-anchorOriginBottomLeft",
      "anchorOriginBottomLeftCircular": "MuiBadge-anchorOriginBottomLeftCircular",
      "anchorOriginBottomLeftRectangular": "MuiBadge-anchorOriginBottomLeftRectangular",
      "anchorOriginBottomRight": "MuiBadge-anchorOriginBottomRight",
      "anchorOriginBottomRightCircular": "MuiBadge-anchorOriginBottomRightCircular",
      "anchorOriginBottomRightRectangular": "MuiBadge-anchorOriginBottomRightRectangular",
      "anchorOriginTopLeft": "MuiBadge-anchorOriginTopLeft",
      "anchorOriginTopLeftCircular": "MuiBadge-anchorOriginTopLeftCircular",
      "anchorOriginTopLeftRectangular": "MuiBadge-anchorOriginTopLeftRectangular",
      "anchorOriginTopRight": "MuiBadge-anchorOriginTopRight",
      "anchorOriginTopRightCircular": "MuiBadge-anchorOriginTopRightCircular",
      "anchorOriginTopRightRectangular": "MuiBadge-anchorOriginTopRightRectangular",
      "badge": "MuiBadge-badge",
      "colorError": "MuiBadge-colorError",
      "colorInfo": "MuiBadge-colorInfo",
      "colorPrimary": "MuiBadge-colorPrimary",
      "colorSecondary": "MuiBadge-colorSecondary",
      "colorSuccess": "MuiBadge-colorSuccess",
      "colorWarning": "MuiBadge-colorWarning",
      "dot": "MuiBadge-dot",
      "invisible": "MuiBadge-invisible",
      "overlapCircular": "MuiBadge-overlapCircular",
      "overlapRectangular": "MuiBadge-overlapRectangular",
      "root": "MuiBadge-root",
      "standard": "MuiBadge-standard",
    },
    "bottomNavigationActionClasses": {
      "iconOnly": "MuiBottomNavigationAction-iconOnly",
      "label": "MuiBottomNavigationAction-label",
      "root": "MuiBottomNavigationAction-root",
      "selected": "Mui-selected",
    },
    "bottomNavigationClasses": {
      "root": "MuiBottomNavigation-root",
    },
    "boxClasses": {
      "root": "MuiBox-root",
    },
    "breadcrumbsClasses": {
      "li": "MuiBreadcrumbs-li",
      "ol": "MuiBreadcrumbs-ol",
      "root": "MuiBreadcrumbs-root",
      "separator": "MuiBreadcrumbs-separator",
    },
    "buttonBaseClasses": {
      "disabled": "Mui-disabled",
      "focusVisible": "Mui-focusVisible",
      "root": "MuiButtonBase-root",
    },
    "buttonClasses": {
      "colorError": "MuiButton-colorError",
      "colorInfo": "MuiButton-colorInfo",
      "colorInherit": "MuiButton-colorInherit",
      "colorPrimary": "MuiButton-colorPrimary",
      "colorSecondary": "MuiButton-colorSecondary",
      "colorSuccess": "MuiButton-colorSuccess",
      "colorWarning": "MuiButton-colorWarning",
      "contained": "MuiButton-contained",
      "containedError": "MuiButton-containedError",
      "containedInfo": "MuiButton-containedInfo",
      "containedInherit": "MuiButton-containedInherit",
      "containedPrimary": "MuiButton-containedPrimary",
      "containedSecondary": "MuiButton-containedSecondary",
      "containedSizeLarge": "MuiButton-containedSizeLarge",
      "containedSizeMedium": "MuiButton-containedSizeMedium",
      "containedSizeSmall": "MuiButton-containedSizeSmall",
      "containedSuccess": "MuiButton-containedSuccess",
      "containedWarning": "MuiButton-containedWarning",
      "disableElevation": "MuiButton-disableElevation",
      "disabled": "Mui-disabled",
      "endIcon": "MuiButton-endIcon",
      "focusVisible": "Mui-focusVisible",
      "fullWidth": "MuiButton-fullWidth",
      "icon": "MuiButton-icon",
      "iconSizeLarge": "MuiButton-iconSizeLarge",
      "iconSizeMedium": "MuiButton-iconSizeMedium",
      "iconSizeSmall": "MuiButton-iconSizeSmall",
      "outlined": "MuiButton-outlined",
      "outlinedError": "MuiButton-outlinedError",
      "outlinedInfo": "MuiButton-outlinedInfo",
      "outlinedInherit": "MuiButton-outlinedInherit",
      "outlinedPrimary": "MuiButton-outlinedPrimary",
      "outlinedSecondary": "MuiButton-outlinedSecondary",
      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
      "outlinedSizeMedium": "MuiButton-outlinedSizeMedium",
      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
      "outlinedSuccess": "MuiButton-outlinedSuccess",
      "outlinedWarning": "MuiButton-outlinedWarning",
      "root": "MuiButton-root",
      "sizeLarge": "MuiButton-sizeLarge",
      "sizeMedium": "MuiButton-sizeMedium",
      "sizeSmall": "MuiButton-sizeSmall",
      "startIcon": "MuiButton-startIcon",
      "text": "MuiButton-text",
      "textError": "MuiButton-textError",
      "textInfo": "MuiButton-textInfo",
      "textInherit": "MuiButton-textInherit",
      "textPrimary": "MuiButton-textPrimary",
      "textSecondary": "MuiButton-textSecondary",
      "textSizeLarge": "MuiButton-textSizeLarge",
      "textSizeMedium": "MuiButton-textSizeMedium",
      "textSizeSmall": "MuiButton-textSizeSmall",
      "textSuccess": "MuiButton-textSuccess",
      "textWarning": "MuiButton-textWarning",
    },
    "buttonGroupClasses": {
      "contained": "MuiButtonGroup-contained",
      "disableElevation": "MuiButtonGroup-disableElevation",
      "disabled": "Mui-disabled",
      "firstButton": "MuiButtonGroup-firstButton",
      "fullWidth": "MuiButtonGroup-fullWidth",
      "grouped": "MuiButtonGroup-grouped",
      "groupedContained": "MuiButtonGroup-groupedContained",
      "groupedContainedHorizontal": "MuiButtonGroup-groupedContainedHorizontal",
      "groupedContainedPrimary": "MuiButtonGroup-groupedContainedPrimary",
      "groupedContainedSecondary": "MuiButtonGroup-groupedContainedSecondary",
      "groupedContainedVertical": "MuiButtonGroup-groupedContainedVertical",
      "groupedHorizontal": "MuiButtonGroup-groupedHorizontal",
      "groupedOutlined": "MuiButtonGroup-groupedOutlined",
      "groupedOutlinedHorizontal": "MuiButtonGroup-groupedOutlinedHorizontal",
      "groupedOutlinedPrimary": "MuiButtonGroup-groupedOutlinedPrimary",
      "groupedOutlinedSecondary": "MuiButtonGroup-groupedOutlinedSecondary",
      "groupedOutlinedVertical": "MuiButtonGroup-groupedOutlinedVertical",
      "groupedText": "MuiButtonGroup-groupedText",
      "groupedTextHorizontal": "MuiButtonGroup-groupedTextHorizontal",
      "groupedTextPrimary": "MuiButtonGroup-groupedTextPrimary",
      "groupedTextSecondary": "MuiButtonGroup-groupedTextSecondary",
      "groupedTextVertical": "MuiButtonGroup-groupedTextVertical",
      "groupedVertical": "MuiButtonGroup-groupedVertical",
      "lastButton": "MuiButtonGroup-lastButton",
      "middleButton": "MuiButtonGroup-middleButton",
      "outlined": "MuiButtonGroup-outlined",
      "root": "MuiButtonGroup-root",
      "text": "MuiButtonGroup-text",
      "vertical": "MuiButtonGroup-vertical",
    },
    "capitalize": [Function],
    "cardActionAreaClasses": {
      "focusHighlight": "MuiCardActionArea-focusHighlight",
      "focusVisible": "Mui-focusVisible",
      "root": "MuiCardActionArea-root",
    },
    "cardActionsClasses": {
      "root": "MuiCardActions-root",
      "spacing": "MuiCardActions-spacing",
    },
    "cardClasses": {
      "root": "MuiCard-root",
    },
    "cardContentClasses": {
      "root": "MuiCardContent-root",
    },
    "cardHeaderClasses": {
      "action": "MuiCardHeader-action",
      "avatar": "MuiCardHeader-avatar",
      "content": "MuiCardHeader-content",
      "root": "MuiCardHeader-root",
      "subheader": "MuiCardHeader-subheader",
      "title": "MuiCardHeader-title",
    },
    "cardMediaClasses": {
      "img": "MuiCardMedia-img",
      "media": "MuiCardMedia-media",
      "root": "MuiCardMedia-root",
    },
    "checkboxClasses": {
      "checked": "Mui-checked",
      "colorPrimary": "MuiCheckbox-colorPrimary",
      "colorSecondary": "MuiCheckbox-colorSecondary",
      "disabled": "Mui-disabled",
      "indeterminate": "MuiCheckbox-indeterminate",
      "root": "MuiCheckbox-root",
      "sizeMedium": "MuiCheckbox-sizeMedium",
      "sizeSmall": "MuiCheckbox-sizeSmall",
    },
    "chipClasses": {
      "avatar": "MuiChip-avatar",
      "avatarColorPrimary": "MuiChip-avatarColorPrimary",
      "avatarColorSecondary": "MuiChip-avatarColorSecondary",
      "avatarMedium": "MuiChip-avatarMedium",
      "avatarSmall": "MuiChip-avatarSmall",
      "clickable": "MuiChip-clickable",
      "clickableColorPrimary": "MuiChip-clickableColorPrimary",
      "clickableColorSecondary": "MuiChip-clickableColorSecondary",
      "colorError": "MuiChip-colorError",
      "colorInfo": "MuiChip-colorInfo",
      "colorPrimary": "MuiChip-colorPrimary",
      "colorSecondary": "MuiChip-colorSecondary",
      "colorSuccess": "MuiChip-colorSuccess",
      "colorWarning": "MuiChip-colorWarning",
      "deletable": "MuiChip-deletable",
      "deletableColorPrimary": "MuiChip-deletableColorPrimary",
      "deletableColorSecondary": "MuiChip-deletableColorSecondary",
      "deleteIcon": "MuiChip-deleteIcon",
      "deleteIconColorPrimary": "MuiChip-deleteIconColorPrimary",
      "deleteIconColorSecondary": "MuiChip-deleteIconColorSecondary",
      "deleteIconFilledColorPrimary": "MuiChip-deleteIconFilledColorPrimary",
      "deleteIconFilledColorSecondary": "MuiChip-deleteIconFilledColorSecondary",
      "deleteIconMedium": "MuiChip-deleteIconMedium",
      "deleteIconOutlinedColorPrimary": "MuiChip-deleteIconOutlinedColorPrimary",
      "deleteIconOutlinedColorSecondary": "MuiChip-deleteIconOutlinedColorSecondary",
      "deleteIconSmall": "MuiChip-deleteIconSmall",
      "disabled": "Mui-disabled",
      "filled": "MuiChip-filled",
      "filledPrimary": "MuiChip-filledPrimary",
      "filledSecondary": "MuiChip-filledSecondary",
      "focusVisible": "Mui-focusVisible",
      "icon": "MuiChip-icon",
      "iconColorPrimary": "MuiChip-iconColorPrimary",
      "iconColorSecondary": "MuiChip-iconColorSecondary",
      "iconMedium": "MuiChip-iconMedium",
      "iconSmall": "MuiChip-iconSmall",
      "label": "MuiChip-label",
      "labelMedium": "MuiChip-labelMedium",
      "labelSmall": "MuiChip-labelSmall",
      "outlined": "MuiChip-outlined",
      "outlinedPrimary": "MuiChip-outlinedPrimary",
      "outlinedSecondary": "MuiChip-outlinedSecondary",
      "root": "MuiChip-root",
      "sizeMedium": "MuiChip-sizeMedium",
      "sizeSmall": "MuiChip-sizeSmall",
    },
    "circularProgressClasses": {
      "circle": "MuiCircularProgress-circle",
      "circleDeterminate": "MuiCircularProgress-circleDeterminate",
      "circleDisableShrink": "MuiCircularProgress-circleDisableShrink",
      "circleIndeterminate": "MuiCircularProgress-circleIndeterminate",
      "colorPrimary": "MuiCircularProgress-colorPrimary",
      "colorSecondary": "MuiCircularProgress-colorSecondary",
      "determinate": "MuiCircularProgress-determinate",
      "indeterminate": "MuiCircularProgress-indeterminate",
      "root": "MuiCircularProgress-root",
      "svg": "MuiCircularProgress-svg",
    },
    "collapseClasses": {
      "entered": "MuiCollapse-entered",
      "hidden": "MuiCollapse-hidden",
      "horizontal": "MuiCollapse-horizontal",
      "root": "MuiCollapse-root",
      "vertical": "MuiCollapse-vertical",
      "wrapper": "MuiCollapse-wrapper",
      "wrapperInner": "MuiCollapse-wrapperInner",
    },
    "colors": {
      "amber": {
        "100": "#ffecb3",
        "200": "#ffe082",
        "300": "#ffd54f",
        "400": "#ffca28",
        "50": "#fff8e1",
        "500": "#ffc107",
        "600": "#ffb300",
        "700": "#ffa000",
        "800": "#ff8f00",
        "900": "#ff6f00",
        "A100": "#ffe57f",
        "A200": "#ffd740",
        "A400": "#ffc400",
        "A700": "#ffab00",
      },
      "blue": {
        "100": "#bbdefb",
        "200": "#90caf9",
        "300": "#64b5f6",
        "400": "#42a5f5",
        "50": "#e3f2fd",
        "500": "#2196f3",
        "600": "#1e88e5",
        "700": "#1976d2",
        "800": "#1565c0",
        "900": "#0d47a1",
        "A100": "#82b1ff",
        "A200": "#448aff",
        "A400": "#2979ff",
        "A700": "#2962ff",
      },
      "blueGrey": {
        "100": "#cfd8dc",
        "200": "#b0bec5",
        "300": "#90a4ae",
        "400": "#78909c",
        "50": "#eceff1",
        "500": "#607d8b",
        "600": "#546e7a",
        "700": "#455a64",
        "800": "#37474f",
        "900": "#263238",
        "A100": "#cfd8dc",
        "A200": "#b0bec5",
        "A400": "#78909c",
        "A700": "#455a64",
      },
      "brown": {
        "100": "#d7ccc8",
        "200": "#bcaaa4",
        "300": "#a1887f",
        "400": "#8d6e63",
        "50": "#efebe9",
        "500": "#795548",
        "600": "#6d4c41",
        "700": "#5d4037",
        "800": "#4e342e",
        "900": "#3e2723",
        "A100": "#d7ccc8",
        "A200": "#bcaaa4",
        "A400": "#8d6e63",
        "A700": "#5d4037",
      },
      "common": {
        "black": "#000",
        "white": "#fff",
      },
      "cyan": {
        "100": "#b2ebf2",
        "200": "#80deea",
        "300": "#4dd0e1",
        "400": "#26c6da",
        "50": "#e0f7fa",
        "500": "#00bcd4",
        "600": "#00acc1",
        "700": "#0097a7",
        "800": "#00838f",
        "900": "#006064",
        "A100": "#84ffff",
        "A200": "#18ffff",
        "A400": "#00e5ff",
        "A700": "#00b8d4",
      },
      "deepOrange": {
        "100": "#ffccbc",
        "200": "#ffab91",
        "300": "#ff8a65",
        "400": "#ff7043",
        "50": "#fbe9e7",
        "500": "#ff5722",
        "600": "#f4511e",
        "700": "#e64a19",
        "800": "#d84315",
        "900": "#bf360c",
        "A100": "#ff9e80",
        "A200": "#ff6e40",
        "A400": "#ff3d00",
        "A700": "#dd2c00",
      },
      "deepPurple": {
        "100": "#d1c4e9",
        "200": "#b39ddb",
        "300": "#9575cd",
        "400": "#7e57c2",
        "50": "#ede7f6",
        "500": "#673ab7",
        "600": "#5e35b1",
        "700": "#512da8",
        "800": "#4527a0",
        "900": "#311b92",
        "A100": "#b388ff",
        "A200": "#7c4dff",
        "A400": "#651fff",
        "A700": "#6200ea",
      },
      "green": {
        "100": "#c8e6c9",
        "200": "#a5d6a7",
        "300": "#81c784",
        "400": "#66bb6a",
        "50": "#e8f5e9",
        "500": "#4caf50",
        "600": "#43a047",
        "700": "#388e3c",
        "800": "#2e7d32",
        "900": "#1b5e20",
        "A100": "#b9f6ca",
        "A200": "#69f0ae",
        "A400": "#00e676",
        "A700": "#00c853",
      },
      "grey": {
        "100": "#f5f5f5",
        "200": "#eeeeee",
        "300": "#e0e0e0",
        "400": "#bdbdbd",
        "50": "#fafafa",
        "500": "#9e9e9e",
        "600": "#757575",
        "700": "#616161",
        "800": "#424242",
        "900": "#212121",
        "A100": "#f5f5f5",
        "A200": "#eeeeee",
        "A400": "#bdbdbd",
        "A700": "#616161",
      },
      "indigo": {
        "100": "#c5cae9",
        "200": "#9fa8da",
        "300": "#7986cb",
        "400": "#5c6bc0",
        "50": "#e8eaf6",
        "500": "#3f51b5",
        "600": "#3949ab",
        "700": "#303f9f",
        "800": "#283593",
        "900": "#1a237e",
        "A100": "#8c9eff",
        "A200": "#536dfe",
        "A400": "#3d5afe",
        "A700": "#304ffe",
      },
      "lightBlue": {
        "100": "#b3e5fc",
        "200": "#81d4fa",
        "300": "#4fc3f7",
        "400": "#29b6f6",
        "50": "#e1f5fe",
        "500": "#03a9f4",
        "600": "#039be5",
        "700": "#0288d1",
        "800": "#0277bd",
        "900": "#01579b",
        "A100": "#80d8ff",
        "A200": "#40c4ff",
        "A400": "#00b0ff",
        "A700": "#0091ea",
      },
      "lightGreen": {
        "100": "#dcedc8",
        "200": "#c5e1a5",
        "300": "#aed581",
        "400": "#9ccc65",
        "50": "#f1f8e9",
        "500": "#8bc34a",
        "600": "#7cb342",
        "700": "#689f38",
        "800": "#558b2f",
        "900": "#33691e",
        "A100": "#ccff90",
        "A200": "#b2ff59",
        "A400": "#76ff03",
        "A700": "#64dd17",
      },
      "lime": {
        "100": "#f0f4c3",
        "200": "#e6ee9c",
        "300": "#dce775",
        "400": "#d4e157",
        "50": "#f9fbe7",
        "500": "#cddc39",
        "600": "#c0ca33",
        "700": "#afb42b",
        "800": "#9e9d24",
        "900": "#827717",
        "A100": "#f4ff81",
        "A200": "#eeff41",
        "A400": "#c6ff00",
        "A700": "#aeea00",
      },
      "orange": {
        "100": "#ffe0b2",
        "200": "#ffcc80",
        "300": "#ffb74d",
        "400": "#ffa726",
        "50": "#fff3e0",
        "500": "#ff9800",
        "600": "#fb8c00",
        "700": "#f57c00",
        "800": "#ef6c00",
        "900": "#e65100",
        "A100": "#ffd180",
        "A200": "#ffab40",
        "A400": "#ff9100",
        "A700": "#ff6d00",
      },
      "pink": {
        "100": "#f8bbd0",
        "200": "#f48fb1",
        "300": "#f06292",
        "400": "#ec407a",
        "50": "#fce4ec",
        "500": "#e91e63",
        "600": "#d81b60",
        "700": "#c2185b",
        "800": "#ad1457",
        "900": "#880e4f",
        "A100": "#ff80ab",
        "A200": "#ff4081",
        "A400": "#f50057",
        "A700": "#c51162",
      },
      "purple": {
        "100": "#e1bee7",
        "200": "#ce93d8",
        "300": "#ba68c8",
        "400": "#ab47bc",
        "50": "#f3e5f5",
        "500": "#9c27b0",
        "600": "#8e24aa",
        "700": "#7b1fa2",
        "800": "#6a1b9a",
        "900": "#4a148c",
        "A100": "#ea80fc",
        "A200": "#e040fb",
        "A400": "#d500f9",
        "A700": "#aa00ff",
      },
      "red": {
        "100": "#ffcdd2",
        "200": "#ef9a9a",
        "300": "#e57373",
        "400": "#ef5350",
        "50": "#ffebee",
        "500": "#f44336",
        "600": "#e53935",
        "700": "#d32f2f",
        "800": "#c62828",
        "900": "#b71c1c",
        "A100": "#ff8a80",
        "A200": "#ff5252",
        "A400": "#ff1744",
        "A700": "#d50000",
      },
      "teal": {
        "100": "#b2dfdb",
        "200": "#80cbc4",
        "300": "#4db6ac",
        "400": "#26a69a",
        "50": "#e0f2f1",
        "500": "#009688",
        "600": "#00897b",
        "700": "#00796b",
        "800": "#00695c",
        "900": "#004d40",
        "A100": "#a7ffeb",
        "A200": "#64ffda",
        "A400": "#1de9b6",
        "A700": "#00bfa5",
      },
      "yellow": {
        "100": "#fff9c4",
        "200": "#fff59d",
        "300": "#fff176",
        "400": "#ffee58",
        "50": "#fffde7",
        "500": "#ffeb3b",
        "600": "#fdd835",
        "700": "#fbc02d",
        "800": "#f9a825",
        "900": "#f57f17",
        "A100": "#ffff8d",
        "A200": "#ffff00",
        "A400": "#ffea00",
        "A700": "#ffd600",
      },
    },
    "containerClasses": {
      "disableGutters": "MuiContainer-disableGutters",
      "fixed": "MuiContainer-fixed",
      "maxWidthLg": "MuiContainer-maxWidthLg",
      "maxWidthMd": "MuiContainer-maxWidthMd",
      "maxWidthSm": "MuiContainer-maxWidthSm",
      "maxWidthXl": "MuiContainer-maxWidthXl",
      "maxWidthXs": "MuiContainer-maxWidthXs",
      "root": "MuiContainer-root",
    },
    "createChainedFunction": [Function],
    "createFilterOptions": [Function],
    "createMuiTheme": [Function],
    "createStyles": [Function],
    "createSvgIcon": [Function],
    "createTheme": [Function],
    "css": [Function],
    "darkScrollbar": [Function],
    "darken": [Function],
    "debounce": [Function],
    "decomposeColor": [Function],
    "deprecatedPropType": [Function],
    "dialogActionsClasses": {
      "root": "MuiDialogActions-root",
      "spacing": "MuiDialogActions-spacing",
    },
    "dialogClasses": {
      "container": "MuiDialog-container",
      "paper": "MuiDialog-paper",
      "paperFullScreen": "MuiDialog-paperFullScreen",
      "paperFullWidth": "MuiDialog-paperFullWidth",
      "paperScrollBody": "MuiDialog-paperScrollBody",
      "paperScrollPaper": "MuiDialog-paperScrollPaper",
      "paperWidthFalse": "MuiDialog-paperWidthFalse",
      "paperWidthLg": "MuiDialog-paperWidthLg",
      "paperWidthMd": "MuiDialog-paperWidthMd",
      "paperWidthSm": "MuiDialog-paperWidthSm",
      "paperWidthXl": "MuiDialog-paperWidthXl",
      "paperWidthXs": "MuiDialog-paperWidthXs",
      "root": "MuiDialog-root",
      "scrollBody": "MuiDialog-scrollBody",
      "scrollPaper": "MuiDialog-scrollPaper",
    },
    "dialogContentClasses": {
      "dividers": "MuiDialogContent-dividers",
      "root": "MuiDialogContent-root",
    },
    "dialogContentTextClasses": {
      "root": "MuiDialogContentText-root",
    },
    "dialogTitleClasses": {
      "root": "MuiDialogTitle-root",
    },
    "dividerClasses": {
      "absolute": "MuiDivider-absolute",
      "flexItem": "MuiDivider-flexItem",
      "fullWidth": "MuiDivider-fullWidth",
      "inset": "MuiDivider-inset",
      "light": "MuiDivider-light",
      "middle": "MuiDivider-middle",
      "root": "MuiDivider-root",
      "textAlignLeft": "MuiDivider-textAlignLeft",
      "textAlignRight": "MuiDivider-textAlignRight",
      "vertical": "MuiDivider-vertical",
      "withChildren": "MuiDivider-withChildren",
      "withChildrenVertical": "MuiDivider-withChildrenVertical",
      "wrapper": "MuiDivider-wrapper",
      "wrapperVertical": "MuiDivider-wrapperVertical",
    },
    "drawerClasses": {
      "docked": "MuiDrawer-docked",
      "modal": "MuiDrawer-modal",
      "paper": "MuiDrawer-paper",
      "paperAnchorBottom": "MuiDrawer-paperAnchorBottom",
      "paperAnchorDockedBottom": "MuiDrawer-paperAnchorDockedBottom",
      "paperAnchorDockedLeft": "MuiDrawer-paperAnchorDockedLeft",
      "paperAnchorDockedRight": "MuiDrawer-paperAnchorDockedRight",
      "paperAnchorDockedTop": "MuiDrawer-paperAnchorDockedTop",
      "paperAnchorLeft": "MuiDrawer-paperAnchorLeft",
      "paperAnchorRight": "MuiDrawer-paperAnchorRight",
      "paperAnchorTop": "MuiDrawer-paperAnchorTop",
      "root": "MuiDrawer-root",
    },
    "duration": {
      "complex": 375,
      "enteringScreen": 225,
      "leavingScreen": 195,
      "short": 250,
      "shorter": 200,
      "shortest": 150,
      "standard": 300,
    },
    "easing": {
      "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
      "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
      "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
      "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
    },
    "emphasize": [Function],
    "experimentalStyled": [Function],
    "experimental_extendTheme": [Function],
    "experimental_sx": [Function],
    "fabClasses": {
      "circular": "MuiFab-circular",
      "colorInherit": "MuiFab-colorInherit",
      "disabled": "Mui-disabled",
      "error": "Mui-error",
      "extended": "MuiFab-extended",
      "focusVisible": "Mui-focusVisible",
      "info": "MuiFab-info",
      "primary": "MuiFab-primary",
      "root": "MuiFab-root",
      "secondary": "MuiFab-secondary",
      "sizeLarge": "MuiFab-sizeLarge",
      "sizeMedium": "MuiFab-sizeMedium",
      "sizeSmall": "MuiFab-sizeSmall",
      "success": "MuiFab-success",
      "warning": "MuiFab-warning",
    },
    "filledInputClasses": {
      "adornedEnd": "MuiInputBase-adornedEnd",
      "adornedStart": "MuiInputBase-adornedStart",
      "colorSecondary": "MuiInputBase-colorSecondary",
      "disabled": "Mui-disabled",
      "error": "Mui-error",
      "focused": "Mui-focused",
      "formControl": "MuiInputBase-formControl",
      "fullWidth": "MuiInputBase-fullWidth",
      "hiddenLabel": "MuiInputBase-hiddenLabel",
      "input": "MuiFilledInput-input",
      "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
      "inputAdornedStart": "MuiInputBase-inputAdornedStart",
      "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
      "inputMultiline": "MuiInputBase-inputMultiline",
      "inputSizeSmall": "MuiInputBase-inputSizeSmall",
      "inputTypeSearch": "MuiInputBase-inputTypeSearch",
      "multiline": "MuiInputBase-multiline",
      "readOnly": "Mui-readOnly",
      "root": "MuiFilledInput-root",
      "sizeSmall": "MuiInputBase-sizeSmall",
      "underline": "MuiFilledInput-underline",
    },
    "formControlClasses": {
      "disabled": "Mui-disabled",
      "fullWidth": "MuiFormControl-fullWidth",
      "marginDense": "MuiFormControl-marginDense",
      "marginNone": "MuiFormControl-marginNone",
      "marginNormal": "MuiFormControl-marginNormal",
      "root": "MuiFormControl-root",
    },
    "formControlLabelClasses": {
      "asterisk": "MuiFormControlLabel-asterisk",
      "disabled": "Mui-disabled",
      "error": "Mui-error",
      "label": "MuiFormControlLabel-label",
      "labelPlacementBottom": "MuiFormControlLabel-labelPlacementBottom",
      "labelPlacementStart": "MuiFormControlLabel-labelPlacementStart",
      "labelPlacementTop": "MuiFormControlLabel-labelPlacementTop",
      "required": "Mui-required",
      "root": "MuiFormControlLabel-root",
    },
    "formGroupClasses": {
      "error": "Mui-error",
      "root": "MuiFormGroup-root",
      "row": "MuiFormGroup-row",
    },
    "formHelperTextClasses": {
      "contained": "MuiFormHelperText-contained",
      "disabled": "Mui-disabled",
      "error": "Mui-error",
      "filled": "MuiFormHelperText-filled",
      "focused": "Mui-focused",
      "required": "Mui-required",
      "root": "MuiFormHelperText-root",
      "sizeMedium": "MuiFormHelperText-sizeMedium",
      "sizeSmall": "MuiFormHelperText-sizeSmall",
    },
    "formLabelClasses": {
      "asterisk": "MuiFormLabel-asterisk",
      "colorSecondary": "MuiFormLabel-colorSecondary",
      "disabled": "Mui-disabled",
      "error": "Mui-error",
      "filled": "MuiFormLabel-filled",
      "focused": "Mui-focused",
      "required": "Mui-required",
      "root": "MuiFormLabel-root",
    },
    "generateUtilityClass": [Function],
    "generateUtilityClasses": [Function],
    "getAccordionActionsUtilityClass": [Function],
    "getAccordionDetailsUtilityClass": [Function],
    "getAccordionSummaryUtilityClass": [Function],
    "getAccordionUtilityClass": [Function],
    "getAlertTitleUtilityClass": [Function],
    "getAlertUtilityClass": [Function],
    "getAppBarUtilityClass": [Function],
    "getAutocompleteUtilityClass": [Function],
    "getAvatarGroupUtilityClass": [Function],
    "getAvatarUtilityClass": [Function],
    "getBackdropUtilityClass": [Function],
    "getBadgeUtilityClass": [Function],
    "getBottomNavigationActionUtilityClass": [Function],
    "getBottomNavigationUtilityClass": [Function],
    "getBreadcrumbsUtilityClass": [Function],
    "getButtonBaseUtilityClass": [Function],
    "getButtonGroupUtilityClass": [Function],
    "getButtonUtilityClass": [Function],
    "getCardActionAreaUtilityClass": [Function],
    "getCardActionsUtilityClass": [Function],
    "getCardContentUtilityClass": [Function],
    "getCardHeaderUtilityClass": [Function],
    "getCardMediaUtilityClass": [Function],
    "getCardUtilityClass": [Function],
    "getCheckboxUtilityClass": [Function],
    "getChipUtilityClass": [Function],
    "getCircularProgressUtilityClass": [Function],
    "getCollapseUtilityClass": [Function],
    "getContainerUtilityClass": [Function],
    "getContrastRatio": [Function],
    "getDialogActionsUtilityClass": [Function],
    "getDialogContentTextUtilityClass": [Function],
    "getDialogContentUtilityClass": [Function],
    "getDialogTitleUtilityClass": [Function],
    "getDialogUtilityClass": [Function],
    "getDividerUtilityClass": [Function],
    "getDrawerUtilityClass": [Function],
    "getFabUtilityClass": [Function],
    "getFilledInputUtilityClass": [Function],
    "getFormControlLabelUtilityClasses": [Function],
    "getFormControlUtilityClasses": [Function],
    "getFormGroupUtilityClass": [Function],
    "getFormHelperTextUtilityClasses": [Function],
    "getFormLabelUtilityClasses": [Function],
    "getGrid2UtilityClass": [Function],
    "getGridUtilityClass": [Function],
    "getIconButtonUtilityClass": [Function],
    "getIconUtilityClass": [Function],
    "getImageListItemBarUtilityClass": [Function],
    "getImageListItemUtilityClass": [Function],
    "getImageListUtilityClass": [Function],
    "getInitColorSchemeScript": [Function],
    "getInputAdornmentUtilityClass": [Function],
    "getInputBaseUtilityClass": [Function],
    "getInputLabelUtilityClasses": [Function],
    "getInputUtilityClass": [Function],
    "getLinearProgressUtilityClass": [Function],
    "getLinkUtilityClass": [Function],
    "getListItemAvatarUtilityClass": [Function],
    "getListItemButtonUtilityClass": [Function],
    "getListItemIconUtilityClass": [Function],
    "getListItemSecondaryActionClassesUtilityClass": [Function],
    "getListItemTextUtilityClass": [Function],
    "getListItemUtilityClass": [Function],
    "getListSubheaderUtilityClass": [Function],
    "getListUtilityClass": [Function],
    "getLuminance": [Function],
    "getMenuItemUtilityClass": [Function],
    "getMenuUtilityClass": [Function],
    "getMobileStepperUtilityClass": [Function],
    "getModalUtilityClass": [Function],
    "getNativeSelectUtilityClasses": [Function],
    "getOffsetLeft": [Function],
    "getOffsetTop": [Function],
    "getOutlinedInputUtilityClass": [Function],
    "getOverlayAlpha": [Function],
    "getPaginationItemUtilityClass": [Function],
    "getPaginationUtilityClass": [Function],
    "getPaperUtilityClass": [Function],
    "getPopoverUtilityClass": [Function],
    "getPopperUtilityClass": [Function],
    "getRadioGroupUtilityClass": [Function],
    "getRadioUtilityClass": [Function],
    "getRatingUtilityClass": [Function],
    "getScopedCssBaselineUtilityClass": [Function],
    "getSelectUtilityClasses": [Function],
    "getSkeletonUtilityClass": [Function],
    "getSliderUtilityClass": [Function],
    "getSnackbarContentUtilityClass": [Function],
    "getSnackbarUtilityClass": [Function],
    "getSpeedDialActionUtilityClass": [Function],
    "getSpeedDialIconUtilityClass": [Function],
    "getSpeedDialUtilityClass": [Function],
    "getStepButtonUtilityClass": [Function],
    "getStepConnectorUtilityClass": [Function],
    "getStepContentUtilityClass": [Function],
    "getStepIconUtilityClass": [Function],
    "getStepLabelUtilityClass": [Function],
    "getStepUtilityClass": [Function],
    "getStepperUtilityClass": [Function],
    "getSvgIconUtilityClass": [Function],
    "getSwitchUtilityClass": [Function],
    "getTabScrollButtonUtilityClass": [Function],
    "getTabUtilityClass": [Function],
    "getTableBodyUtilityClass": [Function],
    "getTableCellUtilityClass": [Function],
    "getTableContainerUtilityClass": [Function],
    "getTableFooterUtilityClass": [Function],
    "getTableHeadUtilityClass": [Function],
    "getTablePaginationUtilityClass": [Function],
    "getTableRowUtilityClass": [Function],
    "getTableSortLabelUtilityClass": [Function],
    "getTableUtilityClass": [Function],
    "getTabsUtilityClass": [Function],
    "getTextFieldUtilityClass": [Function],
    "getToggleButtonGroupUtilityClass": [Function],
    "getToggleButtonUtilityClass": [Function],
    "getToolbarUtilityClass": [Function],
    "getTooltipUtilityClass": [Function],
    "getTouchRippleUtilityClass": [Function],
    "getTypographyUtilityClass": [Function],
    "grid2Classes": {
      "container": "MuiGrid2-container",
      "direction-xs-column": "MuiGrid2-direction-xs-column",
      "direction-xs-column-reverse": "MuiGrid2-direction-xs-column-reverse",
      "direction-xs-row": "MuiGrid2-direction-xs-row",
      "direction-xs-row-reverse": "MuiGrid2-direction-xs-row-reverse",
      "grid-lg-1": "MuiGrid2-grid-lg-1",
      "grid-lg-10": "MuiGrid2-grid-lg-10",
      "grid-lg-11": "MuiGrid2-grid-lg-11",
      "grid-lg-12": "MuiGrid2-grid-lg-12",
      "grid-lg-2": "MuiGrid2-grid-lg-2",
      "grid-lg-3": "MuiGrid2-grid-lg-3",
      "grid-lg-4": "MuiGrid2-grid-lg-4",
      "grid-lg-5": "MuiGrid2-grid-lg-5",
      "grid-lg-6": "MuiGrid2-grid-lg-6",
      "grid-lg-7": "MuiGrid2-grid-lg-7",
      "grid-lg-8": "MuiGrid2-grid-lg-8",
      "grid-lg-9": "MuiGrid2-grid-lg-9",
      "grid-lg-auto": "MuiGrid2-grid-lg-auto",
      "grid-lg-true": "MuiGrid2-grid-lg-true",
      "grid-md-1": "MuiGrid2-grid-md-1",
      "grid-md-10": "MuiGrid2-grid-md-10",
      "grid-md-11": "MuiGrid2-grid-md-11",
      "grid-md-12": "MuiGrid2-grid-md-12",
      "grid-md-2": "MuiGrid2-grid-md-2",
      "grid-md-3": "MuiGrid2-grid-md-3",
      "grid-md-4": "MuiGrid2-grid-md-4",
      "grid-md-5": "MuiGrid2-grid-md-5",
      "grid-md-6": "MuiGrid2-grid-md-6",
      "grid-md-7": "MuiGrid2-grid-md-7",
      "grid-md-8": "MuiGrid2-grid-md-8",
      "grid-md-9": "MuiGrid2-grid-md-9",
      "grid-md-auto": "MuiGrid2-grid-md-auto",
      "grid-md-true": "MuiGrid2-grid-md-true",
      "grid-sm-1": "MuiGrid2-grid-sm-1",
      "grid-sm-10": "MuiGrid2-grid-sm-10",
      "grid-sm-11": "MuiGrid2-grid-sm-11",
      "grid-sm-12": "MuiGrid2-grid-sm-12",
      "grid-sm-2": "MuiGrid2-grid-sm-2",
      "grid-sm-3": "MuiGrid2-grid-sm-3",
      "grid-sm-4": "MuiGrid2-grid-sm-4",
      "grid-sm-5": "MuiGrid2-grid-sm-5",
      "grid-sm-6": "MuiGrid2-grid-sm-6",
      "grid-sm-7": "MuiGrid2-grid-sm-7",
      "grid-sm-8": "MuiGrid2-grid-sm-8",
      "grid-sm-9": "MuiGrid2-grid-sm-9",
      "grid-sm-auto": "MuiGrid2-grid-sm-auto",
      "grid-sm-true": "MuiGrid2-grid-sm-true",
      "grid-xl-1": "MuiGrid2-grid-xl-1",
      "grid-xl-10": "MuiGrid2-grid-xl-10",
      "grid-xl-11": "MuiGrid2-grid-xl-11",
      "grid-xl-12": "MuiGrid2-grid-xl-12",
      "grid-xl-2": "MuiGrid2-grid-xl-2",
      "grid-xl-3": "MuiGrid2-grid-xl-3",
      "grid-xl-4": "MuiGrid2-grid-xl-4",
      "grid-xl-5": "MuiGrid2-grid-xl-5",
      "grid-xl-6": "MuiGrid2-grid-xl-6",
      "grid-xl-7": "MuiGrid2-grid-xl-7",
      "grid-xl-8": "MuiGrid2-grid-xl-8",
      "grid-xl-9": "MuiGrid2-grid-xl-9",
      "grid-xl-auto": "MuiGrid2-grid-xl-auto",
      "grid-xl-true": "MuiGrid2-grid-xl-true",
      "grid-xs-1": "MuiGrid2-grid-xs-1",
      "grid-xs-10": "MuiGrid2-grid-xs-10",
      "grid-xs-11": "MuiGrid2-grid-xs-11",
      "grid-xs-12": "MuiGrid2-grid-xs-12",
      "grid-xs-2": "MuiGrid2-grid-xs-2",
      "grid-xs-3": "MuiGrid2-grid-xs-3",
      "grid-xs-4": "MuiGrid2-grid-xs-4",
      "grid-xs-5": "MuiGrid2-grid-xs-5",
      "grid-xs-6": "MuiGrid2-grid-xs-6",
      "grid-xs-7": "MuiGrid2-grid-xs-7",
      "grid-xs-8": "MuiGrid2-grid-xs-8",
      "grid-xs-9": "MuiGrid2-grid-xs-9",
      "grid-xs-auto": "MuiGrid2-grid-xs-auto",
      "grid-xs-true": "MuiGrid2-grid-xs-true",
      "item": "MuiGrid2-item",
      "root": "MuiGrid2-root",
      "spacing-xs-0": "MuiGrid2-spacing-xs-0",
      "spacing-xs-1": "MuiGrid2-spacing-xs-1",
      "spacing-xs-10": "MuiGrid2-spacing-xs-10",
      "spacing-xs-2": "MuiGrid2-spacing-xs-2",
      "spacing-xs-3": "MuiGrid2-spacing-xs-3",
      "spacing-xs-4": "MuiGrid2-spacing-xs-4",
      "spacing-xs-5": "MuiGrid2-spacing-xs-5",
      "spacing-xs-6": "MuiGrid2-spacing-xs-6",
      "spacing-xs-7": "MuiGrid2-spacing-xs-7",
      "spacing-xs-8": "MuiGrid2-spacing-xs-8",
      "spacing-xs-9": "MuiGrid2-spacing-xs-9",
      "wrap-xs-nowrap": "MuiGrid2-wrap-xs-nowrap",
      "wrap-xs-wrap": "MuiGrid2-wrap-xs-wrap",
      "wrap-xs-wrap-reverse": "MuiGrid2-wrap-xs-wrap-reverse",
      "zeroMinWidth": "MuiGrid2-zeroMinWidth",
    },
    "gridClasses": {
      "container": "MuiGrid-container",
      "direction-xs-column": "MuiGrid-direction-xs-column",
      "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
      "direction-xs-row": "MuiGrid-direction-xs-row",
      "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
      "grid-lg-1": "MuiGrid-grid-lg-1",
      "grid-lg-10": "MuiGrid-grid-lg-10",
      "grid-lg-11": "MuiGrid-grid-lg-11",
      "grid-lg-12": "MuiGrid-grid-lg-12",
      "grid-lg-2": "MuiGrid-grid-lg-2",
      "grid-lg-3": "MuiGrid-grid-lg-3",
      "grid-lg-4": "MuiGrid-grid-lg-4",
      "grid-lg-5": "MuiGrid-grid-lg-5",
      "grid-lg-6": "MuiGrid-grid-lg-6",
      "grid-lg-7": "MuiGrid-grid-lg-7",
      "grid-lg-8": "MuiGrid-grid-lg-8",
      "grid-lg-9": "MuiGrid-grid-lg-9",
      "grid-lg-auto": "MuiGrid-grid-lg-auto",
      "grid-lg-true": "MuiGrid-grid-lg-true",
      "grid-md-1": "MuiGrid-grid-md-1",
      "grid-md-10": "MuiGrid-grid-md-10",
      "grid-md-11": "MuiGrid-grid-md-11",
      "grid-md-12": "MuiGrid-grid-md-12",
      "grid-md-2": "MuiGrid-grid-md-2",
      "grid-md-3": "MuiGrid-grid-md-3",
      "grid-md-4": "MuiGrid-grid-md-4",
      "grid-md-5": "MuiGrid-grid-md-5",
      "grid-md-6": "MuiGrid-grid-md-6",
      "grid-md-7": "MuiGrid-grid-md-7",
      "grid-md-8": "MuiGrid-grid-md-8",
      "grid-md-9": "MuiGrid-grid-md-9",
      "grid-md-auto": "MuiGrid-grid-md-auto",
      "grid-md-true": "MuiGrid-grid-md-true",
      "grid-sm-1": "MuiGrid-grid-sm-1",
      "grid-sm-10": "MuiGrid-grid-sm-10",
      "grid-sm-11": "MuiGrid-grid-sm-11",
      "grid-sm-12": "MuiGrid-grid-sm-12",
      "grid-sm-2": "MuiGrid-grid-sm-2",
      "grid-sm-3": "MuiGrid-grid-sm-3",
      "grid-sm-4": "MuiGrid-grid-sm-4",
      "grid-sm-5": "MuiGrid-grid-sm-5",
      "grid-sm-6": "MuiGrid-grid-sm-6",
      "grid-sm-7": "MuiGrid-grid-sm-7",
      "grid-sm-8": "MuiGrid-grid-sm-8",
      "grid-sm-9": "MuiGrid-grid-sm-9",
      "grid-sm-auto": "MuiGrid-grid-sm-auto",
      "grid-sm-true": "MuiGrid-grid-sm-true",
      "grid-xl-1": "MuiGrid-grid-xl-1",
      "grid-xl-10": "MuiGrid-grid-xl-10",
      "grid-xl-11": "MuiGrid-grid-xl-11",
      "grid-xl-12": "MuiGrid-grid-xl-12",
      "grid-xl-2": "MuiGrid-grid-xl-2",
      "grid-xl-3": "MuiGrid-grid-xl-3",
      "grid-xl-4": "MuiGrid-grid-xl-4",
      "grid-xl-5": "MuiGrid-grid-xl-5",
      "grid-xl-6": "MuiGrid-grid-xl-6",
      "grid-xl-7": "MuiGrid-grid-xl-7",
      "grid-xl-8": "MuiGrid-grid-xl-8",
      "grid-xl-9": "MuiGrid-grid-xl-9",
      "grid-xl-auto": "MuiGrid-grid-xl-auto",
      "grid-xl-true": "MuiGrid-grid-xl-true",
      "grid-xs-1": "MuiGrid-grid-xs-1",
      "grid-xs-10": "MuiGrid-grid-xs-10",
      "grid-xs-11": "MuiGrid-grid-xs-11",
      "grid-xs-12": "MuiGrid-grid-xs-12",
      "grid-xs-2": "MuiGrid-grid-xs-2",
      "grid-xs-3": "MuiGrid-grid-xs-3",
      "grid-xs-4": "MuiGrid-grid-xs-4",
      "grid-xs-5": "MuiGrid-grid-xs-5",
      "grid-xs-6": "MuiGrid-grid-xs-6",
      "grid-xs-7": "MuiGrid-grid-xs-7",
      "grid-xs-8": "MuiGrid-grid-xs-8",
      "grid-xs-9": "MuiGrid-grid-xs-9",
      "grid-xs-auto": "MuiGrid-grid-xs-auto",
      "grid-xs-true": "MuiGrid-grid-xs-true",
      "item": "MuiGrid-item",
      "root": "MuiGrid-root",
      "spacing-xs-0": "MuiGrid-spacing-xs-0",
      "spacing-xs-1": "MuiGrid-spacing-xs-1",
      "spacing-xs-10": "MuiGrid-spacing-xs-10",
      "spacing-xs-2": "MuiGrid-spacing-xs-2",
      "spacing-xs-3": "MuiGrid-spacing-xs-3",
      "spacing-xs-4": "MuiGrid-spacing-xs-4",
      "spacing-xs-5": "MuiGrid-spacing-xs-5",
      "spacing-xs-6": "MuiGrid-spacing-xs-6",
      "spacing-xs-7": "MuiGrid-spacing-xs-7",
      "spacing-xs-8": "MuiGrid-spacing-xs-8",
      "spacing-xs-9": "MuiGrid-spacing-xs-9",
      "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
      "wrap-xs-wrap": "MuiGrid-wrap-xs-wrap",
      "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
      "zeroMinWidth": "MuiGrid-zeroMinWidth",
    },
    "hexToRgb": [Function],
    "hslToRgb": [Function],
    "iconButtonClasses": {
      "colorError": "MuiIconButton-colorError",
      "colorInfo": "MuiIconButton-colorInfo",
      "colorInherit": "MuiIconButton-colorInherit",
      "colorPrimary": "MuiIconButton-colorPrimary",
      "colorSecondary": "MuiIconButton-colorSecondary",
      "colorSuccess": "MuiIconButton-colorSuccess",
      "colorWarning": "MuiIconButton-colorWarning",
      "disabled": "Mui-disabled",
      "edgeEnd": "MuiIconButton-edgeEnd",
      "edgeStart": "MuiIconButton-edgeStart",
      "root": "MuiIconButton-root",
      "sizeLarge": "MuiIconButton-sizeLarge",
      "sizeMedium": "MuiIconButton-sizeMedium",
      "sizeSmall": "MuiIconButton-sizeSmall",
    },
    "iconClasses": {
      "colorAction": "MuiIcon-colorAction",
      "colorDisabled": "MuiIcon-colorDisabled",
      "colorError": "MuiIcon-colorError",
      "colorPrimary": "MuiIcon-colorPrimary",
      "colorSecondary": "MuiIcon-colorSecondary",
      "fontSizeInherit": "MuiIcon-fontSizeInherit",
      "fontSizeLarge": "MuiIcon-fontSizeLarge",
      "fontSizeMedium": "MuiIcon-fontSizeMedium",
      "fontSizeSmall": "MuiIcon-fontSizeSmall",
      "root": "MuiIcon-root",
    },
    "imageListClasses": {
      "masonry": "MuiImageList-masonry",
      "quilted": "MuiImageList-quilted",
      "root": "MuiImageList-root",
      "standard": "MuiImageList-standard",
      "woven": "MuiImageList-woven",
    },
    "imageListItemBarClasses": {
      "actionIcon": "MuiImageListItemBar-actionIcon",
      "actionIconActionPosLeft": "MuiImageListItemBar-actionIconActionPosLeft",
      "actionIconActionPosRight": "MuiImageListItemBar-actionIconActionPosRight",
      "positionBelow": "MuiImageListItemBar-positionBelow",
      "positionBottom": "MuiImageListItemBar-positionBottom",
      "positionTop": "MuiImageListItemBar-positionTop",
      "root": "MuiImageListItemBar-root",
      "subtitle": "MuiImageListItemBar-subtitle",
      "title": "MuiImageListItemBar-title",
      "titleWrap": "MuiImageListItemBar-titleWrap",
      "titleWrapActionPosLeft": "MuiImageListItemBar-titleWrapActionPosLeft",
      "titleWrapActionPosRight": "MuiImageListItemBar-titleWrapActionPosRight",
      "titleWrapBelow": "MuiImageListItemBar-titleWrapBelow",
      "titleWrapBottom": "MuiImageListItemBar-titleWrapBottom",
      "titleWrapTop": "MuiImageListItemBar-titleWrapTop",
    },
    "imageListItemClasses": {
      "img": "MuiImageListItem-img",
      "masonry": "MuiImageListItem-masonry",
      "quilted": "MuiImageListItem-quilted",
      "root": "MuiImageListItem-root",
      "standard": "MuiImageListItem-standard",
      "woven": "MuiImageListItem-woven",
    },
    "inputAdornmentClasses": {
      "disablePointerEvents": "MuiInputAdornment-disablePointerEvents",
      "filled": "MuiInputAdornment-filled",
      "hiddenLabel": "MuiInputAdornment-hiddenLabel",
      "outlined": "MuiInputAdornment-outlined",
      "positionEnd": "MuiInputAdornment-positionEnd",
      "positionStart": "MuiInputAdornment-positionStart",
      "root": "MuiInputAdornment-root",
      "sizeSmall": "MuiInputAdornment-sizeSmall",
      "standard": "MuiInputAdornment-standard",
    },
    "inputBaseClasses": {
      "adornedEnd": "MuiInputBase-adornedEnd",
      "adornedStart": "MuiInputBase-adornedStart",
      "colorSecondary": "MuiInputBase-colorSecondary",
      "disabled": "Mui-disabled",
      "error": "Mui-error",
      "focused": "Mui-focused",
      "formControl": "MuiInputBase-formControl",
      "fullWidth": "MuiInputBase-fullWidth",
      "hiddenLabel": "MuiInputBase-hiddenLabel",
      "input": "MuiInputBase-input",
      "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
      "inputAdornedStart": "MuiInputBase-inputAdornedStart",
      "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
      "inputMultiline": "MuiInputBase-inputMultiline",
      "inputSizeSmall": "MuiInputBase-inputSizeSmall",
      "inputTypeSearch": "MuiInputBase-inputTypeSearch",
      "multiline": "MuiInputBase-multiline",
      "readOnly": "Mui-readOnly",
      "root": "MuiInputBase-root",
      "sizeSmall": "MuiInputBase-sizeSmall",
    },
    "inputClasses": {
      "adornedEnd": "MuiInputBase-adornedEnd",
      "adornedStart": "MuiInputBase-adornedStart",
      "colorSecondary": "MuiInputBase-colorSecondary",
      "disabled": "Mui-disabled",
      "error": "Mui-error",
      "focused": "Mui-focused",
      "formControl": "MuiInputBase-formControl",
      "fullWidth": "MuiInputBase-fullWidth",
      "hiddenLabel": "MuiInputBase-hiddenLabel",
      "input": "MuiInput-input",
      "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
      "inputAdornedStart": "MuiInputBase-inputAdornedStart",
      "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
      "inputMultiline": "MuiInputBase-inputMultiline",
      "inputSizeSmall": "MuiInputBase-inputSizeSmall",
      "inputTypeSearch": "MuiInputBase-inputTypeSearch",
      "multiline": "MuiInputBase-multiline",
      "readOnly": "Mui-readOnly",
      "root": "MuiInput-root",
      "sizeSmall": "MuiInputBase-sizeSmall",
      "underline": "MuiInput-underline",
    },
    "inputLabelClasses": {
      "animated": "MuiInputLabel-animated",
      "asterisk": "MuiInputLabel-asterisk",
      "disabled": "Mui-disabled",
      "error": "Mui-error",
      "filled": "MuiInputLabel-filled",
      "focused": "Mui-focused",
      "formControl": "MuiInputLabel-formControl",
      "outlined": "MuiInputLabel-outlined",
      "required": "Mui-required",
      "root": "MuiInputLabel-root",
      "shrink": "MuiInputLabel-shrink",
      "sizeSmall": "MuiInputLabel-sizeSmall",
      "standard": "MuiInputLabel-standard",
    },
    "isMuiElement": [Function],
    "keyframes": [Function],
    "lighten": [Function],
    "linearProgressClasses": {
      "bar": "MuiLinearProgress-bar",
      "bar1Buffer": "MuiLinearProgress-bar1Buffer",
      "bar1Determinate": "MuiLinearProgress-bar1Determinate",
      "bar1Indeterminate": "MuiLinearProgress-bar1Indeterminate",
      "bar2Buffer": "MuiLinearProgress-bar2Buffer",
      "bar2Indeterminate": "MuiLinearProgress-bar2Indeterminate",
      "barColorPrimary": "MuiLinearProgress-barColorPrimary",
      "barColorSecondary": "MuiLinearProgress-barColorSecondary",
      "buffer": "MuiLinearProgress-buffer",
      "colorPrimary": "MuiLinearProgress-colorPrimary",
      "colorSecondary": "MuiLinearProgress-colorSecondary",
      "dashed": "MuiLinearProgress-dashed",
      "dashedColorPrimary": "MuiLinearProgress-dashedColorPrimary",
      "dashedColorSecondary": "MuiLinearProgress-dashedColorSecondary",
      "determinate": "MuiLinearProgress-determinate",
      "indeterminate": "MuiLinearProgress-indeterminate",
      "query": "MuiLinearProgress-query",
      "root": "MuiLinearProgress-root",
    },
    "linkClasses": {
      "button": "MuiLink-button",
      "focusVisible": "Mui-focusVisible",
      "root": "MuiLink-root",
      "underlineAlways": "MuiLink-underlineAlways",
      "underlineHover": "MuiLink-underlineHover",
      "underlineNone": "MuiLink-underlineNone",
    },
    "listClasses": {
      "dense": "MuiList-dense",
      "padding": "MuiList-padding",
      "root": "MuiList-root",
      "subheader": "MuiList-subheader",
    },
    "listItemAvatarClasses": {
      "alignItemsFlexStart": "MuiListItemAvatar-alignItemsFlexStart",
      "root": "MuiListItemAvatar-root",
    },
    "listItemButtonClasses": {
      "alignItemsFlexStart": "MuiListItemButton-alignItemsFlexStart",
      "dense": "MuiListItemButton-dense",
      "disabled": "Mui-disabled",
      "divider": "MuiListItemButton-divider",
      "focusVisible": "Mui-focusVisible",
      "gutters": "MuiListItemButton-gutters",
      "root": "MuiListItemButton-root",
      "selected": "Mui-selected",
    },
    "listItemClasses": {
      "alignItemsFlexStart": "MuiListItem-alignItemsFlexStart",
      "button": "MuiListItem-button",
      "container": "MuiListItem-container",
      "dense": "MuiListItem-dense",
      "disabled": "Mui-disabled",
      "divider": "MuiListItem-divider",
      "focusVisible": "Mui-focusVisible",
      "gutters": "MuiListItem-gutters",
      "padding": "MuiListItem-padding",
      "root": "MuiListItem-root",
      "secondaryAction": "MuiListItem-secondaryAction",
      "selected": "Mui-selected",
    },
    "listItemIconClasses": {
      "alignItemsFlexStart": "MuiListItemIcon-alignItemsFlexStart",
      "root": "MuiListItemIcon-root",
    },
    "listItemSecondaryActionClasses": {
      "disableGutters": "MuiListItemSecondaryAction-disableGutters",
      "root": "MuiListItemSecondaryAction-root",
    },
    "listItemTextClasses": {
      "dense": "MuiListItemText-dense",
      "inset": "MuiListItemText-inset",
      "multiline": "MuiListItemText-multiline",
      "primary": "MuiListItemText-primary",
      "root": "MuiListItemText-root",
      "secondary": "MuiListItemText-secondary",
    },
    "listSubheaderClasses": {
      "colorInherit": "MuiListSubheader-colorInherit",
      "colorPrimary": "MuiListSubheader-colorPrimary",
      "gutters": "MuiListSubheader-gutters",
      "inset": "MuiListSubheader-inset",
      "root": "MuiListSubheader-root",
      "sticky": "MuiListSubheader-sticky",
    },
    "major": 5,
    "makeStyles": [Function],
    "menuClasses": {
      "list": "MuiMenu-list",
      "paper": "MuiMenu-paper",
      "root": "MuiMenu-root",
    },
    "menuItemClasses": {
      "dense": "MuiMenuItem-dense",
      "disabled": "Mui-disabled",
      "divider": "MuiMenuItem-divider",
      "focusVisible": "Mui-focusVisible",
      "gutters": "MuiMenuItem-gutters",
      "root": "MuiMenuItem-root",
      "selected": "Mui-selected",
    },
    "minor": 16,
    "mobileStepperClasses": {
      "dot": "MuiMobileStepper-dot",
      "dotActive": "MuiMobileStepper-dotActive",
      "dots": "MuiMobileStepper-dots",
      "positionBottom": "MuiMobileStepper-positionBottom",
      "positionStatic": "MuiMobileStepper-positionStatic",
      "positionTop": "MuiMobileStepper-positionTop",
      "progress": "MuiMobileStepper-progress",
      "root": "MuiMobileStepper-root",
    },
    "modalClasses": {
      "backdrop": "MuiModal-backdrop",
      "hidden": "MuiModal-hidden",
      "root": "MuiModal-root",
    },
    "nativeSelectClasses": {
      "disabled": "Mui-disabled",
      "error": "Mui-error",
      "filled": "MuiNativeSelect-filled",
      "icon": "MuiNativeSelect-icon",
      "iconFilled": "MuiNativeSelect-iconFilled",
      "iconOpen": "MuiNativeSelect-iconOpen",
      "iconOutlined": "MuiNativeSelect-iconOutlined",
      "iconStandard": "MuiNativeSelect-iconStandard",
      "multiple": "MuiNativeSelect-multiple",
      "nativeInput": "MuiNativeSelect-nativeInput",
      "outlined": "MuiNativeSelect-outlined",
      "root": "MuiNativeSelect-root",
      "select": "MuiNativeSelect-select",
      "standard": "MuiNativeSelect-standard",
    },
    "outlinedInputClasses": {
      "adornedEnd": "MuiInputBase-adornedEnd",
      "adornedStart": "MuiInputBase-adornedStart",
      "colorSecondary": "MuiInputBase-colorSecondary",
      "disabled": "Mui-disabled",
      "error": "Mui-error",
      "focused": "Mui-focused",
      "formControl": "MuiInputBase-formControl",
      "fullWidth": "MuiInputBase-fullWidth",
      "hiddenLabel": "MuiInputBase-hiddenLabel",
      "input": "MuiOutlinedInput-input",
      "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
      "inputAdornedStart": "MuiInputBase-inputAdornedStart",
      "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
      "inputMultiline": "MuiInputBase-inputMultiline",
      "inputSizeSmall": "MuiInputBase-inputSizeSmall",
      "inputTypeSearch": "MuiInputBase-inputTypeSearch",
      "multiline": "MuiInputBase-multiline",
      "notchedOutline": "MuiOutlinedInput-notchedOutline",
      "readOnly": "Mui-readOnly",
      "root": "MuiOutlinedInput-root",
      "sizeSmall": "MuiInputBase-sizeSmall",
    },
    "ownerDocument": [Function],
    "ownerWindow": [Function],
    "paginationClasses": {
      "outlined": "MuiPagination-outlined",
      "root": "MuiPagination-root",
      "text": "MuiPagination-text",
      "ul": "MuiPagination-ul",
    },
    "paginationItemClasses": {
      "colorPrimary": "MuiPaginationItem-colorPrimary",
      "colorSecondary": "MuiPaginationItem-colorSecondary",
      "disabled": "Mui-disabled",
      "ellipsis": "MuiPaginationItem-ellipsis",
      "firstLast": "MuiPaginationItem-firstLast",
      "focusVisible": "Mui-focusVisible",
      "icon": "MuiPaginationItem-icon",
      "outlined": "MuiPaginationItem-outlined",
      "outlinedPrimary": "MuiPaginationItem-outlinedPrimary",
      "outlinedSecondary": "MuiPaginationItem-outlinedSecondary",
      "page": "MuiPaginationItem-page",
      "previousNext": "MuiPaginationItem-previousNext",
      "root": "MuiPaginationItem-root",
      "rounded": "MuiPaginationItem-rounded",
      "selected": "Mui-selected",
      "sizeLarge": "MuiPaginationItem-sizeLarge",
      "sizeSmall": "MuiPaginationItem-sizeSmall",
      "text": "MuiPaginationItem-text",
      "textPrimary": "MuiPaginationItem-textPrimary",
      "textSecondary": "MuiPaginationItem-textSecondary",
    },
    "paperClasses": {
      "elevation": "MuiPaper-elevation",
      "elevation0": "MuiPaper-elevation0",
      "elevation1": "MuiPaper-elevation1",
      "elevation10": "MuiPaper-elevation10",
      "elevation11": "MuiPaper-elevation11",
      "elevation12": "MuiPaper-elevation12",
      "elevation13": "MuiPaper-elevation13",
      "elevation14": "MuiPaper-elevation14",
      "elevation15": "MuiPaper-elevation15",
      "elevation16": "MuiPaper-elevation16",
      "elevation17": "MuiPaper-elevation17",
      "elevation18": "MuiPaper-elevation18",
      "elevation19": "MuiPaper-elevation19",
      "elevation2": "MuiPaper-elevation2",
      "elevation20": "MuiPaper-elevation20",
      "elevation21": "MuiPaper-elevation21",
      "elevation22": "MuiPaper-elevation22",
      "elevation23": "MuiPaper-elevation23",
      "elevation24": "MuiPaper-elevation24",
      "elevation3": "MuiPaper-elevation3",
      "elevation4": "MuiPaper-elevation4",
      "elevation5": "MuiPaper-elevation5",
      "elevation6": "MuiPaper-elevation6",
      "elevation7": "MuiPaper-elevation7",
      "elevation8": "MuiPaper-elevation8",
      "elevation9": "MuiPaper-elevation9",
      "outlined": "MuiPaper-outlined",
      "root": "MuiPaper-root",
      "rounded": "MuiPaper-rounded",
    },
    "patch": 7,
    "popoverClasses": {
      "paper": "MuiPopover-paper",
      "root": "MuiPopover-root",
    },
    "preReleaseLabel": null,
    "preReleaseNumber": null,
    "private_createMixins": [Function],
    "private_createTypography": [Function],
    "private_excludeVariablesFromRoot": [Function],
    "radioClasses": {
      "checked": "Mui-checked",
      "colorPrimary": "MuiRadio-colorPrimary",
      "colorSecondary": "MuiRadio-colorSecondary",
      "disabled": "Mui-disabled",
      "root": "MuiRadio-root",
      "sizeSmall": "MuiRadio-sizeSmall",
    },
    "radioGroupClasses": {
      "error": "Mui-error",
      "root": "MuiRadioGroup-root",
      "row": "MuiRadioGroup-row",
    },
    "ratingClasses": {
      "decimal": "MuiRating-decimal",
      "disabled": "Mui-disabled",
      "focusVisible": "Mui-focusVisible",
      "icon": "MuiRating-icon",
      "iconActive": "MuiRating-iconActive",
      "iconEmpty": "MuiRating-iconEmpty",
      "iconFilled": "MuiRating-iconFilled",
      "iconFocus": "MuiRating-iconFocus",
      "iconHover": "MuiRating-iconHover",
      "label": "MuiRating-label",
      "labelEmptyValueActive": "MuiRating-labelEmptyValueActive",
      "pristine": "MuiRating-pristine",
      "readOnly": "Mui-readOnly",
      "root": "MuiRating-root",
      "sizeLarge": "MuiRating-sizeLarge",
      "sizeMedium": "MuiRating-sizeMedium",
      "sizeSmall": "MuiRating-sizeSmall",
      "visuallyHidden": "MuiRating-visuallyHidden",
    },
    "recomposeColor": [Function],
    "requirePropFactory": [Function],
    "responsiveFontSizes": [Function],
    "rgbToHex": [Function],
    "scopedCssBaselineClasses": {
      "root": "MuiScopedCssBaseline-root",
    },
    "selectClasses": {
      "disabled": "Mui-disabled",
      "error": "Mui-error",
      "filled": "MuiSelect-filled",
      "focused": "Mui-focused",
      "icon": "MuiSelect-icon",
      "iconFilled": "MuiSelect-iconFilled",
      "iconOpen": "MuiSelect-iconOpen",
      "iconOutlined": "MuiSelect-iconOutlined",
      "iconStandard": "MuiSelect-iconStandard",
      "multiple": "MuiSelect-multiple",
      "nativeInput": "MuiSelect-nativeInput",
      "outlined": "MuiSelect-outlined",
      "root": "MuiSelect-root",
      "select": "MuiSelect-select",
      "standard": "MuiSelect-standard",
    },
    "setRef": [Function],
    "shouldSkipGeneratingVar": [Function],
    "skeletonClasses": {
      "circular": "MuiSkeleton-circular",
      "fitContent": "MuiSkeleton-fitContent",
      "heightAuto": "MuiSkeleton-heightAuto",
      "pulse": "MuiSkeleton-pulse",
      "rectangular": "MuiSkeleton-rectangular",
      "root": "MuiSkeleton-root",
      "rounded": "MuiSkeleton-rounded",
      "text": "MuiSkeleton-text",
      "wave": "MuiSkeleton-wave",
      "withChildren": "MuiSkeleton-withChildren",
    },
    "sliderClasses": {
      "active": "Mui-active",
      "colorError": "MuiSlider-colorError",
      "colorInfo": "MuiSlider-colorInfo",
      "colorPrimary": "MuiSlider-colorPrimary",
      "colorSecondary": "MuiSlider-colorSecondary",
      "colorSuccess": "MuiSlider-colorSuccess",
      "colorWarning": "MuiSlider-colorWarning",
      "disabled": "Mui-disabled",
      "dragging": "MuiSlider-dragging",
      "focusVisible": "Mui-focusVisible",
      "mark": "MuiSlider-mark",
      "markActive": "MuiSlider-markActive",
      "markLabel": "MuiSlider-markLabel",
      "markLabelActive": "MuiSlider-markLabelActive",
      "marked": "MuiSlider-marked",
      "rail": "MuiSlider-rail",
      "root": "MuiSlider-root",
      "sizeSmall": "MuiSlider-sizeSmall",
      "thumb": "MuiSlider-thumb",
      "thumbColorError": "MuiSlider-thumbColorError",
      "thumbColorInfo": "MuiSlider-thumbColorInfo",
      "thumbColorPrimary": "MuiSlider-thumbColorPrimary",
      "thumbColorSecondary": "MuiSlider-thumbColorSecondary",
      "thumbColorSuccess": "MuiSlider-thumbColorSuccess",
      "thumbColorWarning": "MuiSlider-thumbColorWarning",
      "thumbSizeSmall": "MuiSlider-thumbSizeSmall",
      "track": "MuiSlider-track",
      "trackFalse": "MuiSlider-trackFalse",
      "trackInverted": "MuiSlider-trackInverted",
      "valueLabel": "MuiSlider-valueLabel",
      "valueLabelCircle": "MuiSlider-valueLabelCircle",
      "valueLabelLabel": "MuiSlider-valueLabelLabel",
      "valueLabelOpen": "MuiSlider-valueLabelOpen",
      "vertical": "MuiSlider-vertical",
    },
    "snackbarClasses": {
      "anchorOriginBottomCenter": "MuiSnackbar-anchorOriginBottomCenter",
      "anchorOriginBottomLeft": "MuiSnackbar-anchorOriginBottomLeft",
      "anchorOriginBottomRight": "MuiSnackbar-anchorOriginBottomRight",
      "anchorOriginTopCenter": "MuiSnackbar-anchorOriginTopCenter",
      "anchorOriginTopLeft": "MuiSnackbar-anchorOriginTopLeft",
      "anchorOriginTopRight": "MuiSnackbar-anchorOriginTopRight",
      "root": "MuiSnackbar-root",
    },
    "snackbarContentClasses": {
      "action": "MuiSnackbarContent-action",
      "message": "MuiSnackbarContent-message",
      "root": "MuiSnackbarContent-root",
    },
    "speedDialActionClasses": {
      "fab": "MuiSpeedDialAction-fab",
      "fabClosed": "MuiSpeedDialAction-fabClosed",
      "staticTooltip": "MuiSpeedDialAction-staticTooltip",
      "staticTooltipClosed": "MuiSpeedDialAction-staticTooltipClosed",
      "staticTooltipLabel": "MuiSpeedDialAction-staticTooltipLabel",
      "tooltipPlacementLeft": "MuiSpeedDialAction-tooltipPlacementLeft",
      "tooltipPlacementRight": "MuiSpeedDialAction-tooltipPlacementRight",
    },
    "speedDialClasses": {
      "actions": "MuiSpeedDial-actions",
      "actionsClosed": "MuiSpeedDial-actionsClosed",
      "directionDown": "MuiSpeedDial-directionDown",
      "directionLeft": "MuiSpeedDial-directionLeft",
      "directionRight": "MuiSpeedDial-directionRight",
      "directionUp": "MuiSpeedDial-directionUp",
      "fab": "MuiSpeedDial-fab",
      "root": "MuiSpeedDial-root",
    },
    "speedDialIconClasses": {
      "icon": "MuiSpeedDialIcon-icon",
      "iconOpen": "MuiSpeedDialIcon-iconOpen",
      "iconWithOpenIconOpen": "MuiSpeedDialIcon-iconWithOpenIconOpen",
      "openIcon": "MuiSpeedDialIcon-openIcon",
      "openIconOpen": "MuiSpeedDialIcon-openIconOpen",
      "root": "MuiSpeedDialIcon-root",
    },
    "stackClasses": {
      "root": "MuiStack-root",
    },
    "stepButtonClasses": {
      "horizontal": "MuiStepButton-horizontal",
      "root": "MuiStepButton-root",
      "touchRipple": "MuiStepButton-touchRipple",
      "vertical": "MuiStepButton-vertical",
    },
    "stepClasses": {
      "alternativeLabel": "MuiStep-alternativeLabel",
      "completed": "Mui-completed",
      "horizontal": "MuiStep-horizontal",
      "root": "MuiStep-root",
      "vertical": "MuiStep-vertical",
    },
    "stepConnectorClasses": {
      "active": "Mui-active",
      "alternativeLabel": "MuiStepConnector-alternativeLabel",
      "completed": "Mui-completed",
      "disabled": "Mui-disabled",
      "horizontal": "MuiStepConnector-horizontal",
      "line": "MuiStepConnector-line",
      "lineHorizontal": "MuiStepConnector-lineHorizontal",
      "lineVertical": "MuiStepConnector-lineVertical",
      "root": "MuiStepConnector-root",
      "vertical": "MuiStepConnector-vertical",
    },
    "stepContentClasses": {
      "last": "MuiStepContent-last",
      "root": "MuiStepContent-root",
      "transition": "MuiStepContent-transition",
    },
    "stepIconClasses": {
      "active": "Mui-active",
      "completed": "Mui-completed",
      "error": "Mui-error",
      "root": "MuiStepIcon-root",
      "text": "MuiStepIcon-text",
    },
    "stepLabelClasses": {
      "active": "Mui-active",
      "alternativeLabel": "MuiStepLabel-alternativeLabel",
      "completed": "Mui-completed",
      "disabled": "Mui-disabled",
      "error": "Mui-error",
      "horizontal": "MuiStepLabel-horizontal",
      "iconContainer": "MuiStepLabel-iconContainer",
      "label": "MuiStepLabel-label",
      "labelContainer": "MuiStepLabel-labelContainer",
      "root": "MuiStepLabel-root",
      "vertical": "MuiStepLabel-vertical",
    },
    "stepperClasses": {
      "alternativeLabel": "MuiStepper-alternativeLabel",
      "horizontal": "MuiStepper-horizontal",
      "nonLinear": "MuiStepper-nonLinear",
      "root": "MuiStepper-root",
      "vertical": "MuiStepper-vertical",
    },
    "styled": [Function],
    "styles": {
      "Experimental_CssVarsProvider": [Function],
      "StyledEngineProvider": [Function],
      "THEME_ID": "$$material",
      "ThemeProvider": [Function],
      "adaptV4Theme": [Function],
      "alpha": [Function],
      "createMuiTheme": [Function],
      "createStyles": [Function],
      "createTheme": [Function],
      "css": [Function],
      "darken": [Function],
      "decomposeColor": [Function],
      "duration": {
        "complex": 375,
        "enteringScreen": 225,
        "leavingScreen": 195,
        "short": 250,
        "shorter": 200,
        "shortest": 150,
        "standard": 300,
      },
      "easing": {
        "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
        "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
        "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
        "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
      },
      "emphasize": [Function],
      "experimentalStyled": [Function],
      "experimental_extendTheme": [Function],
      "experimental_sx": [Function],
      "getContrastRatio": [Function],
      "getInitColorSchemeScript": [Function],
      "getLuminance": [Function],
      "getOverlayAlpha": [Function],
      "hexToRgb": [Function],
      "hslToRgb": [Function],
      "keyframes": [Function],
      "lighten": [Function],
      "makeStyles": [Function],
      "private_createMixins": [Function],
      "private_createTypography": [Function],
      "private_excludeVariablesFromRoot": [Function],
      "recomposeColor": [Function],
      "responsiveFontSizes": [Function],
      "rgbToHex": [Function],
      "shouldSkipGeneratingVar": [Function],
      "styled": [Function],
      "unstable_createMuiStrictModeTheme": [Function],
      "unstable_getUnit": [Function],
      "unstable_toUnitless": [Function],
      "useColorScheme": [Function],
      "useTheme": [Function],
      "useThemeProps": [Function],
      "withStyles": [Function],
      "withTheme": [Function],
    },
    "svgIconClasses": {
      "colorAction": "MuiSvgIcon-colorAction",
      "colorDisabled": "MuiSvgIcon-colorDisabled",
      "colorError": "MuiSvgIcon-colorError",
      "colorPrimary": "MuiSvgIcon-colorPrimary",
      "colorSecondary": "MuiSvgIcon-colorSecondary",
      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
      "fontSizeMedium": "MuiSvgIcon-fontSizeMedium",
      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
      "root": "MuiSvgIcon-root",
    },
    "switchClasses": {
      "checked": "Mui-checked",
      "colorPrimary": "MuiSwitch-colorPrimary",
      "colorSecondary": "MuiSwitch-colorSecondary",
      "disabled": "Mui-disabled",
      "edgeEnd": "MuiSwitch-edgeEnd",
      "edgeStart": "MuiSwitch-edgeStart",
      "input": "MuiSwitch-input",
      "root": "MuiSwitch-root",
      "sizeMedium": "MuiSwitch-sizeMedium",
      "sizeSmall": "MuiSwitch-sizeSmall",
      "switchBase": "MuiSwitch-switchBase",
      "thumb": "MuiSwitch-thumb",
      "track": "MuiSwitch-track",
    },
    "tabClasses": {
      "disabled": "Mui-disabled",
      "fullWidth": "MuiTab-fullWidth",
      "iconWrapper": "MuiTab-iconWrapper",
      "labelIcon": "MuiTab-labelIcon",
      "root": "MuiTab-root",
      "selected": "Mui-selected",
      "textColorInherit": "MuiTab-textColorInherit",
      "textColorPrimary": "MuiTab-textColorPrimary",
      "textColorSecondary": "MuiTab-textColorSecondary",
      "wrapped": "MuiTab-wrapped",
    },
    "tabScrollButtonClasses": {
      "disabled": "Mui-disabled",
      "horizontal": "MuiTabScrollButton-horizontal",
      "root": "MuiTabScrollButton-root",
      "vertical": "MuiTabScrollButton-vertical",
    },
    "tableBodyClasses": {
      "root": "MuiTableBody-root",
    },
    "tableCellClasses": {
      "alignCenter": "MuiTableCell-alignCenter",
      "alignJustify": "MuiTableCell-alignJustify",
      "alignLeft": "MuiTableCell-alignLeft",
      "alignRight": "MuiTableCell-alignRight",
      "body": "MuiTableCell-body",
      "footer": "MuiTableCell-footer",
      "head": "MuiTableCell-head",
      "paddingCheckbox": "MuiTableCell-paddingCheckbox",
      "paddingNone": "MuiTableCell-paddingNone",
      "root": "MuiTableCell-root",
      "sizeMedium": "MuiTableCell-sizeMedium",
      "sizeSmall": "MuiTableCell-sizeSmall",
      "stickyHeader": "MuiTableCell-stickyHeader",
    },
    "tableClasses": {
      "root": "MuiTable-root",
      "stickyHeader": "MuiTable-stickyHeader",
    },
    "tableContainerClasses": {
      "root": "MuiTableContainer-root",
    },
    "tableFooterClasses": {
      "root": "MuiTableFooter-root",
    },
    "tableHeadClasses": {
      "root": "MuiTableHead-root",
    },
    "tablePaginationClasses": {
      "actions": "MuiTablePagination-actions",
      "displayedRows": "MuiTablePagination-displayedRows",
      "input": "MuiTablePagination-input",
      "menuItem": "MuiTablePagination-menuItem",
      "root": "MuiTablePagination-root",
      "select": "MuiTablePagination-select",
      "selectIcon": "MuiTablePagination-selectIcon",
      "selectLabel": "MuiTablePagination-selectLabel",
      "selectRoot": "MuiTablePagination-selectRoot",
      "spacer": "MuiTablePagination-spacer",
      "toolbar": "MuiTablePagination-toolbar",
    },
    "tableRowClasses": {
      "footer": "MuiTableRow-footer",
      "head": "MuiTableRow-head",
      "hover": "MuiTableRow-hover",
      "root": "MuiTableRow-root",
      "selected": "Mui-selected",
    },
    "tableSortLabelClasses": {
      "active": "Mui-active",
      "icon": "MuiTableSortLabel-icon",
      "iconDirectionAsc": "MuiTableSortLabel-iconDirectionAsc",
      "iconDirectionDesc": "MuiTableSortLabel-iconDirectionDesc",
      "root": "MuiTableSortLabel-root",
    },
    "tabsClasses": {
      "centered": "MuiTabs-centered",
      "fixed": "MuiTabs-fixed",
      "flexContainer": "MuiTabs-flexContainer",
      "flexContainerVertical": "MuiTabs-flexContainerVertical",
      "hideScrollbar": "MuiTabs-hideScrollbar",
      "indicator": "MuiTabs-indicator",
      "root": "MuiTabs-root",
      "scrollButtons": "MuiTabs-scrollButtons",
      "scrollButtonsHideMobile": "MuiTabs-scrollButtonsHideMobile",
      "scrollableX": "MuiTabs-scrollableX",
      "scrollableY": "MuiTabs-scrollableY",
      "scroller": "MuiTabs-scroller",
      "vertical": "MuiTabs-vertical",
    },
    "textFieldClasses": {
      "root": "MuiTextField-root",
    },
    "toggleButtonClasses": {
      "disabled": "Mui-disabled",
      "fullWidth": "MuiToggleButton-fullWidth",
      "primary": "MuiToggleButton-primary",
      "root": "MuiToggleButton-root",
      "secondary": "MuiToggleButton-secondary",
      "selected": "Mui-selected",
      "sizeLarge": "MuiToggleButton-sizeLarge",
      "sizeMedium": "MuiToggleButton-sizeMedium",
      "sizeSmall": "MuiToggleButton-sizeSmall",
      "standard": "MuiToggleButton-standard",
    },
    "toggleButtonGroupClasses": {
      "disabled": "Mui-disabled",
      "firstButton": "MuiToggleButtonGroup-firstButton",
      "fullWidth": "MuiToggleButtonGroup-fullWidth",
      "grouped": "MuiToggleButtonGroup-grouped",
      "groupedHorizontal": "MuiToggleButtonGroup-groupedHorizontal",
      "groupedVertical": "MuiToggleButtonGroup-groupedVertical",
      "horizontal": "MuiToggleButtonGroup-horizontal",
      "lastButton": "MuiToggleButtonGroup-lastButton",
      "middleButton": "MuiToggleButtonGroup-middleButton",
      "root": "MuiToggleButtonGroup-root",
      "selected": "Mui-selected",
      "vertical": "MuiToggleButtonGroup-vertical",
    },
    "toolbarClasses": {
      "dense": "MuiToolbar-dense",
      "gutters": "MuiToolbar-gutters",
      "regular": "MuiToolbar-regular",
      "root": "MuiToolbar-root",
    },
    "tooltipClasses": {
      "arrow": "MuiTooltip-arrow",
      "popper": "MuiTooltip-popper",
      "popperArrow": "MuiTooltip-popperArrow",
      "popperClose": "MuiTooltip-popperClose",
      "popperInteractive": "MuiTooltip-popperInteractive",
      "tooltip": "MuiTooltip-tooltip",
      "tooltipArrow": "MuiTooltip-tooltipArrow",
      "tooltipPlacementBottom": "MuiTooltip-tooltipPlacementBottom",
      "tooltipPlacementLeft": "MuiTooltip-tooltipPlacementLeft",
      "tooltipPlacementRight": "MuiTooltip-tooltipPlacementRight",
      "tooltipPlacementTop": "MuiTooltip-tooltipPlacementTop",
      "touch": "MuiTooltip-touch",
    },
    "touchRippleClasses": {
      "child": "MuiTouchRipple-child",
      "childLeaving": "MuiTouchRipple-childLeaving",
      "childPulsate": "MuiTouchRipple-childPulsate",
      "ripple": "MuiTouchRipple-ripple",
      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
      "rippleVisible": "MuiTouchRipple-rippleVisible",
      "root": "MuiTouchRipple-root",
    },
    "typographyClasses": {
      "alignCenter": "MuiTypography-alignCenter",
      "alignJustify": "MuiTypography-alignJustify",
      "alignLeft": "MuiTypography-alignLeft",
      "alignRight": "MuiTypography-alignRight",
      "body1": "MuiTypography-body1",
      "body2": "MuiTypography-body2",
      "button": "MuiTypography-button",
      "caption": "MuiTypography-caption",
      "gutterBottom": "MuiTypography-gutterBottom",
      "h1": "MuiTypography-h1",
      "h2": "MuiTypography-h2",
      "h3": "MuiTypography-h3",
      "h4": "MuiTypography-h4",
      "h5": "MuiTypography-h5",
      "h6": "MuiTypography-h6",
      "inherit": "MuiTypography-inherit",
      "noWrap": "MuiTypography-noWrap",
      "overline": "MuiTypography-overline",
      "paragraph": "MuiTypography-paragraph",
      "root": "MuiTypography-root",
      "subtitle1": "MuiTypography-subtitle1",
      "subtitle2": "MuiTypography-subtitle2",
    },
    "unstable_ClassNameGenerator": {
      "configure": [Function],
    },
    "unstable_composeClasses": [Function],
    "unstable_createMuiStrictModeTheme": [Function],
    "unstable_getUnit": [Function],
    "unstable_toUnitless": [Function],
    "unstable_useEnhancedEffect": [Function],
    "unstable_useId": [Function],
    "unsupportedProp": [Function],
    "useAutocomplete": [Function],
    "useColorScheme": [Function],
    "useControlled": [Function],
    "useEventCallback": [Function],
    "useForkRef": [Function],
    "useFormControl": [Function],
    "useIsFocusVisible": [Function],
    "useMediaQuery": [Function],
    "usePagination": [Function],
    "useRadioGroup": [Function],
    "useScrollTrigger": [Function],
    "useStepContext": [Function],
    "useStepperContext": [Function],
    "useTheme": [Function],
    "useThemeProps": [Function],
    "version": "5.16.7",
    "withStyles": [Function],
    "withTheme": [Function],
  },
  "MuiStyles": {
    "makeStyles": [Function],
  },
  "Notification": {
    "setNotificationsInStore": [Function],
  },
  "Notistack": {
    "MaterialDesignContent": {
      "$$typeof": Symbol(react.memo),
      "compare": null,
      "type": {
        "$$typeof": Symbol(react.forward_ref),
        "render": [Function],
      },
    },
    "SnackbarContent": {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
    "SnackbarProvider": [Function],
    "Transition": [Function],
    "useSnackbar": [Function],
  },
  "Plugin": [Function],
  "PluginManager": [Function],
  "React": {
    "Children": {
      "count": [Function],
      "forEach": [Function],
      "map": [Function],
      "only": [Function],
      "toArray": [Function],
    },
    "Component": [Function],
    "Fragment": Symbol(react.fragment),
    "Profiler": Symbol(react.profiler),
    "PureComponent": [Function],
    "StrictMode": Symbol(react.strict_mode),
    "Suspense": Symbol(react.suspense),
    "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": {
      "ReactCurrentActQueue": {
        "current": null,
        "didScheduleLegacyUpdate": false,
        "isBatchingLegacy": false,
      },
      "ReactCurrentBatchConfig": {
        "transition": null,
      },
      "ReactCurrentDispatcher": {
        "current": null,
      },
      "ReactCurrentOwner": {
        "current": null,
      },
      "ReactDebugCurrentFrame": {
        "getCurrentStack": null,
        "getStackAddendum": [Function],
        "setExtraStackFrame": [Function],
      },
    },
    "act": [Function],
    "cloneElement": [Function],
    "createContext": [Function],
    "createElement": [Function],
    "createFactory": [Function],
    "createRef": [Function],
    "default": {
      "Children": {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "Profiler": Symbol(react.profiler),
      "PureComponent": [Function],
      "StrictMode": Symbol(react.strict_mode),
      "Suspense": Symbol(react.suspense),
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": {
        "ReactCurrentActQueue": {
          "current": null,
          "didScheduleLegacyUpdate": false,
          "isBatchingLegacy": false,
        },
        "ReactCurrentBatchConfig": {
          "transition": null,
        },
        "ReactCurrentDispatcher": {
          "current": null,
        },
        "ReactCurrentOwner": {
          "current": null,
        },
        "ReactDebugCurrentFrame": {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
          "setExtraStackFrame": [Function],
        },
      },
      "act": [Function],
      "cloneElement": [Function],
      "createContext": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "createRef": [Function],
      "forwardRef": [Function],
      "isValidElement": [Function],
      "lazy": [Function],
      "memo": [Function],
      "startTransition": [Function],
      "unstable_act": [Function],
      "useCallback": [Function],
      "useContext": [Function],
      "useDebugValue": [Function],
      "useDeferredValue": [Function],
      "useEffect": [Function],
      "useId": [Function],
      "useImperativeHandle": [Function],
      "useInsertionEffect": [Function],
      "useLayoutEffect": [Function],
      "useMemo": [Function],
      "useReducer": [Function],
      "useRef": [Function],
      "useState": [Function],
      "useSyncExternalStore": [Function],
      "useTransition": [Function],
      "version": "18.3.1",
    },
    "forwardRef": [Function],
    "isValidElement": [Function],
    "lazy": [Function],
    "memo": [Function],
    "startTransition": [Function],
    "unstable_act": [Function],
    "useCallback": [Function],
    "useContext": [Function],
    "useDebugValue": [Function],
    "useDeferredValue": [Function],
    "useEffect": [Function],
    "useId": [Function],
    "useImperativeHandle": [Function],
    "useInsertionEffect": [Function],
    "useLayoutEffect": [Function],
    "useMemo": [Function],
    "useReducer": [Function],
    "useRef": [Function],
    "useState": [Function],
    "useSyncExternalStore": [Function],
    "useTransition": [Function],
    "version": "18.3.1",
  },
  "ReactDOM": {
    "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": {
      "Events": [
        [Function],
        [Function],
        [Function],
        [Function],
        [Function],
        [Function],
      ],
      "usingClientEntryPoint": false,
    },
    "createPortal": [Function],
    "createRoot": [Function],
    "default": {
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": {
        "Events": [
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
        ],
        "usingClientEntryPoint": false,
      },
      "createPortal": [Function],
      "createRoot": [Function],
      "findDOMNode": [Function],
      "flushSync": [Function],
      "hydrate": [Function],
      "hydrateRoot": [Function],
      "render": [Function],
      "unmountComponentAtNode": [Function],
      "unstable_batchedUpdates": [Function],
      "unstable_renderSubtreeIntoContainer": [Function],
      "version": "18.3.1",
    },
    "findDOMNode": [Function],
    "flushSync": [Function],
    "hydrate": [Function],
    "hydrateRoot": [Function],
    "render": [Function],
    "unmountComponentAtNode": [Function],
    "unstable_batchedUpdates": [Function],
    "unstable_renderSubtreeIntoContainer": [Function],
    "version": "18.3.1",
  },
  "ReactJSX": {
    "Fragment": Symbol(react.fragment),
    "default": {
      "Fragment": Symbol(react.fragment),
      "jsx": [Function],
      "jsxs": [Function],
    },
    "jsx": [Function],
    "jsxs": [Function],
  },
  "ReactMonacoEditor": {
    "DiffEditor": {
      "$$typeof": Symbol(react.memo),
      "compare": null,
      "type": [Function],
    },
    "Editor": {
      "$$typeof": Symbol(react.memo),
      "compare": null,
      "type": [Function],
    },
    "__esModule": true,
    "default": {
      "$$typeof": Symbol(react.memo),
      "compare": null,
      "type": [Function],
    },
    "loader": {
      "__getMonacoInstance": [Function],
      "config": [Function],
      "init": [Function],
    },
    "useMonaco": [Function],
  },
  "ReactRedux": {
    "Provider": [Function],
    "ReactReduxContext": {
      "$$typeof": Symbol(react.context),
      "Consumer": {
        "$$typeof": Symbol(react.context),
        "_context": [Circular],
      },
      "Provider": {
        "$$typeof": Symbol(react.provider),
        "_context": [Circular],
      },
      "_currentRenderer": null,
      "_currentRenderer2": null,
      "_currentValue": null,
      "_currentValue2": null,
      "_defaultValue": null,
      "_globalName": null,
      "_threadCount": 0,
      "displayName": "ReactRedux",
    },
    "batch": [Function],
    "connect": [Function],
    "createDispatchHook": [Function],
    "createSelectorHook": [Function],
    "createStoreHook": [Function],
    "shallowEqual": [Function],
    "useDispatch": [Function],
    "useSelector": [Function],
    "useStore": [Function],
  },
  "ReactRouter": {
    "BrowserRouter": [Function],
    "HashRouter": [Function],
    "Link": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "innerRef": [Function],
        "onClick": [Function],
        "replace": [Function],
        "target": [Function],
        "to": [Function],
      },
      "render": [Function],
    },
    "MemoryRouter": [Function],
    "NavLink": {
      "$$typeof": Symbol(react.forward_ref),
      "propTypes": {
        "activeClassName": [Function],
        "activeStyle": [Function],
        "aria-current": [Function],
        "className": [Function],
        "exact": [Function],
        "innerRef": [Function],
        "isActive": [Function],
        "location": [Function],
        "onClick": [Function],
        "replace": [Function],
        "sensitive": [Function],
        "strict": [Function],
        "style": [Function],
        "target": [Function],
        "to": [Function],
      },
      "render": [Function],
    },
    "Prompt": [Function],
    "Redirect": [Function],
    "Route": [Function],
    "Router": [Function],
    "StaticRouter": [Function],
    "Switch": [Function],
    "default": {
      "BrowserRouter": [Function],
      "HashRouter": [Function],
      "Link": {
        "$$typeof": Symbol(react.forward_ref),
        "propTypes": {
          "innerRef": [Function],
          "onClick": [Function],
          "replace": [Function],
          "target": [Function],
          "to": [Function],
        },
        "render": [Function],
      },
      "MemoryRouter": [Function],
      "NavLink": {
        "$$typeof": Symbol(react.forward_ref),
        "propTypes": {
          "activeClassName": [Function],
          "activeStyle": [Function],
          "aria-current": [Function],
          "className": [Function],
          "exact": [Function],
          "innerRef": [Function],
          "isActive": [Function],
          "location": [Function],
          "onClick": [Function],
          "replace": [Function],
          "sensitive": [Function],
          "strict": [Function],
          "style": [Function],
          "target": [Function],
          "to": [Function],
        },
        "render": [Function],
      },
      "Prompt": [Function],
      "Redirect": [Function],
      "Route": [Function],
      "Router": [Function],
      "StaticRouter": [Function],
      "Switch": [Function],
      "generatePath": [Function],
      "matchPath": [Function],
      "useHistory": [Function],
      "useLocation": [Function],
      "useParams": [Function],
      "useRouteMatch": [Function],
      "withRouter": [Function],
    },
    "generatePath": [Function],
    "matchPath": [Function],
    "useHistory": [Function],
    "useLocation": [Function],
    "useParams": [Function],
    "useRouteMatch": [Function],
    "withRouter": [Function],
  },
  "Recharts": {
    "Area": [Function],
    "AreaChart": [Function],
    "Bar": [Function],
    "BarChart": [Function],
    "Brush": [Function],
    "CartesianAxis": [Function],
    "CartesianGrid": [Function],
    "Cell": [Function],
    "ComposedChart": [Function],
    "Cross": [Function],
    "Curve": [Function],
    "Customized": [Function],
    "DefaultLegendContent": [Function],
    "DefaultTooltipContent": [Function],
    "Dot": [Function],
    "ErrorBar": [Function],
    "Funnel": [Function],
    "FunnelChart": [Function],
    "Global": {
      "get": [Function],
      "isSsr": false,
      "set": [Function],
    },
    "Label": [Function],
    "LabelList": [Function],
    "Layer": {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
    "Legend": [Function],
    "Line": [Function],
    "LineChart": [Function],
    "Pie": [Function],
    "PieChart": [Function],
    "PolarAngleAxis": [Function],
    "PolarGrid": [Function],
    "PolarRadiusAxis": [Function],
    "Polygon": [Function],
    "Radar": [Function],
    "RadarChart": [Function],
    "RadialBar": [Function],
    "RadialBarChart": [Function],
    "Rectangle": [Function],
    "ReferenceArea": [Function],
    "ReferenceDot": [Function],
    "ReferenceLine": [Function],
    "ResponsiveContainer": {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
    "Sankey": [Function],
    "Scatter": [Function],
    "ScatterChart": [Function],
    "Sector": [Function],
    "SunburstChart": [Function],
    "Surface": [Function],
    "Symbols": [Function],
    "Text": [Function],
    "Tooltip": [Function],
    "Trapezoid": [Function],
    "Treemap": [Function],
    "XAxis": [Function],
    "YAxis": [Function],
    "ZAxis": [Function],
  },
  "Router": {
    "NotFoundRoute": {
      "component": [Function],
      "exact": true,
      "name": "Whoops! This page doesn't exist",
      "noAuthRequired": true,
      "path": "*",
      "sidebar": null,
    },
    "createRouteURL": [Function],
    "getDefaultRoutes": [Function],
    "getRoute": [Function],
    "getRoutePath": [Function],
    "getRouteUseClusterURL": [Function],
  },
  "Utils": {
    "CLUSTER_ACTION_GRACE_PERIOD": 5000,
    "auth": {
      "deleteTokens": [Function],
      "getToken": [Function],
      "getUserInfo": [Function],
      "hasToken": [Function],
      "logout": [Function],
      "setToken": [Function],
    },
    "combineClusterListErrors": [Function],
    "compareUnits": [Function],
    "filterGeneric": [Function],
    "filterResource": [Function],
    "flattenClusterListItems": [Function],
    "formatDuration": [Function],
    "getCluster": [Function],
    "getClusterGroup": [Function],
    "getClusterPrefixedPath": [Function],
    "getPercentStr": [Function],
    "getReadyReplicas": [Function],
    "getResourceMetrics": [Function],
    "getResourceStr": [Function],
    "getTotalReplicas": [Function],
    "localeDate": [Function],
    "normalizeUnit": [Function],
    "timeAgo": [Function],
    "units": {
      "TO_GB": 1073741824,
      "TO_ONE_CPU": 1000000000,
      "TO_ONE_M_CPU": 1000000,
      "parseCpu": [Function],
      "parseDiskSpace": [Function],
      "parseRam": [Function],
      "unparseCpu": [Function],
      "unparseRam": [Function],
    },
    "useErrorState": [Function],
    "useFilterFunc": [Function],
    "useId": [Function],
    "useURLState": [Function],
  },
  "default": [Function],
  "getHeadlampAPIHeaders": [Function],
  "registerAppBarAction": [Function],
  "registerAppLogo": [Function],
  "registerClusterChooser": [Function],
  "registerDetailsViewHeaderAction": [Function],
  "registerDetailsViewHeaderActionsProcessor": [Function],
  "registerDetailsViewSection": [Function],
  "registerDetailsViewSectionsProcessor": [Function],
  "registerGetTokenFunction": [Function],
  "registerHeadlampEventCallback": [Function],
  "registerPluginSettings": [Function],
  "registerResourceTableColumnsProcessor": [Function],
  "registerRoute": [Function],
  "registerRouteFilter": [Function],
  "registerSetTokenFunction": [Function],
  "registerSidebarEntry": [Function],
  "registerSidebarEntryFilter": [Function],
  "runCommand": [Function],
}