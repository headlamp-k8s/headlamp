name: Backend test

on:
  pull_request:
    paths:
      - 'backend/**'

permissions:
  contents: read

env:
  HEADLAMP_RUN_INTEGRATION_TESTS: true

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      issues: write # needed for commenting on PRs for coverage changes
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@17d0e2bd7d51742c71671bd19fa12bdc9d40a3d6 # v2.8.1
        with:
          egress-policy: audit

      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 0
    
      - uses: actions/setup-go@cdcb36043654635271a94b9a6d1392de5bb323a7 # v5.0.1
        with:
          go-version: '1.22.*'

      - name: Install dependencies
        run: |
          cd backend
          go mod download
    
      - name: Start cluster
        uses: medyagh/setup-minikube@d8c0eb871f6f455542491d86a574477bd3894533 # latest

      - name: Check cluster status and enable headlamp addon
        run: |
          minikube status
          minikube addons enable headlamp
          kubectl wait deployment -n headlamp headlamp --for condition=Available=True --timeout=30s    

      - name: Run tests and calculate code coverage
        run: |
          cd backend
          go test ./... -coverprofile=coverage.out -covermode=atomic -coverpkg=./...
          testcoverage=$(go tool cover -func=coverage.out | grep total | grep -Eo '[0-9]+\.[0-9]+')
          echo "Code coverage: $testcoverage"
          echo "coverage=$testcoverage" >> $GITHUB_ENV
          echo "cleaning up..."
          rm ~/.config/Headlamp/kubeconfigs/config
        shell: bash

      - name: Get base branch code coverage
        run: |
          cd backend
          base_branch="${{ github.base_ref }}"
          testcoverage="${{ env.coverage }}"
          git fetch origin "$base_branch"
          git checkout "origin/$base_branch"
          go test ./... -coverprofile=base_coverage.out -covermode=atomic -coverpkg=./...
          base_coverage=$(go tool cover -func=base_coverage.out | grep total | grep -Eo '[0-9]+\.[0-9]+')
          echo "Base branch code coverage: $base_coverage"
          echo "base_coverage=$base_coverage" >> $GITHUB_ENV
        shell: bash

      - name: Compare code coverage
        run: |
          testcoverage="${{ env.coverage }}"
          base_coverage="${{ env.base_coverage }}"
          if [[ -z $testcoverage || -z $base_coverage ]]; then
            echo "testcoverage or base_coverage is not set. Cannot calculate coverage difference."
            exit 1
          fi
          
          echo "testcoverage=$testcoverage"
          echo "base_coverage=$base_coverage"
          echo "$testcoverage - $base_coverage"

          coverage_diff=$(echo "$testcoverage - $base_coverage" | bc)
          echo "Coverage change: $coverage_diff"
          echo "coverage_diff=$coverage_diff" >> $GITHUB_ENV
        shell: bash

      - name: Comment on PR
        run: |
          testcoverage="${{ env.coverage }}"
          base_coverage="${{ env.base_coverage }}"
          coverage_diff="${{ env.coverage_diff }}"
          if (( $(echo "$coverage_diff < 0" | bc -l) )); then
            emoji="ðŸ˜ž" # Decreased coverage
          else
            emoji="ðŸ˜ƒ" # Increased or unchanged coverage
          fi

          comment="Backend Code coverage changed from $base_coverage% to $testcoverage%. Change: $coverage_diff% $emoji."
          echo "$comment"
          if [[ "${{github.event.pull_request.head.repo.full_name}}" == "${{github.repository}}" ]]; then
            # Forks (like dependabot ones) do not have permission to comment on the PR,
            #   so do not fail the action if this fails.
            gh issue comment ${{github.event.number}} --body "${comment}" || true            
          else
            echo "Pull request raised from a fork. Skipping comment."
          fi
        env:
          GITHUB_TOKEN: ${{ github.token }}
